{
  "version": 3,
  "sources": ["../../../../node_modules/@voerkai18n/vue/src/component.ts", "../../../../node_modules/@voerkai18n/vue/src/hooks.ts", "../../../../node_modules/@voerkai18n/vue/src/plugin.ts", "../../../../node_modules/@voerkai18n/vue/src/transform.ts"],
  "sourcesContent": ["import type {  Component,ComponentPublicInstance  } from 'vue'\r\nimport { defineComponent, h, ref, watch, onUnmounted  } from 'vue'\r\nimport { loadAsyncModule, type VoerkaI18nScope, type VoerkaI18nTranslateProps } from \"@voerkai18n/runtime\"\r\n\r\n\r\nexport type CreateTranslateComponentOptions = {\r\n    default?: string\r\n    tagName?: string \r\n    class?  : string\r\n    style?  : string\r\n    loading?: Component\r\n}\r\n \r\nexport type VueTranslateComponentType = Component<VoerkaI18nTranslateProps> \r\n\r\n\r\nexport function createTranslateComponent(options?: CreateTranslateComponentOptions){\r\n    const { default: defaultMessage = '',  tagName, class:className = 'vt-msg' ,style,loading:LoadingComponent } = Object.assign({ },options)\r\n \r\n    const hasLoading:boolean = !!LoadingComponent\r\n\r\n    return function(scope:VoerkaI18nScope){       \r\n        return defineComponent<VoerkaI18nTranslateProps>({\r\n            name: 'VoerkaI18nTranslate',\r\n            props: {\r\n                id      : { type: String },\r\n                message : { type: [ String, Function ] },\r\n                vars    : { type: [String,Number,Array,Boolean,Object], default: () => [] },\r\n                options : { type: Object, default: () => ({}) },\r\n                tag     : { type: String }, \r\n                default : { type: String, default: '' }\r\n            },   \r\n            setup:(props,{ slots }) => {\r\n\r\n                const { message, id: paragraphId } = props\r\n                const isParagraph: boolean = typeof(paragraphId) === 'string' && paragraphId.length > 0 \r\n\r\n                const result = ref(\r\n                    isParagraph ? slots.default && slots.default()\r\n                     : (\r\n                        typeof props.message === 'function'\r\n                            ? props.default || defaultMessage\r\n                            : scope.translate(message as string, props.vars, props.options)\r\n                        )\r\n                )\r\n                // 仅当是段落时才显示加载中\r\n                const isLoading = ref<boolean>(false)\r\n                const showLoading = typeof props.message === 'function' || isParagraph\r\n                const isFirst = ref(false)\r\n                const tag = props.tag || tagName\r\n                const msgId = scope.getMessageId(props.message)\r\n\r\n                const loadParagraph = async () => {\r\n                    if(paragraphId){\r\n                        const loader =  scope.activeParagraphs[paragraphId]\r\n                        if(!loader) return\r\n                        isLoading.value = true\r\n                        try{               \r\n                            const paragraphText = await loadAsyncModule(loader)\r\n                            result.value = paragraphText\r\n                        }catch(e:any){\r\n                            console.error(e)\r\n                        }finally{\r\n                            isLoading.value = false\r\n                        }                        \r\n                    }                    \r\n                }\r\n\r\n                const loadMessage = async (language: string) => {\r\n                    const loader = typeof props.message === 'function'\r\n                        ? () => (props.message as Function)(language, props.vars, props.options)\r\n                        : () => props.message\r\n                    const messageText = await Promise.resolve(loader())\r\n                    result.value = scope.translate(messageText, props.vars, props.options)\r\n                }\r\n\r\n                const refresh = (language: string) => {\r\n                    if(isParagraph){ \r\n                        loadParagraph()\r\n                    }else{\r\n                        loadMessage(language)\r\n                    }\r\n                } \r\n    \r\n                // 监听语言变化\r\n                const unsubscribe = scope.on('change', refresh)\r\n                \r\n                if (!isFirst.value && (typeof props.message === 'function' || isParagraph )) {\r\n                    refresh(scope.activeLanguage)\r\n                    isFirst.value = true\r\n                } \r\n    \r\n                // 清理事件监听\r\n                onUnmounted(() => {\r\n                    unsubscribe.off()\r\n                })\r\n     \r\n                watch(\r\n                    () => [props.id,props.message, props.vars, props.options],\r\n                    () => loadMessage(scope.activeLanguage)\r\n                )\r\n            \r\n                return function(this:ComponentPublicInstance){                     \r\n                    if (tag || isParagraph) {\r\n                        const attrs:Record<string,any> = {\r\n                            class: className,\r\n                            style: Object.assign({\"position\":\"relative\"},style)\r\n                        }\r\n                        if(msgId) attrs['data-id'] = msgId\r\n                        if(paragraphId) attrs['data-id'] = paragraphId\r\n                        if(scope.library) attrs['data-scope'] = scope.$id\r\n                        return h(tag || 'div', attrs, [\r\n                            result.value,\r\n                            showLoading && hasLoading && isLoading.value  ?\r\n                                LoadingComponent : null \r\n                        ])\r\n                    }else{\r\n                        return result.value\r\n                    }                    \r\n                }\r\n            }\r\n        }) \r\n    }\r\n}", "import type { VoerkaI18nManager,VoerkaI18nTranslate, VoerkaI18nScope } from '@voerkai18n/runtime';\r\nimport { ref, onMounted, onUnmounted } from 'vue'; \r\n\r\n\r\nexport function useVoerkaI18n(scope?:VoerkaI18nScope) {\r\n    const manager:VoerkaI18nManager = globalThis.VoerkaI18n;\r\n    const curScope = scope || manager.scope\r\n    if (!manager || !curScope) {\r\n        throw new Error('VoerkaI18n is not defined');\r\n    }\r\n\r\n    const activeLanguage = ref(manager.activeLanguage);\r\n\r\n\r\n    let listener:any\r\n\r\n    onMounted(() => {\r\n        listener = manager.on(\"change\", ()=>{\r\n            activeLanguage.value = manager.activeLanguage;\r\n        });\r\n    });\r\n\r\n    onUnmounted(() => listener && listener.off()); \r\n\r\n    return {\r\n        manager,\r\n        scope:curScope,\r\n        activeLanguage,\r\n        defaultLanguage: curScope.defaultLanguage,\r\n        languages      : curScope.languages,\r\n        changeLanguage : curScope.change,\r\n        t              : ((...args:any)=>{\r\n            activeLanguage.value\r\n            return curScope.t.apply(curScope,args)\r\n        }) as VoerkaI18nTranslate\r\n,\r\n    }; \r\n\r\n}", "import { VoerkaI18nManager, VoerkaI18nScope } from \"@voerkai18n/runtime\"\r\nimport { ref } from \"vue\"\r\nimport type { App, Plugin } from \"vue\"\r\n\r\nexport type VoerkaI18nVuePluginOptions = {\r\n    i18nScope?: VoerkaI18nScope\r\n}\r\n\r\nexport const i18nPlugin: Plugin<VoerkaI18nVuePluginOptions> =   {\r\n    install: (app:App, options?:VoerkaI18nVuePluginOptions) => { \r\n        const { i18nScope } = Object.assign({\r\n            i18nScope: undefined\r\n        },options)\r\n        const manager:VoerkaI18nManager = globalThis.VoerkaI18n;\r\n        const curScope = i18nScope || manager.scope\r\n        if (!manager || !curScope) {\r\n            throw new Error('VoerkaI18n is not installed');\r\n        }\r\n        \r\n        let activeLanguage = ref(curScope.activeLanguage)                \r\n\r\n        curScope.on(\"change\", ()=>{\r\n            activeLanguage.value = curScope.activeLanguage;\r\n        })\r\n        app.config.globalProperties.$activeLanguage = activeLanguage\r\n        // 注入一个全局可用的t方法，在组件模块中可以直接使用\r\n        app.config.globalProperties.t = function(message:string,...args:any[]){\r\n            // 由于t函数依赖于activeLanguage.value,所以当activeLanguage.value变化时会触发重新渲染\r\n            activeLanguage.value\r\n            return curScope.t(message,...args)\r\n        } \r\n        app.component('Translate',curScope.Translate)\r\n    }\r\n}\r\n\r\n", "import type { VoerkaI18nScope } from '@voerkai18n/runtime';\r\nimport { computed, type ComputedRef,getCurrentInstance } from 'vue'; \r\n\r\nexport function createTranslateTransform(){\r\n    return (scope:VoerkaI18nScope) => {        \r\n        return (result:string)=>{             \r\n            const instance = getCurrentInstance()\r\n            return computed(()=>{\r\n                instance?.appContext.config.globalProperties.$activeLanguage.value\r\n                return scope.t(result)\r\n            });                \r\n        }\r\n    }    \r\n}\r\n\r\nexport type VueTransformResultType = ComputedRef<string>"],
  "mappings": "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",
  "names": ["createTranslateComponent", "options", "defaultMessage", "tagName", "className", "style", "LoadingComponent", "hasLoading", "scope", "defineComponent", "props", "slots", "message", "paragraphId", "isParagraph", "result", "ref", "isLoading", "showLoading", "isFirst", "tag", "msgId", "loadParagraph", "loader", "paragraphText", "loadAsyncModule", "e", "loadMessage", "language", "messageText", "refresh", "unsubscribe", "onUnmounted", "watch", "attrs", "h", "useVoerkaI18n", "manager", "curScope", "activeLanguage", "listener", "onMounted", "args", "i18nPlugin", "app", "i18nScope", "createTranslateTransform", "instance", "getCurrentInstance", "computed"]
}
