{
  "version": 3,
  "sources": ["../../../../node_modules/@babel/types/src/utils/shallowEqual.ts", "../../../../node_modules/@babel/types/src/utils/deprecationWarning.ts", "../../../../node_modules/@babel/types/src/validators/generated/index.ts", "../../../../node_modules/@babel/types/src/validators/matchesPattern.ts", "../../../../node_modules/@babel/types/src/validators/buildMatchMemberExpression.ts", "../../../../node_modules/@babel/types/src/validators/react/isReactComponent.ts", "../../../../node_modules/@babel/types/src/validators/react/isCompatTag.ts", "../../../../node_modules/@babel/types/src/validators/isType.ts", "../../../../node_modules/@babel/types/src/validators/isPlaceholderType.ts", "../../../../node_modules/@babel/types/src/validators/is.ts", "../../../../node_modules/@babel/helper-validator-identifier/src/identifier.ts", "../../../../node_modules/@babel/helper-validator-identifier/src/keyword.ts", "../../../../node_modules/@babel/helper-validator-identifier/src/index.ts", "../../../../node_modules/@babel/types/src/validators/isValidIdentifier.ts", "../../../../node_modules/@babel/helper-string-parser/src/index.ts", "../../../../node_modules/@babel/types/src/constants/index.ts", "../../../../node_modules/@babel/types/src/definitions/utils.ts", "../../../../node_modules/@babel/types/src/definitions/core.ts", "../../../../node_modules/@babel/types/src/definitions/flow.ts", "../../../../node_modules/@babel/types/src/definitions/jsx.ts", "../../../../node_modules/@babel/types/src/definitions/placeholders.ts", "../../../../node_modules/@babel/types/src/definitions/misc.ts", "../../../../node_modules/@babel/types/src/definitions/experimental.ts", "../../../../node_modules/@babel/types/src/definitions/typescript.ts", "../../../../node_modules/@babel/types/src/definitions/deprecated-aliases.ts", "../../../../node_modules/@babel/types/src/definitions/index.ts", "../../../../node_modules/@babel/types/src/validators/validate.ts", "../../../../node_modules/@babel/types/src/builders/generated/lowercase.ts", "../../../../node_modules/@babel/types/src/builders/generated/uppercase.ts", "../../../../node_modules/@babel/types/src/builders/generated/index.ts", "../../../../node_modules/@babel/types/src/utils/react/cleanJSXElementLiteralChild.ts", "../../../../node_modules/@babel/types/src/builders/react/buildChildren.ts", "../../../../node_modules/@babel/types/src/validators/isNode.ts", "../../../../node_modules/@babel/types/src/asserts/assertNode.ts", "../../../../node_modules/@babel/types/src/asserts/generated/index.ts", "../../../../node_modules/@babel/types/src/builders/flow/createTypeAnnotationBasedOnTypeof.ts", "../../../../node_modules/@babel/types/src/modifications/flow/removeTypeDuplicates.ts", "../../../../node_modules/@babel/types/src/builders/flow/createFlowUnionType.ts", "../../../../node_modules/@babel/types/src/modifications/typescript/removeTypeDuplicates.ts", "../../../../node_modules/@babel/types/src/builders/typescript/createTSUnionType.ts", "../../../../node_modules/@babel/types/src/builders/productions.ts", "../../../../node_modules/@babel/types/src/clone/cloneNode.ts", "../../../../node_modules/@babel/types/src/clone/clone.ts", "../../../../node_modules/@babel/types/src/clone/cloneDeep.ts", "../../../../node_modules/@babel/types/src/clone/cloneDeepWithoutLoc.ts", "../../../../node_modules/@babel/types/src/clone/cloneWithoutLoc.ts", "../../../../node_modules/@babel/types/src/comments/addComments.ts", "../../../../node_modules/@babel/types/src/comments/addComment.ts", "../../../../node_modules/@babel/types/src/utils/inherit.ts", "../../../../node_modules/@babel/types/src/comments/inheritInnerComments.ts", "../../../../node_modules/@babel/types/src/comments/inheritLeadingComments.ts", "../../../../node_modules/@babel/types/src/comments/inheritTrailingComments.ts", "../../../../node_modules/@babel/types/src/comments/inheritsComments.ts", "../../../../node_modules/@babel/types/src/comments/removeComments.ts", "../../../../node_modules/@babel/types/src/constants/generated/index.ts", "../../../../node_modules/@babel/types/src/converters/toBlock.ts", "../../../../node_modules/@babel/types/src/converters/ensureBlock.ts", "../../../../node_modules/@babel/types/src/converters/toIdentifier.ts", "../../../../node_modules/@babel/types/src/converters/toBindingIdentifierName.ts", "../../../../node_modules/@babel/types/src/converters/toComputedKey.ts", "../../../../node_modules/@babel/types/src/converters/toExpression.ts", "../../../../node_modules/@babel/types/src/traverse/traverseFast.ts", "../../../../node_modules/@babel/types/src/modifications/removeProperties.ts", "../../../../node_modules/@babel/types/src/modifications/removePropertiesDeep.ts", "../../../../node_modules/@babel/types/src/converters/toKeyAlias.ts", "../../../../node_modules/@babel/types/src/converters/toStatement.ts", "../../../../node_modules/@babel/types/src/converters/valueToNode.ts", "../../../../node_modules/@babel/types/src/modifications/appendToMemberExpression.ts", "../../../../node_modules/@babel/types/src/modifications/inherits.ts", "../../../../node_modules/@babel/types/src/modifications/prependToMemberExpression.ts", "../../../../node_modules/@babel/types/src/retrievers/getAssignmentIdentifiers.ts", "../../../../node_modules/@babel/types/src/retrievers/getBindingIdentifiers.ts", "../../../../node_modules/@babel/types/src/retrievers/getOuterBindingIdentifiers.ts", "../../../../node_modules/@babel/types/src/retrievers/getFunctionName.ts", "../../../../node_modules/@babel/types/src/traverse/traverse.ts", "../../../../node_modules/@babel/types/src/validators/isBinding.ts", "../../../../node_modules/@babel/types/src/validators/isLet.ts", "../../../../node_modules/@babel/types/src/validators/isBlockScoped.ts", "../../../../node_modules/@babel/types/src/validators/isImmutable.ts", "../../../../node_modules/@babel/types/src/validators/isNodesEquivalent.ts", "../../../../node_modules/@babel/types/src/validators/isReferenced.ts", "../../../../node_modules/@babel/types/src/validators/isScope.ts", "../../../../node_modules/@babel/types/src/validators/isSpecifierDefault.ts", "../../../../node_modules/@babel/types/src/validators/isValidES3Identifier.ts", "../../../../node_modules/@babel/types/src/validators/isVar.ts", "../../../../node_modules/@babel/types/src/converters/gatherSequenceExpressions.ts", "../../../../node_modules/@babel/types/src/converters/toSequenceExpression.ts", "../../../../node_modules/@babel/types/src/index.ts", "../../../../node_modules/@babel/template/src/formatters.ts", "../../../../node_modules/@babel/template/src/options.ts", "../../../../node_modules/@babel/parser/src/util/location.ts", "../../../../node_modules/@babel/parser/src/parse-error/module-errors.ts", "../../../../node_modules/@babel/parser/src/parse-error/to-node-description.ts", "../../../../node_modules/@babel/parser/src/parse-error/standard-errors.ts", "../../../../node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts", "../../../../node_modules/@babel/parser/src/parse-error/parse-expression-errors.ts", "../../../../node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../../../../node_modules/@babel/parser/src/parse-error.ts", "../../../../node_modules/@babel/parser/src/options.ts", "../../../../node_modules/@babel/parser/src/plugins/estree.ts", "../../../../node_modules/@babel/parser/src/tokenizer/context.ts", "../../../../node_modules/@babel/parser/src/tokenizer/types.ts", "../../../../node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts", "../../../../node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts", "../../../../node_modules/@babel/parser/src/util/identifier.ts", "../../../../node_modules/@babel/parser/src/util/scope.ts", "../../../../node_modules/@babel/parser/src/plugins/flow/scope.ts", "../../../../node_modules/@babel/parser/src/plugins/flow/index.ts", "../../../../node_modules/@babel/parser/src/plugins/jsx/xhtml.ts", "../../../../node_modules/@babel/parser/src/util/whitespace.ts", "../../../../node_modules/@babel/parser/src/plugins/jsx/index.ts", "../../../../node_modules/@babel/parser/src/plugins/typescript/scope.ts", "../../../../node_modules/@babel/parser/src/util/production-parameter.ts", "../../../../node_modules/@babel/parser/src/parser/base.ts", "../../../../node_modules/@babel/parser/src/parser/comments.ts", "../../../../node_modules/@babel/parser/src/tokenizer/state.ts", "../../../../node_modules/@babel/babel-helper-string-parser/src/index.ts", "../../../../node_modules/@babel/parser/src/tokenizer/index.ts", "../../../../node_modules/@babel/parser/src/util/class-scope.ts", "../../../../node_modules/@babel/parser/src/util/expression-scope.ts", "../../../../node_modules/@babel/parser/src/parser/util.ts", "../../../../node_modules/@babel/parser/src/parser/node.ts", "../../../../node_modules/@babel/parser/src/parser/lval.ts", "../../../../node_modules/@babel/parser/src/plugins/typescript/index.ts", "../../../../node_modules/@babel/parser/src/plugins/placeholders.ts", "../../../../node_modules/@babel/parser/src/plugins/v8intrinsic.ts", "../../../../node_modules/@babel/parser/src/plugin-utils.ts", "../../../../node_modules/@babel/parser/src/parser/expression.ts", "../../../../node_modules/@babel/parser/src/parser/statement.ts", "../../../../node_modules/@babel/parser/src/parser/index.ts", "../../../../node_modules/@babel/parser/src/index.ts", "../../../../node_modules/picocolors/picocolors.browser.js", "../../../../node_modules/@babel/code-frame/node_modules/js-tokens/index.js", "../../../../node_modules/@babel/code-frame/src/defs.ts", "../../../../node_modules/@babel/code-frame/src/highlight.ts", "../../../../node_modules/@babel/code-frame/src/index.ts", "../../../../node_modules/@babel/template/src/parse.ts", "../../../../node_modules/@babel/template/src/populate.ts", "../../../../node_modules/@babel/template/src/string.ts", "../../../../node_modules/@babel/template/src/literal.ts", "../../../../node_modules/@babel/template/src/builder.ts", "../../../../node_modules/@babel/template/src/index.ts", "../../../../node_modules/@babel/helper-plugin-utils/src/index.ts", "../../../../node_modules/@babel/plugin-syntax-jsx/src/index.ts", "../../../../node_modules/browser-assert/lib/assert.js", "../../../../node_modules/@babel/helper-module-imports/src/import-builder.ts", "../../../../node_modules/@babel/helper-module-imports/src/is-module.ts", "../../../../node_modules/@babel/helper-module-imports/src/import-injector.ts", "../../../../node_modules/@babel/helper-module-imports/src/index.ts", "../../../../node_modules/html-tags/html-tags.json", "../../../../node_modules/html-tags/index.js", "../../../../node_modules/svg-tags/lib/svg-tags.json", "../../../../node_modules/svg-tags/lib/index.js", "../../../../node_modules/@vue/babel-plugin-jsx/src/utils.ts", "../../../../node_modules/@vue/babel-plugin-jsx/src/parseDirectives.ts", "../../../../node_modules/@vue/babel-plugin-jsx/src/transform-vue-jsx.ts", "../../../../node_modules/@vue/babel-plugin-jsx/src/sugar-fragment.ts", "../../../../node_modules/@vue/babel-plugin-jsx/src/index.ts"],
  "sourcesContent": ["export default function shallowEqual<T extends object>(\n  actual: object,\n  expected: T,\n): actual is T {\n  const keys = Object.keys(expected) as (keyof T)[];\n\n  for (const key of keys) {\n    if (\n      // @ts-expect-error maybe we should check whether key exists first\n      actual[key] !== expected[key]\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "const warnings = new Set();\n\nexport default function deprecationWarning(\n  oldName: string,\n  newName: string,\n  prefix: string = \"\",\n  cacheKey: string = oldName,\n) {\n  if (warnings.has(cacheKey)) return;\n  warnings.add(cacheKey);\n\n  const { internal, trace } = captureShortStackTrace(1, 2);\n  if (internal) {\n    // If usage comes from an internal package, there is no point in warning because\n    // 1. The new version of the package will already use the new API\n    // 2. When the deprecation will become an error (in a future major version), users\n    //    will have to update every package anyway.\n    return;\n  }\n  console.warn(\n    `${prefix}\\`${oldName}\\` has been deprecated, please migrate to \\`${newName}\\`\\n${trace}`,\n  );\n}\n\nfunction captureShortStackTrace(skip: number, length: number) {\n  const { stackTraceLimit, prepareStackTrace } = Error;\n  let stackTrace: NodeJS.CallSite[];\n  // We add 1 to also take into account this function.\n  Error.stackTraceLimit = 1 + skip + length;\n  Error.prepareStackTrace = function (err, stack) {\n    stackTrace = stack;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  new Error().stack;\n  Error.stackTraceLimit = stackTraceLimit;\n  Error.prepareStackTrace = prepareStackTrace;\n\n  if (!stackTrace) return { internal: false, trace: \"\" };\n\n  const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);\n  return {\n    internal: /[\\\\/]@babel[\\\\/]/.test(shortStackTrace[1].getFileName()),\n    trace: shortStackTrace.map(frame => `    at ${frame}`).join(\"\\n\"),\n  };\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/* eslint-disable no-fallthrough */\n\nimport shallowEqual from \"../../utils/shallowEqual.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport function isArrayExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayExpression> | null,\n): node is t.ArrayExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentExpression> | null,\n): node is t.AssignmentExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BinaryExpression> | null,\n): node is t.BinaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BinaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterpreterDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterpreterDirective> | null,\n): node is t.InterpreterDirective {\n  if (!node) return false;\n\n  if (node.type !== \"InterpreterDirective\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Directive> | null,\n): node is t.Directive {\n  if (!node) return false;\n\n  if (node.type !== \"Directive\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirectiveLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DirectiveLiteral> | null,\n): node is t.DirectiveLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DirectiveLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockStatement> | null,\n): node is t.BlockStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BlockStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBreakStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BreakStatement> | null,\n): node is t.BreakStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BreakStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CallExpression> | null,\n): node is t.CallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"CallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCatchClause(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CatchClause> | null,\n): node is t.CatchClause {\n  if (!node) return false;\n\n  if (node.type !== \"CatchClause\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditionalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ConditionalExpression> | null,\n): node is t.ConditionalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ConditionalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isContinueStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ContinueStatement> | null,\n): node is t.ContinueStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ContinueStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDebuggerStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DebuggerStatement> | null,\n): node is t.DebuggerStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DebuggerStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoWhileStatement> | null,\n): node is t.DoWhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DoWhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyStatement> | null,\n): node is t.EmptyStatement {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionStatement> | null,\n): node is t.ExpressionStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ExpressionStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.File> | null,\n): node is t.File {\n  if (!node) return false;\n\n  if (node.type !== \"File\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForInStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForInStatement> | null,\n): node is t.ForInStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForInStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForStatement> | null,\n): node is t.ForStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionDeclaration> | null,\n): node is t.FunctionDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionExpression> | null,\n): node is t.FunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Identifier> | null,\n): node is t.Identifier {\n  if (!node) return false;\n\n  if (node.type !== \"Identifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IfStatement> | null,\n): node is t.IfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"IfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLabeledStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LabeledStatement> | null,\n): node is t.LabeledStatement {\n  if (!node) return false;\n\n  if (node.type !== \"LabeledStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteral> | null,\n): node is t.StringLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumericLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumericLiteral> | null,\n): node is t.NumericLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NumericLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteral> | null,\n): node is t.NullLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteral> | null,\n): node is t.BooleanLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRegExpLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegExpLiteral> | null,\n): node is t.RegExpLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"RegExpLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLogicalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LogicalExpression> | null,\n): node is t.LogicalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"LogicalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MemberExpression> | null,\n): node is t.MemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"MemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNewExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NewExpression> | null,\n): node is t.NewExpression {\n  if (!node) return false;\n\n  if (node.type !== \"NewExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProgram(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Program> | null,\n): node is t.Program {\n  if (!node) return false;\n\n  if (node.type !== \"Program\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectExpression> | null,\n): node is t.ObjectExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMethod> | null,\n): node is t.ObjectMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectProperty> | null,\n): node is t.ObjectProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRestElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestElement> | null,\n): node is t.RestElement {\n  if (!node) return false;\n\n  if (node.type !== \"RestElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isReturnStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ReturnStatement> | null,\n): node is t.ReturnStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ReturnStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSequenceExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SequenceExpression> | null,\n): node is t.SequenceExpression {\n  if (!node) return false;\n\n  if (node.type !== \"SequenceExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isParenthesizedExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ParenthesizedExpression> | null,\n): node is t.ParenthesizedExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ParenthesizedExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchCase(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchCase> | null,\n): node is t.SwitchCase {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchCase\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchStatement> | null,\n): node is t.SwitchStatement {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisExpression> | null,\n): node is t.ThisExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ThisExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThrowStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThrowStatement> | null,\n): node is t.ThrowStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ThrowStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTryStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TryStatement> | null,\n): node is t.TryStatement {\n  if (!node) return false;\n\n  if (node.type !== \"TryStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryExpression> | null,\n): node is t.UnaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UnaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUpdateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UpdateExpression> | null,\n): node is t.UpdateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UpdateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclaration> | null,\n): node is t.VariableDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclarator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclarator> | null,\n): node is t.VariableDeclarator {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclarator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WhileStatement> | null,\n): node is t.WhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWithStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WithStatement> | null,\n): node is t.WithStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WithStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentPattern> | null,\n): node is t.AssignmentPattern {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayPattern> | null,\n): node is t.ArrayPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrowFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrowFunctionExpression> | null,\n): node is t.ArrowFunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrowFunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassBody> | null,\n): node is t.ClassBody {\n  if (!node) return false;\n\n  if (node.type !== \"ClassBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassExpression> | null,\n): node is t.ClassExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ClassExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassDeclaration> | null,\n): node is t.ClassDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ClassDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportAllDeclaration> | null,\n): node is t.ExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultDeclaration> | null,\n): node is t.ExportDefaultDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamedDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamedDeclaration> | null,\n): node is t.ExportNamedDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamedDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportSpecifier> | null,\n): node is t.ExportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForOfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForOfStatement> | null,\n): node is t.ForOfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForOfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDeclaration> | null,\n): node is t.ImportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDefaultSpecifier> | null,\n): node is t.ImportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportNamespaceSpecifier> | null,\n): node is t.ImportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportSpecifier> | null,\n): node is t.ImportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportExpression> | null,\n): node is t.ImportExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ImportExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMetaProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MetaProperty> | null,\n): node is t.MetaProperty {\n  if (!node) return false;\n\n  if (node.type !== \"MetaProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassMethod> | null,\n): node is t.ClassMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectPattern> | null,\n): node is t.ObjectPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSpreadElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadElement> | null,\n): node is t.SpreadElement {\n  if (!node) return false;\n\n  if (node.type !== \"SpreadElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSuper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Super> | null,\n): node is t.Super {\n  if (!node) return false;\n\n  if (node.type !== \"Super\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTaggedTemplateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TaggedTemplateExpression> | null,\n): node is t.TaggedTemplateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TaggedTemplateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateElement> | null,\n): node is t.TemplateElement {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateLiteral> | null,\n): node is t.TemplateLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isYieldExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.YieldExpression> | null,\n): node is t.YieldExpression {\n  if (!node) return false;\n\n  if (node.type !== \"YieldExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAwaitExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AwaitExpression> | null,\n): node is t.AwaitExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AwaitExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImport(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Import> | null,\n): node is t.Import {\n  if (!node) return false;\n\n  if (node.type !== \"Import\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBigIntLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BigIntLiteral> | null,\n): node is t.BigIntLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BigIntLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamespaceSpecifier> | null,\n): node is t.ExportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalMemberExpression> | null,\n): node is t.OptionalMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalCallExpression> | null,\n): node is t.OptionalCallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalCallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassProperty> | null,\n): node is t.ClassProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassAccessorProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassAccessorProperty> | null,\n): node is t.ClassAccessorProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassAccessorProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateProperty> | null,\n): node is t.ClassPrivateProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateMethod> | null,\n): node is t.ClassPrivateMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivateName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PrivateName> | null,\n): node is t.PrivateName {\n  if (!node) return false;\n\n  if (node.type !== \"PrivateName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStaticBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StaticBlock> | null,\n): node is t.StaticBlock {\n  if (!node) return false;\n\n  if (node.type !== \"StaticBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportAttribute> | null,\n): node is t.ImportAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"ImportAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAnyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AnyTypeAnnotation> | null,\n): node is t.AnyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"AnyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayTypeAnnotation> | null,\n): node is t.ArrayTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanTypeAnnotation> | null,\n): node is t.BooleanTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteralTypeAnnotation> | null,\n): node is t.BooleanLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteralTypeAnnotation> | null,\n): node is t.NullLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassImplements(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassImplements> | null,\n): node is t.ClassImplements {\n  if (!node) return false;\n\n  if (node.type !== \"ClassImplements\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareClass> | null,\n): node is t.DeclareClass {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareClass\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareFunction> | null,\n): node is t.DeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareInterface(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareInterface> | null,\n): node is t.DeclareInterface {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareInterface\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModule(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModule> | null,\n): node is t.DeclareModule {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModule\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModuleExports(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModuleExports> | null,\n): node is t.DeclareModuleExports {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModuleExports\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareTypeAlias> | null,\n): node is t.DeclareTypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareTypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareOpaqueType> | null,\n): node is t.DeclareOpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareOpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareVariable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareVariable> | null,\n): node is t.DeclareVariable {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareVariable\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportDeclaration> | null,\n): node is t.DeclareExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportAllDeclaration> | null,\n): node is t.DeclareExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclaredPredicate> | null,\n): node is t.DeclaredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"DeclaredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExistsTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExistsTypeAnnotation> | null,\n): node is t.ExistsTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ExistsTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeAnnotation> | null,\n): node is t.FunctionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeParam(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeParam> | null,\n): node is t.FunctionTypeParam {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeParam\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isGenericTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.GenericTypeAnnotation> | null,\n): node is t.GenericTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"GenericTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInferredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InferredPredicate> | null,\n): node is t.InferredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"InferredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceExtends(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceExtends> | null,\n): node is t.InterfaceExtends {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceExtends\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceDeclaration> | null,\n): node is t.InterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceTypeAnnotation> | null,\n): node is t.InterfaceTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIntersectionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IntersectionTypeAnnotation> | null,\n): node is t.IntersectionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"IntersectionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMixedTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MixedTypeAnnotation> | null,\n): node is t.MixedTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"MixedTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyTypeAnnotation> | null,\n): node is t.EmptyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullableTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullableTypeAnnotation> | null,\n): node is t.NullableTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullableTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteralTypeAnnotation> | null,\n): node is t.NumberLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberTypeAnnotation> | null,\n): node is t.NumberTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeAnnotation> | null,\n): node is t.ObjectTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeInternalSlot(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeInternalSlot> | null,\n): node is t.ObjectTypeInternalSlot {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeInternalSlot\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeCallProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeCallProperty> | null,\n): node is t.ObjectTypeCallProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeCallProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeIndexer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeIndexer> | null,\n): node is t.ObjectTypeIndexer {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeIndexer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeProperty> | null,\n): node is t.ObjectTypeProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeSpreadProperty> | null,\n): node is t.ObjectTypeSpreadProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeSpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OpaqueType> | null,\n): node is t.OpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"OpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isQualifiedTypeIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.QualifiedTypeIdentifier> | null,\n): node is t.QualifiedTypeIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"QualifiedTypeIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteralTypeAnnotation> | null,\n): node is t.StringLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringTypeAnnotation> | null,\n): node is t.StringTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSymbolTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SymbolTypeAnnotation> | null,\n): node is t.SymbolTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"SymbolTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisTypeAnnotation> | null,\n): node is t.ThisTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ThisTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleTypeAnnotation> | null,\n): node is t.TupleTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TupleTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeofTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeofTypeAnnotation> | null,\n): node is t.TypeofTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeofTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAlias> | null,\n): node is t.TypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAnnotation> | null,\n): node is t.TypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeCastExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeCastExpression> | null,\n): node is t.TypeCastExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TypeCastExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameter> | null,\n): node is t.TypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterDeclaration> | null,\n): node is t.TypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterInstantiation> | null,\n): node is t.TypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnionTypeAnnotation> | null,\n): node is t.UnionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"UnionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariance(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Variance> | null,\n): node is t.Variance {\n  if (!node) return false;\n\n  if (node.type !== \"Variance\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVoidTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VoidTypeAnnotation> | null,\n): node is t.VoidTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"VoidTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDeclaration> | null,\n): node is t.EnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanBody> | null,\n): node is t.EnumBooleanBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberBody> | null,\n): node is t.EnumNumberBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringBody> | null,\n): node is t.EnumStringBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumSymbolBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumSymbolBody> | null,\n): node is t.EnumSymbolBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumSymbolBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanMember> | null,\n): node is t.EnumBooleanMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberMember> | null,\n): node is t.EnumNumberMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringMember> | null,\n): node is t.EnumStringMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDefaultedMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDefaultedMember> | null,\n): node is t.EnumDefaultedMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDefaultedMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IndexedAccessType> | null,\n): node is t.IndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"IndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalIndexedAccessType> | null,\n): node is t.OptionalIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXAttribute> | null,\n): node is t.JSXAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingElement> | null,\n): node is t.JSXClosingElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXElement> | null,\n): node is t.JSXElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXEmptyExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXEmptyExpression> | null,\n): node is t.JSXEmptyExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXEmptyExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXExpressionContainer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXExpressionContainer> | null,\n): node is t.JSXExpressionContainer {\n  if (!node) return false;\n\n  if (node.type !== \"JSXExpressionContainer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadChild(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadChild> | null,\n): node is t.JSXSpreadChild {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadChild\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXIdentifier> | null,\n): node is t.JSXIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"JSXIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXMemberExpression> | null,\n): node is t.JSXMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXNamespacedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXNamespacedName> | null,\n): node is t.JSXNamespacedName {\n  if (!node) return false;\n\n  if (node.type !== \"JSXNamespacedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningElement> | null,\n): node is t.JSXOpeningElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadAttribute> | null,\n): node is t.JSXSpreadAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXText(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXText> | null,\n): node is t.JSXText {\n  if (!node) return false;\n\n  if (node.type !== \"JSXText\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXFragment> | null,\n): node is t.JSXFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningFragment> | null,\n): node is t.JSXOpeningFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingFragment> | null,\n): node is t.JSXClosingFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Noop> | null,\n): node is t.Noop {\n  if (!node) return false;\n\n  if (node.type !== \"Noop\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Placeholder> | null,\n): node is t.Placeholder {\n  if (!node) return false;\n\n  if (node.type !== \"Placeholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isV8IntrinsicIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.V8IntrinsicIdentifier> | null,\n): node is t.V8IntrinsicIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"V8IntrinsicIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArgumentPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArgumentPlaceholder> | null,\n): node is t.ArgumentPlaceholder {\n  if (!node) return false;\n\n  if (node.type !== \"ArgumentPlaceholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBindExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BindExpression> | null,\n): node is t.BindExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BindExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecorator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Decorator> | null,\n): node is t.Decorator {\n  if (!node) return false;\n\n  if (node.type !== \"Decorator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoExpression> | null,\n): node is t.DoExpression {\n  if (!node) return false;\n\n  if (node.type !== \"DoExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultSpecifier> | null,\n): node is t.ExportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRecordExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RecordExpression> | null,\n): node is t.RecordExpression {\n  if (!node) return false;\n\n  if (node.type !== \"RecordExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleExpression> | null,\n): node is t.TupleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TupleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecimalLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DecimalLiteral> | null,\n): node is t.DecimalLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DecimalLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleExpression> | null,\n): node is t.ModuleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ModuleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TopicReference> | null,\n): node is t.TopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"TopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineTopicExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineTopicExpression> | null,\n): node is t.PipelineTopicExpression {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineTopicExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineBareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineBareFunction> | null,\n): node is t.PipelineBareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineBareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelinePrimaryTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelinePrimaryTopicReference> | null,\n): node is t.PipelinePrimaryTopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"PipelinePrimaryTopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVoidPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VoidPattern> | null,\n): node is t.VoidPattern {\n  if (!node) return false;\n\n  if (node.type !== \"VoidPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParameterProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParameterProperty> | null,\n): node is t.TSParameterProperty {\n  if (!node) return false;\n\n  if (node.type !== \"TSParameterProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareFunction> | null,\n): node is t.TSDeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareMethod> | null,\n): node is t.TSDeclareMethod {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSQualifiedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSQualifiedName> | null,\n): node is t.TSQualifiedName {\n  if (!node) return false;\n\n  if (node.type !== \"TSQualifiedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSCallSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSCallSignatureDeclaration> | null,\n): node is t.TSCallSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSCallSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructSignatureDeclaration> | null,\n): node is t.TSConstructSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSPropertySignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSPropertySignature> | null,\n): node is t.TSPropertySignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSPropertySignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMethodSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMethodSignature> | null,\n): node is t.TSMethodSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSMethodSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexSignature> | null,\n): node is t.TSIndexSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAnyKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAnyKeyword> | null,\n): node is t.TSAnyKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSAnyKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBooleanKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBooleanKeyword> | null,\n): node is t.TSBooleanKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBooleanKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBigIntKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBigIntKeyword> | null,\n): node is t.TSBigIntKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBigIntKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntrinsicKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntrinsicKeyword> | null,\n): node is t.TSIntrinsicKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntrinsicKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNeverKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNeverKeyword> | null,\n): node is t.TSNeverKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNeverKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNullKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNullKeyword> | null,\n): node is t.TSNullKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNullKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNumberKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNumberKeyword> | null,\n): node is t.TSNumberKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNumberKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSObjectKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSObjectKeyword> | null,\n): node is t.TSObjectKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSObjectKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSStringKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSStringKeyword> | null,\n): node is t.TSStringKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSStringKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSymbolKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSymbolKeyword> | null,\n): node is t.TSSymbolKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSSymbolKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUndefinedKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUndefinedKeyword> | null,\n): node is t.TSUndefinedKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUndefinedKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnknownKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnknownKeyword> | null,\n): node is t.TSUnknownKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnknownKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSVoidKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSVoidKeyword> | null,\n): node is t.TSVoidKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSVoidKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSThisType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSThisType> | null,\n): node is t.TSThisType {\n  if (!node) return false;\n\n  if (node.type !== \"TSThisType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSFunctionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSFunctionType> | null,\n): node is t.TSFunctionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSFunctionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructorType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructorType> | null,\n): node is t.TSConstructorType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructorType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeReference> | null,\n): node is t.TSTypeReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypePredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypePredicate> | null,\n): node is t.TSTypePredicate {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypePredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeQuery(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeQuery> | null,\n): node is t.TSTypeQuery {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeQuery\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeLiteral> | null,\n): node is t.TSTypeLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSArrayType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSArrayType> | null,\n): node is t.TSArrayType {\n  if (!node) return false;\n\n  if (node.type !== \"TSArrayType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTupleType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTupleType> | null,\n): node is t.TSTupleType {\n  if (!node) return false;\n\n  if (node.type !== \"TSTupleType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSOptionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSOptionalType> | null,\n): node is t.TSOptionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSOptionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSRestType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSRestType> | null,\n): node is t.TSRestType {\n  if (!node) return false;\n\n  if (node.type !== \"TSRestType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamedTupleMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamedTupleMember> | null,\n): node is t.TSNamedTupleMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamedTupleMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnionType> | null,\n): node is t.TSUnionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntersectionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntersectionType> | null,\n): node is t.TSIntersectionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntersectionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConditionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConditionalType> | null,\n): node is t.TSConditionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConditionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInferType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInferType> | null,\n): node is t.TSInferType {\n  if (!node) return false;\n\n  if (node.type !== \"TSInferType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParenthesizedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParenthesizedType> | null,\n): node is t.TSParenthesizedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSParenthesizedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeOperator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeOperator> | null,\n): node is t.TSTypeOperator {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeOperator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexedAccessType> | null,\n): node is t.TSIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMappedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMappedType> | null,\n): node is t.TSMappedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSMappedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTemplateLiteralType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTemplateLiteralType> | null,\n): node is t.TSTemplateLiteralType {\n  if (!node) return false;\n\n  if (node.type !== \"TSTemplateLiteralType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSLiteralType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSLiteralType> | null,\n): node is t.TSLiteralType {\n  if (!node) return false;\n\n  if (node.type !== \"TSLiteralType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExpressionWithTypeArguments(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExpressionWithTypeArguments> | null,\n): node is t.TSExpressionWithTypeArguments {\n  if (!node) return false;\n\n  if (node.type !== \"TSExpressionWithTypeArguments\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceDeclaration> | null,\n): node is t.TSInterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceBody> | null,\n): node is t.TSInterfaceBody {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAliasDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAliasDeclaration> | null,\n): node is t.TSTypeAliasDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAliasDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInstantiationExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInstantiationExpression> | null,\n): node is t.TSInstantiationExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSInstantiationExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAsExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAsExpression> | null,\n): node is t.TSAsExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSAsExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSatisfiesExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSatisfiesExpression> | null,\n): node is t.TSSatisfiesExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSSatisfiesExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAssertion(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAssertion> | null,\n): node is t.TSTypeAssertion {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAssertion\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumBody> | null,\n): node is t.TSEnumBody {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumDeclaration> | null,\n): node is t.TSEnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumMember> | null,\n): node is t.TSEnumMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleDeclaration> | null,\n): node is t.TSModuleDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleBlock> | null,\n): node is t.TSModuleBlock {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportType> | null,\n): node is t.TSImportType {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportEqualsDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportEqualsDeclaration> | null,\n): node is t.TSImportEqualsDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportEqualsDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExternalModuleReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExternalModuleReference> | null,\n): node is t.TSExternalModuleReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSExternalModuleReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNonNullExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNonNullExpression> | null,\n): node is t.TSNonNullExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSNonNullExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExportAssignment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExportAssignment> | null,\n): node is t.TSExportAssignment {\n  if (!node) return false;\n\n  if (node.type !== \"TSExportAssignment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamespaceExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamespaceExportDeclaration> | null,\n): node is t.TSNamespaceExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamespaceExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAnnotation> | null,\n): node is t.TSTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterInstantiation> | null,\n): node is t.TSTypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterDeclaration> | null,\n): node is t.TSTypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameter> | null,\n): node is t.TSTypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStandardized(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Standardized> | null,\n): node is t.Standardized {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"InterpreterDirective\":\n    case \"Directive\":\n    case \"DirectiveLiteral\":\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"CallExpression\":\n    case \"CatchClause\":\n    case \"ConditionalExpression\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"File\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"Program\":\n    case \"ObjectExpression\":\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"RestElement\":\n    case \"ReturnStatement\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"SwitchCase\":\n    case \"SwitchStatement\":\n    case \"ThisExpression\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"VariableDeclaration\":\n    case \"VariableDeclarator\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassBody\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ExportSpecifier\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"ClassMethod\":\n    case \"ObjectPattern\":\n    case \"SpreadElement\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateElement\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"ExportNamespaceSpecifier\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n    case \"StaticBlock\":\n    case \"ImportAttribute\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Identifier\":\n        case \"StringLiteral\":\n        case \"BlockStatement\":\n        case \"ClassBody\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Expression> | null,\n): node is t.Expression {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"CallExpression\":\n    case \"ConditionalExpression\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"ObjectExpression\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"ThisExpression\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"TypeCastExpression\":\n    case \"JSXElement\":\n    case \"JSXFragment\":\n    case \"BindExpression\":\n    case \"DoExpression\":\n    case \"RecordExpression\":\n    case \"TupleExpression\":\n    case \"DecimalLiteral\":\n    case \"ModuleExpression\":\n    case \"TopicReference\":\n    case \"PipelineTopicExpression\":\n    case \"PipelineBareFunction\":\n    case \"PipelinePrimaryTopicReference\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Expression\":\n        case \"Identifier\":\n        case \"StringLiteral\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinary(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Binary> | null,\n): node is t.Binary {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isScopable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Scopable> | null,\n): node is t.Scopable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockParent> | null,\n): node is t.BlockParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Block> | null,\n): node is t.Block {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"Program\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Statement> | null,\n): node is t.Statement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"ReturnStatement\":\n    case \"SwitchStatement\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"VariableDeclaration\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Statement\":\n        case \"Declaration\":\n        case \"BlockStatement\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTerminatorless(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Terminatorless> | null,\n): node is t.Terminatorless {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCompletionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CompletionStatement> | null,\n): node is t.CompletionStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditional(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Conditional> | null,\n): node is t.Conditional {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Loop> | null,\n): node is t.Loop {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"WhileStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.While> | null,\n): node is t.While {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"WhileStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionWrapper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionWrapper> | null,\n): node is t.ExpressionWrapper {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExpressionStatement\":\n    case \"ParenthesizedExpression\":\n    case \"TypeCastExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.For> | null,\n): node is t.For {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForXStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForXStatement> | null,\n): node is t.ForXStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Function> | null,\n): node is t.Function {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionParent> | null,\n): node is t.FunctionParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPureish(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pureish> | null,\n): node is t.Pureish {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"ArrowFunctionExpression\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Declaration> | null,\n): node is t.Declaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"VariableDeclaration\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n    case \"TSImportEqualsDeclaration\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Declaration\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionParameter> | null,\n): node is t.FunctionParameter {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"VoidPattern\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Identifier\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPatternLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PatternLike> | null,\n): node is t.PatternLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"VoidPattern\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLVal(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LVal> | null,\n): node is t.LVal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSParameterProperty\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEntityName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEntityName> | null,\n): node is t.TSEntityName {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"TSQualifiedName\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Identifier\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Literal> | null,\n): node is t.Literal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"TemplateLiteral\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImmutable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Immutable> | null,\n): node is t.Immutable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"BigIntLiteral\":\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXOpeningElement\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUserWhitespacable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UserWhitespacable> | null,\n): node is t.UserWhitespacable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Method> | null,\n): node is t.Method {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMember> | null,\n): node is t.ObjectMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Property> | null,\n): node is t.Property {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectProperty\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryLike> | null,\n): node is t.UnaryLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"UnaryExpression\":\n    case \"SpreadElement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pattern> | null,\n): node is t.Pattern {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"VoidPattern\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Pattern\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Class> | null,\n): node is t.Class {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportOrExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportOrExportDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDeclaration> | null,\n): node is t.ExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleSpecifier> | null,\n): node is t.ModuleSpecifier {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportSpecifier\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAccessor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Accessor> | null,\n): node is t.Accessor {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassAccessorProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Private> | null,\n): node is t.Private {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlow(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Flow> | null,\n): node is t.Flow {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ClassImplements\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"DeclaredPredicate\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"FunctionTypeParam\":\n    case \"GenericTypeAnnotation\":\n    case \"InferredPredicate\":\n    case \"InterfaceExtends\":\n    case \"InterfaceDeclaration\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n    case \"OpaqueType\":\n    case \"QualifiedTypeIdentifier\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"TypeAlias\":\n    case \"TypeAnnotation\":\n    case \"TypeCastExpression\":\n    case \"TypeParameter\":\n    case \"TypeParameterDeclaration\":\n    case \"TypeParameterInstantiation\":\n    case \"UnionTypeAnnotation\":\n    case \"Variance\":\n    case \"VoidTypeAnnotation\":\n    case \"EnumDeclaration\":\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowType> | null,\n): node is t.FlowType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"GenericTypeAnnotation\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"UnionTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowBaseAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowBaseAnnotation> | null,\n): node is t.FlowBaseAnnotation {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowDeclaration> | null,\n): node is t.FlowDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowPredicate> | null,\n): node is t.FlowPredicate {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclaredPredicate\":\n    case \"InferredPredicate\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBody> | null,\n): node is t.EnumBody {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumMember> | null,\n): node is t.EnumMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSX(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSX> | null,\n): node is t.JSX {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXEmptyExpression\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXIdentifier\":\n    case \"JSXMemberExpression\":\n    case \"JSXNamespacedName\":\n    case \"JSXOpeningElement\":\n    case \"JSXSpreadAttribute\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMiscellaneous(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Miscellaneous> | null,\n): node is t.Miscellaneous {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Noop\":\n    case \"Placeholder\":\n    case \"V8IntrinsicIdentifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeScript(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeScript> | null,\n): node is t.TypeScript {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSParameterProperty\":\n    case \"TSDeclareFunction\":\n    case \"TSDeclareMethod\":\n    case \"TSQualifiedName\":\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSNamedTupleMember\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSTemplateLiteralType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSInterfaceBody\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSEnumBody\":\n    case \"TSEnumDeclaration\":\n    case \"TSEnumMember\":\n    case \"TSModuleDeclaration\":\n    case \"TSModuleBlock\":\n    case \"TSImportType\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExternalModuleReference\":\n    case \"TSNonNullExpression\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n    case \"TSTypeAnnotation\":\n    case \"TSTypeParameterInstantiation\":\n    case \"TSTypeParameterDeclaration\":\n    case \"TSTypeParameter\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeElement> | null,\n): node is t.TSTypeElement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSType> | null,\n): node is t.TSType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSTemplateLiteralType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSImportType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBaseType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBaseType> | null,\n): node is t.TSBaseType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSTemplateLiteralType\":\n    case \"TSLiteralType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isNumericLiteral`\n */\nexport function isNumberLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteral> | null,\n): boolean {\n  deprecationWarning(\"isNumberLiteral\", \"isNumericLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRegExpLiteral`\n */\nexport function isRegexLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegexLiteral> | null,\n): boolean {\n  deprecationWarning(\"isRegexLiteral\", \"isRegExpLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"RegexLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRestElement`\n */\nexport function isRestProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestProperty> | null,\n): boolean {\n  deprecationWarning(\"isRestProperty\", \"isRestElement\");\n  if (!node) return false;\n\n  if (node.type !== \"RestProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isSpreadElement`\n */\nexport function isSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadProperty> | null,\n): boolean {\n  deprecationWarning(\"isSpreadProperty\", \"isSpreadElement\");\n  if (!node) return false;\n\n  if (node.type !== \"SpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isImportOrExportDeclaration`\n */\nexport function isModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  deprecationWarning(\"isModuleDeclaration\", \"isImportOrExportDeclaration\");\n  return isImportOrExportDeclaration(node, opts);\n}\n", "import {\n  isIdentifier,\n  isMetaProperty,\n  isMemberExpression,\n  isPrivateName,\n  isStringLiteral,\n  isSuper,\n  isThisExpression,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nfunction isMemberExpressionLike(\n  node: t.Node,\n): node is t.MemberExpression | t.MetaProperty {\n  return isMemberExpression(node) || isMetaProperty(node);\n}\n\n/**\n * Determines whether or not the input node `member` matches the\n * input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function matchesPattern(\n  member: t.Node | null | undefined,\n  match: string | string[],\n  allowPartial?: boolean,\n): boolean {\n  // not a member expression\n  if (!isMemberExpressionLike(member)) return false;\n\n  const parts = Array.isArray(match) ? match : match.split(\".\");\n  const nodes = [];\n\n  let node;\n  for (\n    node = member;\n    isMemberExpressionLike(node);\n    node = (node as t.MemberExpression).object ?? (node as t.MetaProperty).meta\n  ) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if (isIdentifier(node)) {\n      value = node.name;\n    } else if (isStringLiteral(node)) {\n      value = node.value;\n    } else if (isThisExpression(node)) {\n      value = \"this\";\n    } else if (isSuper(node)) {\n      value = \"super\";\n    } else if (isPrivateName(node)) {\n      value = \"#\" + node.id.name;\n    } else {\n      return false;\n    }\n\n    if (parts[i] !== value) return false;\n  }\n\n  return true;\n}\n", "import matchesPattern from \"./matchesPattern.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Build a function that when called will return whether or not the\n * input `node` `MemberExpression` matches the input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function buildMatchMemberExpression(\n  match: string,\n  allowPartial?: boolean,\n) {\n  const parts = match.split(\".\");\n\n  return (member: t.Node) => matchesPattern(member, parts, allowPartial);\n}\n", "import buildMatchMemberExpression from \"../buildMatchMemberExpression.ts\";\n\nconst isReactComponent = buildMatchMemberExpression(\"React.Component\");\n\nexport default isReactComponent;\n", "export default function isCompatTag(tagName?: string): boolean {\n  // Must start with a lowercase ASCII letter\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n", "import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // If nodeType is nullish, it can't be an alias of targetType.\n  if (nodeType == null) return false;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases?.includes(nodeType)) return true;\n\n  return false;\n}\n", "import { PLACEHOLDERS_ALIAS } from \"../definitions/index.ts\";\n\n/**\n * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.\n */\nexport default function isPlaceholderType(\n  placeholderType: string,\n  targetType: string,\n): boolean {\n  if (placeholderType === targetType) return true;\n\n  const aliases: Array<string> | undefined =\n    PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases?.includes(targetType)) return true;\n\n  return false;\n}\n", "import shallowEqual from \"../utils/shallowEqual.ts\";\nimport isType from \"./isType.ts\";\nimport isPlaceholderType from \"./isPlaceholderType.ts\";\nimport { FLIPPED_ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function is<T extends t.Node[\"type\"]>(\n  type: T,\n  node: t.Node | null | undefined,\n  opts?: undefined,\n): node is Extract<t.Node, { type: T }>;\n\nexport default function is<\n  T extends t.Node[\"type\"],\n  P extends Extract<t.Node, { type: T }>,\n>(type: T, n: t.Node | null | undefined, required: Partial<P>): n is P;\n\nexport default function is<P extends t.Node>(\n  type: string,\n  node: t.Node | null | undefined,\n  opts: Partial<P>,\n): node is P;\n\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node;\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n */\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node {\n  if (!node) return false;\n\n  const matches = isType(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === \"Placeholder\" && type in FLIPPED_ALIAS_KEYS) {\n      // We can only return true if the placeholder doesn't replace a real node,\n      // but it replaces a category of nodes (an alias).\n      //\n      // t.is(\"Identifier\", node) gives some guarantees about node's shape, so we\n      // can't say that Placeholder(expectedNode: \"Identifier\") is an identifier\n      // because it doesn't have the same properties.\n      // On the other hand, t.is(\"Expression\", node) doesn't say anything about\n      // the shape of node because Expression can be many different nodes: we can,\n      // and should, safely report expression placeholders as Expressions.\n      return isPlaceholderType(node.expectedNode, type);\n    }\n    return false;\n  }\n\n  if (opts === undefined) {\n    return true;\n  } else {\n    return shallowEqual(node, opts);\n  }\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "export {\n  isIdentifierName,\n  isIdentifierChar,\n  isIdentifierStart,\n} from \"./identifier.ts\";\nexport {\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"./keyword.ts\";\n", "import {\n  isIdentifierName,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\nexport default function isValidIdentifier(\n  name: string,\n  reserved: boolean = true,\n): boolean {\n  if (typeof name !== \"string\") return false;\n\n  if (reserved) {\n    // \"await\" is invalid in module, valid in script; better be safe (see #4952)\n    if (isKeyword(name) || isStrictReservedWord(name, true)) {\n      return false;\n    }\n  }\n\n  return isIdentifierName(name);\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "export const STATEMENT_OR_BLOCK_KEYS = [\"consequent\", \"body\", \"alternate\"];\nexport const FLATTENABLE_KEYS = [\"body\", \"expressions\"];\nexport const FOR_INIT_KEYS = [\"left\", \"init\"];\nexport const COMMENT_KEYS = [\n  \"leadingComments\",\n  \"trailingComments\",\n  \"innerComments\",\n] as const;\n\nexport const LOGICAL_OPERATORS = [\"||\", \"&&\", \"??\"];\nexport const UPDATE_OPERATORS = [\"++\", \"--\"];\n\nexport const BOOLEAN_NUMBER_BINARY_OPERATORS = [\">\", \"<\", \">=\", \"<=\"];\nexport const EQUALITY_BINARY_OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\nexport const COMPARISON_BINARY_OPERATORS = [\n  ...EQUALITY_BINARY_OPERATORS,\n  \"in\",\n  \"instanceof\",\n];\nexport const BOOLEAN_BINARY_OPERATORS = [\n  ...COMPARISON_BINARY_OPERATORS,\n  ...BOOLEAN_NUMBER_BINARY_OPERATORS,\n];\nexport const NUMBER_BINARY_OPERATORS = [\n  \"-\",\n  \"/\",\n  \"%\",\n  \"*\",\n  \"**\",\n  \"&\",\n  \"|\",\n  \">>\",\n  \">>>\",\n  \"<<\",\n  \"^\",\n];\nexport const BINARY_OPERATORS = [\n  \"+\",\n  ...NUMBER_BINARY_OPERATORS,\n  ...BOOLEAN_BINARY_OPERATORS,\n  \"|>\",\n];\n\nexport const ASSIGNMENT_OPERATORS = [\n  \"=\",\n  \"+=\",\n  ...NUMBER_BINARY_OPERATORS.map(op => op + \"=\"),\n  ...LOGICAL_OPERATORS.map(op => op + \"=\"),\n];\n\nexport const BOOLEAN_UNARY_OPERATORS = [\"delete\", \"!\"];\nexport const NUMBER_UNARY_OPERATORS = [\"+\", \"-\", \"~\"];\nexport const STRING_UNARY_OPERATORS = [\"typeof\"];\nexport const UNARY_OPERATORS = [\n  \"void\",\n  \"throw\",\n  ...BOOLEAN_UNARY_OPERATORS,\n  ...NUMBER_UNARY_OPERATORS,\n  ...STRING_UNARY_OPERATORS,\n];\n\nexport const INHERIT_KEYS = {\n  optional: [\"typeAnnotation\", \"typeParameters\", \"returnType\"],\n  force: [\"start\", \"loc\", \"end\"],\n} as const;\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\n  // eslint-disable-next-line no-restricted-globals\n  exports.NOT_LOCAL_BINDING = Symbol.for(\n    \"should not be considered a local binding\",\n  );\n}\n", "import is from \"../validators/is.ts\";\nimport { validateField, validateChild } from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | object\n) &\n  ((node: t.Node, key: string | { toString(): string }, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  deprecated?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function validateType(...typeNames: NodeTypes[]) {\n  return validate(assertNodeType(...typeNames));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(...typeNames: NodeTypes[]): FieldOptions {\n  return { validate: assertNodeType(...typeNames), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(...typeNames: NodeTypes[]) {\n  return arrayOf(assertNodeType(...typeNames));\n}\n\nexport function validateArrayOfType(...typeNames: NodeTypes[]) {\n  return validate(arrayOfType(...typeNames));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  const childValidator =\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? validateChild\n      : () => {};\n\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    let i = 0;\n    // We lazily concatenate strings here for performance reasons.\n    // Concatenating the strings is expensive because we are actually concatenating a string and a number,\n    // so V8 cannot just create a \"rope string\" but has to allocate memory for the string resulting from the number\n    // This string is very rarely used, only in error paths, so we can skip the concatenation cost in most cases\n    const subKey = {\n      toString() {\n        return `${key}[${i}]`;\n      },\n    };\n\n    for (; i < val.length; i++) {\n      const v = val[i];\n      callback(node, subKey, v);\n      childValidator(node, subKey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (!values.includes(val)) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport const allExpandedTypes: {\n  types: NodeTypes[];\n  set: Set<string>;\n}[] = [];\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  const expandedTypes = new Set<string>();\n\n  allExpandedTypes.push({ types, set: expandedTypes });\n\n  function validate(node: t.Node, key: string, val: any) {\n    const valType = val?.type;\n    if (valType != null) {\n      if (expandedTypes.has(valType)) {\n        validateChild(node, key, val);\n        return;\n      }\n      if (valType === \"Placeholder\") {\n        for (const type of types) {\n          if (is(type, val)) {\n            validateChild(node, key, val);\n            return;\n          }\n        }\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(valType)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const primitiveType = getType(val);\n    for (const type of types) {\n      if (primitiveType === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    if (getType(val) === type) {\n      return;\n    }\n\n    throw new TypeError(\n      `Property ${key} expected type of ${type} but got ${getType(val)}`,\n    );\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  const keys = Object.keys(shape);\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of keys) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = new Set([\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n]);\nconst validFieldKeys = new Set([\n  \"default\",\n  \"optional\",\n  \"deprecated\",\n  \"validate\",\n]);\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          deprecated: field.deprecated,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (!validTypeOpts.has(k)) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && !builder.includes(key)) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (!validFieldKeys.has(k)) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n", "import is from \"../validators/is.ts\";\nimport isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"../index.ts\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants/index.ts\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n  arrayOf,\n  arrayOfType,\n  validateArrayOfType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: arrayOf(\n        assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n      ),\n      default:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? []\n          : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertValueType(\"string\")\n          : Object.assign(\n              (function () {\n                const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n                const pattern = assertOneOf(\"=\");\n\n                return function (node: t.AssignmentExpression, key, val) {\n                  const validator = is(\"Pattern\", node.left)\n                    ? pattern\n                    : identifier;\n                  validator(node, key, val);\n                } as Validator;\n              })(),\n              { oneOf: ASSIGNMENT_OPERATORS },\n            ),\n    },\n    left: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"LVal\", \"OptionalMemberExpression\")\n          : assertNodeType(\n              \"Identifier\",\n              \"MemberExpression\",\n              \"OptionalMemberExpression\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: arrayOfType(\"Directive\"),\n      default: [],\n    },\n    body: validateArrayOfType(\"Statement\"),\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"callee\", \"typeArguments\", \"arguments\"]\n    : [\"callee\", \"typeParameters\", \"typeArguments\", \"arguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: validateArrayOfType(\n      \"Expression\",\n      \"SpreadElement\",\n      \"ArgumentPlaceholder\",\n    ),\n    typeArguments: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterInstantiation\",\n            \"TSTypeParameterInstantiation\",\n          )\n        : assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    ...(process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? {}\n      : {\n          optional: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n          typeParameters: {\n            validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  builder: [\"test\", \"body\"],\n  visitor: [\"body\", \"test\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? Object.assign(() => {}, {\n              each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n            })\n          : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n          : assertNodeType(\n              \"VariableDeclaration\",\n              \"Identifier\",\n              \"MemberExpression\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: validateArrayOfType(\"FunctionParameter\"),\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\n    \"id\",\n    \"typeParameters\",\n    \"params\",\n    \"predicate\",\n    \"returnType\",\n    \"body\",\n  ],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? undefined\n      : (function () {\n          const identifier = assertNodeType(\"Identifier\");\n\n          return function (parent, key, node) {\n            if (!is(\"ExportDefaultDeclaration\", parent)) {\n              identifier(node, \"id\", node.id);\n            }\n          };\n        })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: arrayOfType(\"Decorator\"),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\n    \"Expression\",\n    \"FunctionParameter\",\n    \"PatternLike\",\n    \"LVal\",\n    \"TSEntityName\",\n  ],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"string\"),\n              Object.assign(\n                function (node, key, val) {\n                  if (!isValidIdentifier(val, false)) {\n                    throw new TypeError(\n                      `\"${val}\" is not a valid identifier name`,\n                    );\n                  }\n                } as Validator,\n                { type: \"string\" },\n              ),\n            )\n          : assertValueType(\"string\"),\n    },\n  },\n  validate:\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? function (parent, key, node) {\n          const match = /\\.(\\w+)$/.exec(key.toString());\n          if (!match) return;\n\n          const [, parentKey] = match;\n          const nonComp = { computed: false };\n\n          // We can't check if `parent.property === node`, because nodes are validated\n          // before replacing them in the AST.\n          if (parentKey === \"property\") {\n            if (is(\"MemberExpression\", parent, nonComp)) return;\n            if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n          } else if (parentKey === \"key\") {\n            if (is(\"Property\", parent, nonComp)) return;\n            if (is(\"Method\", parent, nonComp)) return;\n          } else if (parentKey === \"exported\") {\n            if (is(\"ExportSpecifier\", parent)) return;\n          } else if (parentKey === \"imported\") {\n            if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n          } else if (parentKey === \"meta\") {\n            if (is(\"MetaProperty\", parent, { meta: node })) return;\n          }\n\n          if (\n            // Ideally we should call isStrictReservedWord if this node is a descendant\n            // of a block in strict mode. Also, we should pass the inModule option so\n            // we can disable \"await\" in module.\n            (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n            // Even if \"this\" is a keyword, we are using the Identifier\n            // node to represent it.\n            node.name !== \"this\"\n          ) {\n            throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n          }\n        }\n      : undefined,\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: chain(\n        assertValueType(\"number\"),\n        Object.assign(\n          function (node, key, val) {\n            if (1 / val < 0 || !Number.isFinite(val)) {\n              const error = new Error(\n                \"NumericLiterals must be non-negative finite numbers. \" +\n                  `You can use t.valueToNode(${val}) instead.`,\n              );\n              if (process.env.BABEL_8_BREAKING) {\n                // TODO(@nicolo-ribaudo) Fix regenerator to not pass negative\n                // numbers here.\n                if (!IS_STANDALONE) {\n                  if (!new Error().stack.includes(\"regenerator\")) {\n                    throw error;\n                  }\n                }\n              } else {\n                // TODO: Enable this warning once regenerator is fixed.\n                // https://github.com/facebook/regenerator/pull/680\n                // console.warn(error);\n              }\n            }\n          } satisfies Validator,\n          { type: \"number\" },\n        ),\n      ),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"string\"),\n              Object.assign(\n                function (node, key, val) {\n                  const invalid = /[^gimsuy]/.exec(val);\n                  if (invalid) {\n                    throw new TypeError(\n                      `\"${invalid[0]}\" is not a valid RegExp flag`,\n                    );\n                  }\n                } as Validator,\n                { type: \"string\" },\n              ),\n            )\n          : assertValueType(\"string\"),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? [\"optional\"]\n      : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: arrayOfType(\"Directive\"),\n      default: [],\n    },\n    body: validateArrayOfType(\"Statement\"),\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: validateArrayOfType(\n      \"ObjectMethod\",\n      \"ObjectProperty\",\n      \"SpreadElement\",\n    ),\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  visitor: [\n    \"decorators\",\n    \"key\",\n    \"typeParameters\",\n    \"params\",\n    \"returnType\",\n    \"body\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n        ? { default: \"method\" }\n        : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? [\"decorators\"]\n      : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = process.env.BABEL_8_BREAKING\n          ? assertNodeType(\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"PrivateName\",\n            )\n          : assertNodeType(\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: process.env.BABEL_8_BREAKING\n              ? [\n                  \"Expression\",\n                  \"Identifier\",\n                  \"StringLiteral\",\n                  \"NumericLiteral\",\n                  \"BigIntLiteral\",\n                  \"PrivateName\",\n                ]\n              : [\n                  \"Expression\",\n                  \"Identifier\",\n                  \"StringLiteral\",\n                  \"NumericLiteral\",\n                  \"BigIntLiteral\",\n                  \"DecimalLiteral\",\n                  \"PrivateName\",\n                ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"boolean\"),\n              Object.assign(\n                function (node: t.ObjectProperty, key, shorthand) {\n                  if (!shorthand) return;\n\n                  if (node.computed) {\n                    throw new TypeError(\n                      \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n                    );\n                  }\n\n                  if (!is(\"Identifier\", node.key)) {\n                    throw new TypeError(\n                      \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n                    );\n                  }\n                } as Validator,\n                { type: \"boolean\" },\n              ),\n            )\n          : assertValueType(\"boolean\"),\n      default: false,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n  },\n  visitor: [\"decorators\", \"key\", \"value\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? undefined\n      : (function () {\n          const pattern = assertNodeType(\n            \"Identifier\",\n            \"Pattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSNonNullExpression\",\n            \"TSTypeAssertion\",\n          );\n          const expression = assertNodeType(\"Expression\");\n\n          return function (parent, key, node) {\n            const validator = is(\"ObjectPattern\", parent)\n              ? pattern\n              : expression;\n            validator(node, \"value\", node.value);\n          };\n        })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: process.env.BABEL_8_BREAKING\n    ? [\"FunctionParameter\", \"PatternLike\"]\n    : [\"FunctionParameter\", \"PatternLike\", \"LVal\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\n              \"Identifier\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"MemberExpression\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n              // These are not valid in RestElement, but we allow them for backwards compatibility.\n              \"RestElement\",\n              \"AssignmentPattern\",\n            )\n          : assertNodeType(\n              \"Identifier\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"MemberExpression\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ),\n    },\n  },\n  validate:\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? function (parent: t.ArrayPattern | t.ObjectPattern, key) {\n          const match = /(\\w+)\\[(\\d+)\\]/.exec(key.toString());\n          if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n          const [, listKey, index] = match as unknown as [\n            string,\n            keyof typeof parent,\n            string,\n          ];\n          if ((parent[listKey] as t.Node[]).length > +index + 1) {\n            throw new TypeError(\n              `RestElement must be last element of ${listKey}`,\n            );\n          }\n        }\n      : undefined,\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: validateArrayOfType(\"Expression\"),\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: validateArrayOfType(\"SwitchCase\"),\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: process.env.BABEL_8_BREAKING\n    ? [\"Expression\", \"TSEntityName\"]\n    : [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertNodeType(\"BlockStatement\"),\n              Object.assign(\n                function (node: t.TryStatement) {\n                  // This validator isn't put at the top level because we can run it\n                  // even if this node doesn't have a parent.\n\n                  if (!node.handler && !node.finalizer) {\n                    throw new TypeError(\n                      \"TryStatement expects either a handler or finalizer, or both\",\n                    );\n                  }\n                } as Validator,\n                { oneOfNodeTypes: [\"BlockStatement\"] },\n              ),\n            )\n          : assertNodeType(\"BlockStatement\"),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"Expression\")\n          : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n        // https://github.com/tc39/proposal-async-explicit-resource-management\n        \"await using\",\n      ),\n    },\n    declarations: validateArrayOfType(\"VariableDeclarator\"),\n  },\n  validate:\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? (() => {\n          const withoutInit = assertNodeType(\"Identifier\", \"Placeholder\");\n          const constOrLetOrVar = assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"Placeholder\",\n          );\n          const usingOrAwaitUsing = assertNodeType(\n            \"Identifier\",\n            \"VoidPattern\",\n            \"Placeholder\",\n          );\n\n          return function (parent, key, node: t.VariableDeclaration) {\n            const { kind, declarations } = node;\n            const parentIsForX = is(\"ForXStatement\", parent, { left: node });\n            if (parentIsForX) {\n              if (declarations.length !== 1) {\n                throw new TypeError(\n                  `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n                );\n              }\n            }\n            for (const decl of declarations) {\n              if (kind === \"const\" || kind === \"let\" || kind === \"var\") {\n                if (!parentIsForX && !decl.init) {\n                  withoutInit(decl, \"id\", decl.id);\n                } else {\n                  constOrLetOrVar(decl, \"id\", decl.id);\n                }\n              } else {\n                usingOrAwaitUsing(decl, \"id\", decl.id);\n              }\n            }\n          };\n        })()\n      : undefined,\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"LVal\", \"VoidPattern\")\n          : assertNodeType(\n              \"Identifier\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"VoidPattern\",\n            ),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: process.env.BABEL_8_BREAKING\n    ? [\"FunctionParameter\", \"Pattern\", \"PatternLike\"]\n    : [\"FunctionParameter\", \"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"FunctionParameter\", \"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"typeParameters\", \"params\", \"predicate\", \"returnType\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\n      \"ClassMethod\",\n      \"ClassPrivateMethod\",\n      \"ClassProperty\",\n      \"ClassPrivateProperty\",\n      \"ClassAccessorProperty\",\n      \"TSDeclareMethod\",\n      \"TSIndexSignature\",\n      \"StaticBlock\",\n    ),\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"decorators\",\n    \"id\",\n    \"typeParameters\",\n    \"superClass\",\n    process.env.BABEL_8_BREAKING ? \"superTypeArguments\" : \"superTypeParameters\",\n    \"mixins\",\n    \"implements\",\n    \"body\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    [process.env.BABEL_8_BREAKING\n      ? \"superTypeArguments\"\n      : \"superTypeParameters\"]: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: arrayOfType(\n        // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        process.env.BABEL_8_BREAKING\n          ? \"TSClassImplements\"\n          : \"TSExpressionWithTypeArguments\",\n        \"ClassImplements\",\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // The id may be omitted if this is the child of an\n      // ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    [process.env.BABEL_8_BREAKING\n      ? \"superTypeArguments\"\n      : \"superTypeParameters\"]: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: arrayOfType(\n        // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        process.env.BABEL_8_BREAKING\n          ? \"TSClassImplements\"\n          : \"TSExpressionWithTypeArguments\",\n        \"ClassImplements\",\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? undefined\n      : (function () {\n          const identifier = assertNodeType(\"Identifier\");\n          return function (parent, key, node) {\n            if (!is(\"ExportDefaultDeclaration\", parent)) {\n              identifier(node, \"id\", node.id);\n            }\n          };\n        })(),\n});\n\nexport const importAttributes = {\n  attributes: {\n    optional: true,\n    validate: arrayOfType(\"ImportAttribute\"),\n  },\n  assertions: {\n    deprecated: true,\n    optional: true,\n    validate: arrayOfType(\"ImportAttribute\"),\n  },\n};\n\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    ...importAttributes,\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: validateType(\n      \"TSDeclareFunction\",\n      \"FunctionDeclaration\",\n      \"ClassDeclaration\",\n      \"Expression\",\n    ),\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"declaration\", \"specifiers\", \"source\", \"attributes\"]\n    : [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertNodeType(\"Declaration\"),\n              Object.assign(\n                function (node: t.ExportNamedDeclaration, key, val) {\n                  // This validator isn't put at the top level because we can run it\n                  // even if this node doesn't have a parent.\n\n                  if (val && node.specifiers.length) {\n                    throw new TypeError(\n                      \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n                    );\n                  }\n\n                  // This validator isn't put at the top level because we can run it\n                  // even if this node doesn't have a parent.\n\n                  if (val && node.source) {\n                    throw new TypeError(\n                      \"Cannot export a declaration from a source\",\n                    );\n                  }\n                } as Validator,\n                { oneOfNodeTypes: [\"Declaration\"] },\n              ),\n            )\n          : assertNodeType(\"Declaration\"),\n    },\n    ...importAttributes,\n    specifiers: {\n      default: [],\n      validate: arrayOf(\n        (function () {\n          const sourced = assertNodeType(\n            \"ExportSpecifier\",\n            \"ExportDefaultSpecifier\",\n            \"ExportNamespaceSpecifier\",\n          );\n          const sourceless = assertNodeType(\"ExportSpecifier\");\n\n          if (\n            !process.env.BABEL_8_BREAKING &&\n            !process.env.BABEL_TYPES_8_BREAKING\n          )\n            return sourced;\n\n          return Object.assign(\n            function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator,\n            {\n              oneOfNodeTypes: [\n                \"ExportSpecifier\",\n                \"ExportDefaultSpecifier\",\n                \"ExportNamespaceSpecifier\",\n              ],\n            },\n          );\n        })(),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          !process.env.BABEL_TYPES_8_BREAKING\n        ) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return Object.assign(\n          function (node, key, val) {\n            if (is(\"VariableDeclaration\", val)) {\n              declaration(node, key, val);\n            } else {\n              lval(node, key, val);\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\n              \"VariableDeclaration\",\n              \"Identifier\",\n              \"MemberExpression\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ],\n          },\n        );\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"specifiers\", \"source\", \"attributes\"]\n    : [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    ...importAttributes,\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    specifiers: validateArrayOfType(\n      \"ImportSpecifier\",\n      \"ImportDefaultSpecifier\",\n      \"ImportNamespaceSpecifier\",\n    ),\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"imported\", \"local\"],\n  builder: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    source: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertNodeType(\"Identifier\"),\n              Object.assign(\n                function (node: t.MetaProperty, key, val) {\n                  let property;\n                  switch (val.name) {\n                    case \"function\":\n                      property = \"sent\";\n                      break;\n                    case \"new\":\n                      property = \"target\";\n                      break;\n                    case \"import\":\n                      property = \"meta\";\n                      break;\n                  }\n                  if (!is(\"Identifier\", node.property, { name: property })) {\n                    throw new TypeError(\"Unrecognised MetaProperty\");\n                  }\n                } as Validator,\n                { oneOfNodeTypes: [\"Identifier\"] },\n              ),\n            )\n          : assertNodeType(\"Identifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: validateArrayOfType(\"FunctionParameter\", \"TSParameterProperty\"),\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: arrayOfType(\"Decorator\"),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"decorators\",\n    \"key\",\n    \"typeParameters\",\n    \"params\",\n    \"returnType\",\n    \"body\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"decorators\" /* for legacy param decorators */,\n    \"properties\",\n    \"typeAnnotation\",\n  ],\n  builder: [\"properties\"],\n  aliases: [\"FunctionParameter\", \"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: validateArrayOfType(\"RestElement\", \"ObjectProperty\"),\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"tag\", \"typeArguments\", \"quasi\"]\n    : [\"tag\", \"typeParameters\", \"quasi\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    [process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\"]: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: validateArrayOfType(\"TemplateElement\"),\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"boolean\"),\n              Object.assign(\n                function (node: t.YieldExpression, key, val) {\n                  if (val && !node.argument) {\n                    throw new TypeError(\n                      \"Property delegate of YieldExpression cannot be true if there is no argument\",\n                    );\n                  }\n                } as Validator,\n                { type: \"boolean\" },\n              ),\n            )\n          : assertValueType(\"boolean\"),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertValueType(\"bigint\")\n        : assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  // todo: Add OptionalMemberExpression to LVal when optional-chaining-assign reaches stage 4\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertValueType(\"boolean\")\n          : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"callee\", \"typeArguments\", \"arguments\"]\n    : [\"callee\", \"typeParameters\", \"typeArguments\", \"arguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: validateArrayOfType(\n      \"Expression\",\n      \"SpreadElement\",\n      \"ArgumentPlaceholder\",\n    ),\n    optional: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertValueType(\"boolean\")\n          : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterInstantiation\",\n            \"TSTypeParameterInstantiation\",\n          )\n        : assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          typeParameters: {\n            validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"decorators\", \"variance\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"decorators\", \"variance\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    optional: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"decorators\",\n    \"key\",\n    \"typeParameters\",\n    \"params\",\n    \"returnType\",\n    \"body\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n\n// --- ES2025 ---\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n", "import { importAttributes } from \"./core.ts\";\nimport {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  const isDeclareClass = name === \"DeclareClass\";\n\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      ...(isDeclareClass ? [\"mixins\", \"implements\"] : []),\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      ...(isDeclareClass\n        ? {\n            mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n            implements: validateOptional(arrayOfType(\"ClassImplements\")),\n          }\n        : {}),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  builder: [\"id\"],\n  visitor: [\"id\", \"predicate\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\", \"StringLiteral\"),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\", \"attributes\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType(\"ExportSpecifier\", \"ExportNamespaceSpecifier\"),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n    ...importAttributes,\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\", \"attributes\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    ...importAttributes,\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  builder: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  visitor: [\"typeParameters\", \"this\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validateArrayOfType(\"FunctionTypeParam\"),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType(\"Identifier\", \"QualifiedTypeIdentifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\", \"QualifiedTypeIdentifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType(\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\"],\n  builder: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"variance\", \"id\", \"key\", \"value\"],\n  builder: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType(\"Identifier\", \"StringLiteral\"),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"qualification\", \"id\"],\n  builder: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType(\"Identifier\", \"QualifiedTypeIdentifier\"),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType(\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumStringMember\", \"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  builder: [\"id\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n", "import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  validateArrayOfType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: validateArrayOfType(\n      \"JSXText\",\n      \"JSXExpressionContainer\",\n      \"JSXSpreadChild\",\n      \"JSXElement\",\n      \"JSXFragment\",\n    ),\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"name\", \"typeArguments\", \"attributes\"]\n    : [\"name\", \"typeParameters\", \"typeArguments\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: validateArrayOfType(\"JSXAttribute\", \"JSXSpreadAttribute\"),\n    typeArguments: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterInstantiation\",\n            \"TSTypeParameterInstantiation\",\n          )\n        : assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          typeParameters: {\n            validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: validateArrayOfType(\n      \"JSXText\",\n      \"JSXExpressionContainer\",\n      \"JSXSpreadChild\",\n      \"JSXElement\",\n      \"JSXFragment\",\n    ),\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n", "import { ALIAS_KEYS } from \"./utils.ts\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwn(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n", "import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils.ts\";\nimport { PLACEHOLDERS } from \"./placeholders.ts\";\nimport { patternLikeCommon } from \"./core.ts\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n    ...patternLikeCommon(),\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n", "import defineType, {\n  arrayOfType,\n  assertNodeType,\n  assertValueType,\n  validateArrayOfType,\n} from \"./utils.ts\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          object: {\n            validate: Object.assign(() => {}, {\n              oneOfNodeTypes: [\"Expression\"],\n            }),\n          },\n          callee: {\n            validate: Object.assign(() => {}, {\n              oneOfNodeTypes: [\"Expression\"],\n            }),\n          },\n        }\n      : {\n          object: {\n            validate: assertNodeType(\"Expression\"),\n          },\n          callee: {\n            validate: assertNodeType(\"Expression\"),\n          },\n        },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: validateArrayOfType(\"ObjectProperty\", \"SpreadElement\"),\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: arrayOfType(\"Expression\", \"SpreadElement\"),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"DecimalLiteral\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        validate: assertValueType(\"string\"),\n      },\n    },\n    aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n  });\n}\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-discard-binding\ndefineType(\"VoidPattern\", {\n  aliases: [\"Pattern\", \"PatternLike\", \"FunctionParameter\"],\n});\n", "import type * as t from \"../index.ts\";\nimport {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n  type Validator,\n} from \"./utils.ts\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core.ts\";\nimport is from \"../validators/is.ts\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: process.env.BABEL_8_BREAKING ? [] : [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    \"ArrayPattern\",\n    \"Identifier\",\n    \"ObjectPattern\",\n    \"RestElement\",\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    kind: {\n      optional: true,\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeName\",\n    process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\",\n  ],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    [process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\"]:\n      validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType(\"Identifier\", \"TSThisType\"),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"exprName\",\n    process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\",\n  ],\n  fields: {\n    exprName: validateType(\"TSEntityName\", \"TSImportType\"),\n    [process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\"]:\n      validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType(\"TSType\", \"TSNamedTupleMember\"),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  builder: [\"typeAnnotation\", \"operator\"],\n  fields: {\n    operator: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertOneOf(\"keyof\", \"readonly\", \"unique\")\n        : assertValueType(\"string\"),\n      // \"keyof\" is not a good default, but as this field is required better\n      // pick one. We need it for backwards compatibility with older versions\n      // of Babel 7.\n      default: process.env.BABEL_8_BREAKING ? undefined : \"keyof\",\n    },\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"key\", \"constraint\", \"nameType\", \"typeAnnotation\"]\n    : [\"typeParameter\", \"nameType\", \"typeAnnotation\"],\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"key\", \"constraint\", \"nameType\", \"typeAnnotation\"]\n    : [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    ...(process.env.BABEL_8_BREAKING\n      ? {\n          key: validateType(\"Identifier\"),\n          constraint: validateType(\"TSType\"),\n        }\n      : {\n          typeParameter: validateType(\"TSTypeParameter\"),\n        }),\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTemplateLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"quasis\", \"types\"],\n  fields: {\n    quasis: validateArrayOfType(\"TemplateElement\"),\n    types: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n        function (node: t.TSTemplateLiteralType, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of types.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\nif (process.env.BABEL_8_BREAKING) {\n  defineType(\"TSClassImplements\", {\n    aliases: [\"TSType\"],\n    visitor: [\"expression\", \"typeArguments\"],\n    fields: {\n      expression: validateType(\"Expression\"),\n      typeArguments: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    },\n  });\n  defineType(\"TSInterfaceHeritage\", {\n    aliases: [\"TSType\"],\n    visitor: [\"expression\", \"typeArguments\"],\n    fields: {\n      expression: validateType(\"Expression\"),\n      typeArguments: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    },\n  });\n} else {\n  defineType(\"TSExpressionWithTypeArguments\", {\n    aliases: [\"TSType\"],\n    visitor: [\"expression\", \"typeParameters\"],\n    fields: {\n      expression: validateType(\"TSEntityName\"),\n      typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    },\n  });\n}\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(\n      arrayOfType(\n        // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        process.env.BABEL_8_BREAKING\n          ? \"TSClassImplements\"\n          : \"TSExpressionWithTypeArguments\",\n      ),\n    ),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"expression\", \"typeArguments\"]\n    : [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    [process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\"]:\n      validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumBody\", {\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSEnumMember\"),\n  },\n});\n\nif (process.env.BABEL_8_BREAKING) {\n  defineType(\"TSEnumDeclaration\", {\n    // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n    aliases: [\"Statement\", \"Declaration\"],\n    visitor: [\"id\", \"body\"],\n    fields: {\n      declare: validateOptional(bool),\n      const: validateOptional(bool),\n      id: validateType(\"Identifier\"),\n      // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST\n      body: validateType(\"TSEnumBody\"),\n    },\n  });\n} else {\n  defineType(\"TSEnumDeclaration\", {\n    // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n    aliases: [\"Statement\", \"Declaration\"],\n    visitor: [\"id\", \"members\"],\n    fields: {\n      declare: validateOptional(bool),\n      const: validateOptional(bool),\n      id: validateType(\"Identifier\"),\n      members: validateArrayOfType(\"TSEnumMember\"),\n      initializer: validateOptionalType(\"Expression\"),\n      body: validateOptionalType(\"TSEnumBody\"),\n    },\n  });\n}\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType(\"Identifier\", \"StringLiteral\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    kind: {\n      validate: assertOneOf(\"global\", \"module\", \"namespace\"),\n    },\n    declare: validateOptional(bool),\n    ...(!process.env.BABEL_8_BREAKING && { global: validateOptional(bool) }),\n    id: process.env.BABEL_8_BREAKING\n      ? validateType(\"TSEntityName\", \"StringLiteral\")\n      : validateType(\"Identifier\", \"StringLiteral\"),\n    body: process.env.BABEL_8_BREAKING\n      ? validateType(\"TSModuleBlock\")\n      : validateType(\"TSModuleBlock\", \"TSModuleDeclaration\"),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  builder: [\n    \"argument\",\n    \"qualifier\",\n    process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\",\n  ],\n  visitor: [\n    \"argument\",\n    \"options\",\n    \"qualifier\",\n    process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\",\n  ],\n  fields: {\n    argument: process.env.BABEL_8_BREAKING\n      ? validateType(\"TSLiteralType\")\n      : validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    [process.env.BABEL_8_BREAKING ? \"typeArguments\" : \"typeParameters\"]:\n      validateOptionalType(\"TSTypeParameterInstantiation\"),\n    options: {\n      validate: assertNodeType(\"ObjectExpression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    ...(process.env.BABEL_8_BREAKING ? {} : { isExport: validate(bool) }),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType(\"TSEntityName\", \"TSExternalModuleReference\"),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validateArrayOfType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validateArrayOfType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"name\", \"constraint\", \"default\"]\n    : [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    const: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n", "export const DEPRECATED_ALIASES = {\n  ModuleDeclaration: \"ImportOrExportDeclaration\",\n};\n", "import \"./core.ts\";\nimport \"./flow.ts\";\nimport \"./jsx.ts\";\nimport \"./misc.ts\";\nimport \"./experimental.ts\";\nimport \"./typescript.ts\";\nimport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  allExpandedTypes,\n} from \"./utils.ts\";\nimport {\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n} from \"./placeholders.ts\";\nimport { DEPRECATED_ALIASES } from \"./deprecated-aliases.ts\";\n\n(\n  Object.keys(DEPRECATED_ALIASES) as (keyof typeof DEPRECATED_ALIASES)[]\n).forEach(deprecatedAlias => {\n  FLIPPED_ALIAS_KEYS[deprecatedAlias] =\n    FLIPPED_ALIAS_KEYS[DEPRECATED_ALIASES[deprecatedAlias]];\n});\n\nfor (const { types, set } of allExpandedTypes) {\n  for (const type of types) {\n    const aliases = FLIPPED_ALIAS_KEYS[type];\n    if (aliases) {\n      aliases.forEach(set.add, set);\n    } else {\n      set.add(type);\n    }\n  }\n}\n\nconst TYPES: Array<string> = [].concat(\n  Object.keys(VISITOR_KEYS),\n  Object.keys(FLIPPED_ALIAS_KEYS),\n  Object.keys(DEPRECATED_KEYS),\n);\n\nexport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_ALIASES,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n  TYPES,\n};\n\nexport type { FieldOptions } from \"./utils.ts\";\n", "import {\n  NODE_FIELDS,\n  NODE_PARENT_VALIDATIONS,\n  type FieldOptions,\n} from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function validate(\n  node: t.Node | undefined | null,\n  key: string,\n  val: unknown,\n): void {\n  if (!node) return;\n\n  const fields = NODE_FIELDS[node.type];\n  if (!fields) return;\n\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\n\nexport function validateInternal(\n  field: FieldOptions,\n  node: t.Node | undefined | null,\n  key: string,\n  val: unknown,\n  maybeNode?: 1,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n\n  if (maybeNode) {\n    const type = (val as t.Node).type;\n    if (type == null) return;\n    NODE_PARENT_VALIDATIONS[type]?.(node, key, val);\n  }\n}\n\nexport function validateField(\n  node: t.Node | undefined | null,\n  key: string,\n  val: unknown,\n  field: FieldOptions | undefined | null,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n}\n\nexport function validateChild(\n  node: t.Node | undefined | null,\n  key: string | { toString(): string },\n  val?: unknown,\n) {\n  const type = (val as t.Node)?.type;\n  if (type == null) return;\n  NODE_PARENT_VALIDATIONS[type]?.(node, key, val);\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport * as _validate from \"../../validators/validate.ts\";\nimport type * as t from \"../../ast-types/generated/index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\nimport * as utils from \"../../definitions/utils.ts\";\n\nconst { validateInternal: validate } = _validate;\nconst { NODE_FIELDS } = utils;\n\n/** @deprecated */ export function bigIntLiteral(\n  value: string,\n): t.BigIntLiteral;\nexport function bigIntLiteral(value: bigint): t.BigIntLiteral;\nexport function bigIntLiteral(value: bigint | string): t.BigIntLiteral {\n  if (typeof value === \"bigint\") {\n    value = value.toString();\n  }\n  const node: t.BigIntLiteral = {\n    type: \"BigIntLiteral\",\n    value,\n  };\n  const defs = NODE_FIELDS.BigIntLiteral;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  const node: t.ArrayExpression = {\n    type: \"ArrayExpression\",\n    elements,\n  };\n  const defs = NODE_FIELDS.ArrayExpression;\n  validate(defs.elements, node, \"elements\", elements, 1);\n  return node;\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal | t.OptionalMemberExpression,\n  right: t.Expression,\n): t.AssignmentExpression {\n  const node: t.AssignmentExpression = {\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  };\n  const defs = NODE_FIELDS.AssignmentExpression;\n  validate(defs.operator, node, \"operator\", operator);\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  const node: t.BinaryExpression = {\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  };\n  const defs = NODE_FIELDS.BinaryExpression;\n  validate(defs.operator, node, \"operator\", operator);\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  const node: t.InterpreterDirective = {\n    type: \"InterpreterDirective\",\n    value,\n  };\n  const defs = NODE_FIELDS.InterpreterDirective;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  const node: t.Directive = {\n    type: \"Directive\",\n    value,\n  };\n  const defs = NODE_FIELDS.Directive;\n  validate(defs.value, node, \"value\", value, 1);\n  return node;\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  const node: t.DirectiveLiteral = {\n    type: \"DirectiveLiteral\",\n    value,\n  };\n  const defs = NODE_FIELDS.DirectiveLiteral;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  const node: t.BlockStatement = {\n    type: \"BlockStatement\",\n    body,\n    directives,\n  };\n  const defs = NODE_FIELDS.BlockStatement;\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.directives, node, \"directives\", directives, 1);\n  return node;\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  const node: t.BreakStatement = {\n    type: \"BreakStatement\",\n    label,\n  };\n  const defs = NODE_FIELDS.BreakStatement;\n  validate(defs.label, node, \"label\", label, 1);\n  return node;\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<t.Expression | t.SpreadElement | t.ArgumentPlaceholder>,\n): t.CallExpression {\n  const node: t.CallExpression = {\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  };\n  const defs = NODE_FIELDS.CallExpression;\n  validate(defs.callee, node, \"callee\", callee, 1);\n  validate(defs.arguments, node, \"arguments\", _arguments, 1);\n  return node;\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  const node: t.CatchClause = {\n    type: \"CatchClause\",\n    param,\n    body,\n  };\n  const defs = NODE_FIELDS.CatchClause;\n  validate(defs.param, node, \"param\", param, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  const node: t.ConditionalExpression = {\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  };\n  const defs = NODE_FIELDS.ConditionalExpression;\n  validate(defs.test, node, \"test\", test, 1);\n  validate(defs.consequent, node, \"consequent\", consequent, 1);\n  validate(defs.alternate, node, \"alternate\", alternate, 1);\n  return node;\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  const node: t.ContinueStatement = {\n    type: \"ContinueStatement\",\n    label,\n  };\n  const defs = NODE_FIELDS.ContinueStatement;\n  validate(defs.label, node, \"label\", label, 1);\n  return node;\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  const node: t.DoWhileStatement = {\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  };\n  const defs = NODE_FIELDS.DoWhileStatement;\n  validate(defs.test, node, \"test\", test, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  const node: t.ExpressionStatement = {\n    type: \"ExpressionStatement\",\n    expression,\n  };\n  const defs = NODE_FIELDS.ExpressionStatement;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  const node: t.File = {\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  };\n  const defs = NODE_FIELDS.File;\n  validate(defs.program, node, \"program\", program, 1);\n  validate(defs.comments, node, \"comments\", comments, 1);\n  validate(defs.tokens, node, \"tokens\", tokens);\n  return node;\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  const node: t.ForInStatement = {\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  };\n  const defs = NODE_FIELDS.ForInStatement;\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  const node: t.ForStatement = {\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  };\n  const defs = NODE_FIELDS.ForStatement;\n  validate(defs.init, node, \"init\", init, 1);\n  validate(defs.test, node, \"test\", test, 1);\n  validate(defs.update, node, \"update\", update, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.FunctionParameter>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  const node: t.FunctionDeclaration = {\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  };\n  const defs = NODE_FIELDS.FunctionDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.generator, node, \"generator\", generator);\n  validate(defs.async, node, \"async\", async);\n  return node;\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.FunctionParameter>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  const node: t.FunctionExpression = {\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  };\n  const defs = NODE_FIELDS.FunctionExpression;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.generator, node, \"generator\", generator);\n  validate(defs.async, node, \"async\", async);\n  return node;\n}\nexport function identifier(name: string): t.Identifier {\n  const node: t.Identifier = {\n    type: \"Identifier\",\n    name,\n  };\n  const defs = NODE_FIELDS.Identifier;\n  validate(defs.name, node, \"name\", name);\n  return node;\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  const node: t.IfStatement = {\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  };\n  const defs = NODE_FIELDS.IfStatement;\n  validate(defs.test, node, \"test\", test, 1);\n  validate(defs.consequent, node, \"consequent\", consequent, 1);\n  validate(defs.alternate, node, \"alternate\", alternate, 1);\n  return node;\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  const node: t.LabeledStatement = {\n    type: \"LabeledStatement\",\n    label,\n    body,\n  };\n  const defs = NODE_FIELDS.LabeledStatement;\n  validate(defs.label, node, \"label\", label, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  const node: t.StringLiteral = {\n    type: \"StringLiteral\",\n    value,\n  };\n  const defs = NODE_FIELDS.StringLiteral;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  const node: t.NumericLiteral = {\n    type: \"NumericLiteral\",\n    value,\n  };\n  const defs = NODE_FIELDS.NumericLiteral;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  const node: t.BooleanLiteral = {\n    type: \"BooleanLiteral\",\n    value,\n  };\n  const defs = NODE_FIELDS.BooleanLiteral;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  const node: t.RegExpLiteral = {\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  };\n  const defs = NODE_FIELDS.RegExpLiteral;\n  validate(defs.pattern, node, \"pattern\", pattern);\n  validate(defs.flags, node, \"flags\", flags);\n  return node;\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  const node: t.LogicalExpression = {\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  };\n  const defs = NODE_FIELDS.LogicalExpression;\n  validate(defs.operator, node, \"operator\", operator);\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: boolean | null = null,\n): t.MemberExpression {\n  const node: t.MemberExpression = {\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  };\n  const defs = NODE_FIELDS.MemberExpression;\n  validate(defs.object, node, \"object\", object, 1);\n  validate(defs.property, node, \"property\", property, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.optional, node, \"optional\", optional);\n  return node;\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<t.Expression | t.SpreadElement | t.ArgumentPlaceholder>,\n): t.NewExpression {\n  const node: t.NewExpression = {\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  };\n  const defs = NODE_FIELDS.NewExpression;\n  validate(defs.callee, node, \"callee\", callee, 1);\n  validate(defs.arguments, node, \"arguments\", _arguments, 1);\n  return node;\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  const node: t.Program = {\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n  };\n  const defs = NODE_FIELDS.Program;\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.directives, node, \"directives\", directives, 1);\n  validate(defs.sourceType, node, \"sourceType\", sourceType);\n  validate(defs.interpreter, node, \"interpreter\", interpreter, 1);\n  return node;\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  const node: t.ObjectExpression = {\n    type: \"ObjectExpression\",\n    properties,\n  };\n  const defs = NODE_FIELDS.ObjectExpression;\n  validate(defs.properties, node, \"properties\", properties, 1);\n  return node;\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.FunctionParameter>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  const node: t.ObjectMethod = {\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  };\n  const defs = NODE_FIELDS.ObjectMethod;\n  validate(defs.kind, node, \"kind\", kind);\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.generator, node, \"generator\", generator);\n  validate(defs.async, node, \"async\", async);\n  return node;\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  const node: t.ObjectProperty = {\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  };\n  const defs = NODE_FIELDS.ObjectProperty;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.shorthand, node, \"shorthand\", shorthand);\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  return node;\n}\nexport function restElement(\n  argument:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression\n    | t.RestElement\n    | t.AssignmentPattern,\n): t.RestElement {\n  const node: t.RestElement = {\n    type: \"RestElement\",\n    argument,\n  };\n  const defs = NODE_FIELDS.RestElement;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  const node: t.ReturnStatement = {\n    type: \"ReturnStatement\",\n    argument,\n  };\n  const defs = NODE_FIELDS.ReturnStatement;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  const node: t.SequenceExpression = {\n    type: \"SequenceExpression\",\n    expressions,\n  };\n  const defs = NODE_FIELDS.SequenceExpression;\n  validate(defs.expressions, node, \"expressions\", expressions, 1);\n  return node;\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  const node: t.ParenthesizedExpression = {\n    type: \"ParenthesizedExpression\",\n    expression,\n  };\n  const defs = NODE_FIELDS.ParenthesizedExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  const node: t.SwitchCase = {\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  };\n  const defs = NODE_FIELDS.SwitchCase;\n  validate(defs.test, node, \"test\", test, 1);\n  validate(defs.consequent, node, \"consequent\", consequent, 1);\n  return node;\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  const node: t.SwitchStatement = {\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  };\n  const defs = NODE_FIELDS.SwitchStatement;\n  validate(defs.discriminant, node, \"discriminant\", discriminant, 1);\n  validate(defs.cases, node, \"cases\", cases, 1);\n  return node;\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  const node: t.ThrowStatement = {\n    type: \"ThrowStatement\",\n    argument,\n  };\n  const defs = NODE_FIELDS.ThrowStatement;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  const node: t.TryStatement = {\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  };\n  const defs = NODE_FIELDS.TryStatement;\n  validate(defs.block, node, \"block\", block, 1);\n  validate(defs.handler, node, \"handler\", handler, 1);\n  validate(defs.finalizer, node, \"finalizer\", finalizer, 1);\n  return node;\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  const node: t.UnaryExpression = {\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  };\n  const defs = NODE_FIELDS.UnaryExpression;\n  validate(defs.operator, node, \"operator\", operator);\n  validate(defs.argument, node, \"argument\", argument, 1);\n  validate(defs.prefix, node, \"prefix\", prefix);\n  return node;\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  const node: t.UpdateExpression = {\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  };\n  const defs = NODE_FIELDS.UpdateExpression;\n  validate(defs.operator, node, \"operator\", operator);\n  validate(defs.argument, node, \"argument\", argument, 1);\n  validate(defs.prefix, node, \"prefix\", prefix);\n  return node;\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  const node: t.VariableDeclaration = {\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  };\n  const defs = NODE_FIELDS.VariableDeclaration;\n  validate(defs.kind, node, \"kind\", kind);\n  validate(defs.declarations, node, \"declarations\", declarations, 1);\n  return node;\n}\nexport function variableDeclarator(\n  id: t.LVal | t.VoidPattern,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  const node: t.VariableDeclarator = {\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  };\n  const defs = NODE_FIELDS.VariableDeclarator;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.init, node, \"init\", init, 1);\n  return node;\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  const node: t.WhileStatement = {\n    type: \"WhileStatement\",\n    test,\n    body,\n  };\n  const defs = NODE_FIELDS.WhileStatement;\n  validate(defs.test, node, \"test\", test, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  const node: t.WithStatement = {\n    type: \"WithStatement\",\n    object,\n    body,\n  };\n  const defs = NODE_FIELDS.WithStatement;\n  validate(defs.object, node, \"object\", object, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  const node: t.AssignmentPattern = {\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  };\n  const defs = NODE_FIELDS.AssignmentPattern;\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike>,\n): t.ArrayPattern {\n  const node: t.ArrayPattern = {\n    type: \"ArrayPattern\",\n    elements,\n  };\n  const defs = NODE_FIELDS.ArrayPattern;\n  validate(defs.elements, node, \"elements\", elements, 1);\n  return node;\n}\nexport function arrowFunctionExpression(\n  params: Array<t.FunctionParameter>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  const node: t.ArrowFunctionExpression = {\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  };\n  const defs = NODE_FIELDS.ArrowFunctionExpression;\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.async, node, \"async\", async);\n  return node;\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  const node: t.ClassBody = {\n    type: \"ClassBody\",\n    body,\n  };\n  const defs = NODE_FIELDS.ClassBody;\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  const node: t.ClassExpression = {\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  };\n  const defs = NODE_FIELDS.ClassExpression;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.superClass, node, \"superClass\", superClass, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  return node;\n}\nexport function classDeclaration(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  const node: t.ClassDeclaration = {\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  };\n  const defs = NODE_FIELDS.ClassDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.superClass, node, \"superClass\", superClass, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  return node;\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  const node: t.ExportAllDeclaration = {\n    type: \"ExportAllDeclaration\",\n    source,\n  };\n  const defs = NODE_FIELDS.ExportAllDeclaration;\n  validate(defs.source, node, \"source\", source, 1);\n  return node;\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  const node: t.ExportDefaultDeclaration = {\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  };\n  const defs = NODE_FIELDS.ExportDefaultDeclaration;\n  validate(defs.declaration, node, \"declaration\", declaration, 1);\n  return node;\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  const node: t.ExportNamedDeclaration = {\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  };\n  const defs = NODE_FIELDS.ExportNamedDeclaration;\n  validate(defs.declaration, node, \"declaration\", declaration, 1);\n  validate(defs.specifiers, node, \"specifiers\", specifiers, 1);\n  validate(defs.source, node, \"source\", source, 1);\n  return node;\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  const node: t.ExportSpecifier = {\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  };\n  const defs = NODE_FIELDS.ExportSpecifier;\n  validate(defs.local, node, \"local\", local, 1);\n  validate(defs.exported, node, \"exported\", exported, 1);\n  return node;\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  const node: t.ForOfStatement = {\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  };\n  const defs = NODE_FIELDS.ForOfStatement;\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.await, node, \"await\", _await);\n  return node;\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  const node: t.ImportDeclaration = {\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  };\n  const defs = NODE_FIELDS.ImportDeclaration;\n  validate(defs.specifiers, node, \"specifiers\", specifiers, 1);\n  validate(defs.source, node, \"source\", source, 1);\n  return node;\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  const node: t.ImportDefaultSpecifier = {\n    type: \"ImportDefaultSpecifier\",\n    local,\n  };\n  const defs = NODE_FIELDS.ImportDefaultSpecifier;\n  validate(defs.local, node, \"local\", local, 1);\n  return node;\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  const node: t.ImportNamespaceSpecifier = {\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  };\n  const defs = NODE_FIELDS.ImportNamespaceSpecifier;\n  validate(defs.local, node, \"local\", local, 1);\n  return node;\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  const node: t.ImportSpecifier = {\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  };\n  const defs = NODE_FIELDS.ImportSpecifier;\n  validate(defs.local, node, \"local\", local, 1);\n  validate(defs.imported, node, \"imported\", imported, 1);\n  return node;\n}\nexport function importExpression(\n  source: t.Expression,\n  options: t.Expression | null = null,\n): t.ImportExpression {\n  const node: t.ImportExpression = {\n    type: \"ImportExpression\",\n    source,\n    options,\n  };\n  const defs = NODE_FIELDS.ImportExpression;\n  validate(defs.source, node, \"source\", source, 1);\n  validate(defs.options, node, \"options\", options, 1);\n  return node;\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  const node: t.MetaProperty = {\n    type: \"MetaProperty\",\n    meta,\n    property,\n  };\n  const defs = NODE_FIELDS.MetaProperty;\n  validate(defs.meta, node, \"meta\", meta, 1);\n  validate(defs.property, node, \"property\", property, 1);\n  return node;\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<t.FunctionParameter | t.TSParameterProperty>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  const node: t.ClassMethod = {\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  };\n  const defs = NODE_FIELDS.ClassMethod;\n  validate(defs.kind, node, \"kind\", kind);\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.static, node, \"static\", _static);\n  validate(defs.generator, node, \"generator\", generator);\n  validate(defs.async, node, \"async\", async);\n  return node;\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  const node: t.ObjectPattern = {\n    type: \"ObjectPattern\",\n    properties,\n  };\n  const defs = NODE_FIELDS.ObjectPattern;\n  validate(defs.properties, node, \"properties\", properties, 1);\n  return node;\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  const node: t.SpreadElement = {\n    type: \"SpreadElement\",\n    argument,\n  };\n  const defs = NODE_FIELDS.SpreadElement;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  const node: t.TaggedTemplateExpression = {\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  };\n  const defs = NODE_FIELDS.TaggedTemplateExpression;\n  validate(defs.tag, node, \"tag\", tag, 1);\n  validate(defs.quasi, node, \"quasi\", quasi, 1);\n  return node;\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  const node: t.TemplateElement = {\n    type: \"TemplateElement\",\n    value,\n    tail,\n  };\n  const defs = NODE_FIELDS.TemplateElement;\n  validate(defs.value, node, \"value\", value);\n  validate(defs.tail, node, \"tail\", tail);\n  return node;\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  const node: t.TemplateLiteral = {\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  };\n  const defs = NODE_FIELDS.TemplateLiteral;\n  validate(defs.quasis, node, \"quasis\", quasis, 1);\n  validate(defs.expressions, node, \"expressions\", expressions, 1);\n  return node;\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  const node: t.YieldExpression = {\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  };\n  const defs = NODE_FIELDS.YieldExpression;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  validate(defs.delegate, node, \"delegate\", delegate);\n  return node;\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  const node: t.AwaitExpression = {\n    type: \"AwaitExpression\",\n    argument,\n  };\n  const defs = NODE_FIELDS.AwaitExpression;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  const node: t.ExportNamespaceSpecifier = {\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  };\n  const defs = NODE_FIELDS.ExportNamespaceSpecifier;\n  validate(defs.exported, node, \"exported\", exported, 1);\n  return node;\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  const node: t.OptionalMemberExpression = {\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  };\n  const defs = NODE_FIELDS.OptionalMemberExpression;\n  validate(defs.object, node, \"object\", object, 1);\n  validate(defs.property, node, \"property\", property, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.optional, node, \"optional\", optional);\n  return node;\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<t.Expression | t.SpreadElement | t.ArgumentPlaceholder>,\n  optional: boolean,\n): t.OptionalCallExpression {\n  const node: t.OptionalCallExpression = {\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  };\n  const defs = NODE_FIELDS.OptionalCallExpression;\n  validate(defs.callee, node, \"callee\", callee, 1);\n  validate(defs.arguments, node, \"arguments\", _arguments, 1);\n  validate(defs.optional, node, \"optional\", optional);\n  return node;\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  const node: t.ClassProperty = {\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  };\n  const defs = NODE_FIELDS.ClassProperty;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.static, node, \"static\", _static);\n  return node;\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  const node: t.ClassAccessorProperty = {\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  };\n  const defs = NODE_FIELDS.ClassAccessorProperty;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  validate(defs.computed, node, \"computed\", computed);\n  validate(defs.static, node, \"static\", _static);\n  return node;\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  const node: t.ClassPrivateProperty = {\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  };\n  const defs = NODE_FIELDS.ClassPrivateProperty;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  validate(defs.static, node, \"static\", _static);\n  return node;\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<t.FunctionParameter | t.TSParameterProperty>,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  const node: t.ClassPrivateMethod = {\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  };\n  const defs = NODE_FIELDS.ClassPrivateMethod;\n  validate(defs.kind, node, \"kind\", kind);\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.static, node, \"static\", _static);\n  return node;\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  const node: t.PrivateName = {\n    type: \"PrivateName\",\n    id,\n  };\n  const defs = NODE_FIELDS.PrivateName;\n  validate(defs.id, node, \"id\", id, 1);\n  return node;\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  const node: t.StaticBlock = {\n    type: \"StaticBlock\",\n    body,\n  };\n  const defs = NODE_FIELDS.StaticBlock;\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  const node: t.ImportAttribute = {\n    type: \"ImportAttribute\",\n    key,\n    value,\n  };\n  const defs = NODE_FIELDS.ImportAttribute;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  return node;\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  const node: t.ArrayTypeAnnotation = {\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  };\n  const defs = NODE_FIELDS.ArrayTypeAnnotation;\n  validate(defs.elementType, node, \"elementType\", elementType, 1);\n  return node;\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  const node: t.BooleanLiteralTypeAnnotation = {\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  };\n  const defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  const node: t.ClassImplements = {\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.ClassImplements;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  const node: t.DeclareClass = {\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  };\n  const defs = NODE_FIELDS.DeclareClass;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.extends, node, \"extends\", _extends, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  const node: t.DeclareFunction = {\n    type: \"DeclareFunction\",\n    id,\n  };\n  const defs = NODE_FIELDS.DeclareFunction;\n  validate(defs.id, node, \"id\", id, 1);\n  return node;\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  const node: t.DeclareInterface = {\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  };\n  const defs = NODE_FIELDS.DeclareInterface;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.extends, node, \"extends\", _extends, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  const node: t.DeclareModule = {\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  };\n  const defs = NODE_FIELDS.DeclareModule;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.kind, node, \"kind\", kind);\n  return node;\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  const node: t.DeclareModuleExports = {\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.DeclareModuleExports;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  const node: t.DeclareTypeAlias = {\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  };\n  const defs = NODE_FIELDS.DeclareTypeAlias;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  const node: t.DeclareOpaqueType = {\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  };\n  const defs = NODE_FIELDS.DeclareOpaqueType;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.supertype, node, \"supertype\", supertype, 1);\n  return node;\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  const node: t.DeclareVariable = {\n    type: \"DeclareVariable\",\n    id,\n  };\n  const defs = NODE_FIELDS.DeclareVariable;\n  validate(defs.id, node, \"id\", id, 1);\n  return node;\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n  attributes: Array<t.ImportAttribute> | null = null,\n): t.DeclareExportDeclaration {\n  const node: t.DeclareExportDeclaration = {\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n    attributes,\n  };\n  const defs = NODE_FIELDS.DeclareExportDeclaration;\n  validate(defs.declaration, node, \"declaration\", declaration, 1);\n  validate(defs.specifiers, node, \"specifiers\", specifiers, 1);\n  validate(defs.source, node, \"source\", source, 1);\n  validate(defs.attributes, node, \"attributes\", attributes, 1);\n  return node;\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n  attributes: Array<t.ImportAttribute> | null = null,\n): t.DeclareExportAllDeclaration {\n  const node: t.DeclareExportAllDeclaration = {\n    type: \"DeclareExportAllDeclaration\",\n    source,\n    attributes,\n  };\n  const defs = NODE_FIELDS.DeclareExportAllDeclaration;\n  validate(defs.source, node, \"source\", source, 1);\n  validate(defs.attributes, node, \"attributes\", attributes, 1);\n  return node;\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  const node: t.DeclaredPredicate = {\n    type: \"DeclaredPredicate\",\n    value,\n  };\n  const defs = NODE_FIELDS.DeclaredPredicate;\n  validate(defs.value, node, \"value\", value, 1);\n  return node;\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  const node: t.FunctionTypeAnnotation = {\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  };\n  const defs = NODE_FIELDS.FunctionTypeAnnotation;\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.rest, node, \"rest\", rest, 1);\n  validate(defs.returnType, node, \"returnType\", returnType, 1);\n  return node;\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  const node: t.FunctionTypeParam = {\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.FunctionTypeParam;\n  validate(defs.name, node, \"name\", name, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  const node: t.GenericTypeAnnotation = {\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.GenericTypeAnnotation;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  const node: t.InterfaceExtends = {\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.InterfaceExtends;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  const node: t.InterfaceDeclaration = {\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  };\n  const defs = NODE_FIELDS.InterfaceDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.extends, node, \"extends\", _extends, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  const node: t.InterfaceTypeAnnotation = {\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  };\n  const defs = NODE_FIELDS.InterfaceTypeAnnotation;\n  validate(defs.extends, node, \"extends\", _extends, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  const node: t.IntersectionTypeAnnotation = {\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  };\n  const defs = NODE_FIELDS.IntersectionTypeAnnotation;\n  validate(defs.types, node, \"types\", types, 1);\n  return node;\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  const node: t.NullableTypeAnnotation = {\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.NullableTypeAnnotation;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  const node: t.NumberLiteralTypeAnnotation = {\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  };\n  const defs = NODE_FIELDS.NumberLiteralTypeAnnotation;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  const node: t.ObjectTypeAnnotation = {\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  };\n  const defs = NODE_FIELDS.ObjectTypeAnnotation;\n  validate(defs.properties, node, \"properties\", properties, 1);\n  validate(defs.indexers, node, \"indexers\", indexers, 1);\n  validate(defs.callProperties, node, \"callProperties\", callProperties, 1);\n  validate(defs.internalSlots, node, \"internalSlots\", internalSlots, 1);\n  validate(defs.exact, node, \"exact\", exact);\n  return node;\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  const node: t.ObjectTypeInternalSlot = {\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  };\n  const defs = NODE_FIELDS.ObjectTypeInternalSlot;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.optional, node, \"optional\", optional);\n  validate(defs.static, node, \"static\", _static);\n  validate(defs.method, node, \"method\", method);\n  return node;\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  const node: t.ObjectTypeCallProperty = {\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  };\n  const defs = NODE_FIELDS.ObjectTypeCallProperty;\n  validate(defs.value, node, \"value\", value, 1);\n  return node;\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  const node: t.ObjectTypeIndexer = {\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  };\n  const defs = NODE_FIELDS.ObjectTypeIndexer;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.variance, node, \"variance\", variance, 1);\n  return node;\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  const node: t.ObjectTypeProperty = {\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  };\n  const defs = NODE_FIELDS.ObjectTypeProperty;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  validate(defs.variance, node, \"variance\", variance, 1);\n  return node;\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  const node: t.ObjectTypeSpreadProperty = {\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  };\n  const defs = NODE_FIELDS.ObjectTypeSpreadProperty;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  const node: t.OpaqueType = {\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  };\n  const defs = NODE_FIELDS.OpaqueType;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.supertype, node, \"supertype\", supertype, 1);\n  validate(defs.impltype, node, \"impltype\", impltype, 1);\n  return node;\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  const node: t.QualifiedTypeIdentifier = {\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  };\n  const defs = NODE_FIELDS.QualifiedTypeIdentifier;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.qualification, node, \"qualification\", qualification, 1);\n  return node;\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  const node: t.StringLiteralTypeAnnotation = {\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  };\n  const defs = NODE_FIELDS.StringLiteralTypeAnnotation;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  const node: t.TupleTypeAnnotation = {\n    type: \"TupleTypeAnnotation\",\n    types,\n  };\n  const defs = NODE_FIELDS.TupleTypeAnnotation;\n  validate(defs.types, node, \"types\", types, 1);\n  return node;\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  const node: t.TypeofTypeAnnotation = {\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  };\n  const defs = NODE_FIELDS.TypeofTypeAnnotation;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  const node: t.TypeAlias = {\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  };\n  const defs = NODE_FIELDS.TypeAlias;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  const node: t.TypeAnnotation = {\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TypeAnnotation;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  const node: t.TypeCastExpression = {\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TypeCastExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  const node: t.TypeParameter = {\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  };\n  const defs = NODE_FIELDS.TypeParameter;\n  validate(defs.bound, node, \"bound\", bound, 1);\n  validate(defs.default, node, \"default\", _default, 1);\n  validate(defs.variance, node, \"variance\", variance, 1);\n  return node;\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  const node: t.TypeParameterDeclaration = {\n    type: \"TypeParameterDeclaration\",\n    params,\n  };\n  const defs = NODE_FIELDS.TypeParameterDeclaration;\n  validate(defs.params, node, \"params\", params, 1);\n  return node;\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  const node: t.TypeParameterInstantiation = {\n    type: \"TypeParameterInstantiation\",\n    params,\n  };\n  const defs = NODE_FIELDS.TypeParameterInstantiation;\n  validate(defs.params, node, \"params\", params, 1);\n  return node;\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  const node: t.UnionTypeAnnotation = {\n    type: \"UnionTypeAnnotation\",\n    types,\n  };\n  const defs = NODE_FIELDS.UnionTypeAnnotation;\n  validate(defs.types, node, \"types\", types, 1);\n  return node;\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  const node: t.Variance = {\n    type: \"Variance\",\n    kind,\n  };\n  const defs = NODE_FIELDS.Variance;\n  validate(defs.kind, node, \"kind\", kind);\n  return node;\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  const node: t.EnumDeclaration = {\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  };\n  const defs = NODE_FIELDS.EnumDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  const node: t.EnumBooleanBody = {\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  };\n  const defs = NODE_FIELDS.EnumBooleanBody;\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  const node: t.EnumNumberBody = {\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  };\n  const defs = NODE_FIELDS.EnumNumberBody;\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  const node: t.EnumStringBody = {\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  };\n  const defs = NODE_FIELDS.EnumStringBody;\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  const node: t.EnumSymbolBody = {\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  };\n  const defs = NODE_FIELDS.EnumSymbolBody;\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  const node: t.EnumBooleanMember = {\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  };\n  const defs = NODE_FIELDS.EnumBooleanMember;\n  validate(defs.id, node, \"id\", id, 1);\n  return node;\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  const node: t.EnumNumberMember = {\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  };\n  const defs = NODE_FIELDS.EnumNumberMember;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.init, node, \"init\", init, 1);\n  return node;\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  const node: t.EnumStringMember = {\n    type: \"EnumStringMember\",\n    id,\n    init,\n  };\n  const defs = NODE_FIELDS.EnumStringMember;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.init, node, \"init\", init, 1);\n  return node;\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  const node: t.EnumDefaultedMember = {\n    type: \"EnumDefaultedMember\",\n    id,\n  };\n  const defs = NODE_FIELDS.EnumDefaultedMember;\n  validate(defs.id, node, \"id\", id, 1);\n  return node;\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  const node: t.IndexedAccessType = {\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  };\n  const defs = NODE_FIELDS.IndexedAccessType;\n  validate(defs.objectType, node, \"objectType\", objectType, 1);\n  validate(defs.indexType, node, \"indexType\", indexType, 1);\n  return node;\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  const node: t.OptionalIndexedAccessType = {\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  };\n  const defs = NODE_FIELDS.OptionalIndexedAccessType;\n  validate(defs.objectType, node, \"objectType\", objectType, 1);\n  validate(defs.indexType, node, \"indexType\", indexType, 1);\n  return node;\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  const node: t.JSXAttribute = {\n    type: \"JSXAttribute\",\n    name,\n    value,\n  };\n  const defs = NODE_FIELDS.JSXAttribute;\n  validate(defs.name, node, \"name\", name, 1);\n  validate(defs.value, node, \"value\", value, 1);\n  return node;\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  const node: t.JSXClosingElement = {\n    type: \"JSXClosingElement\",\n    name,\n  };\n  const defs = NODE_FIELDS.JSXClosingElement;\n  validate(defs.name, node, \"name\", name, 1);\n  return node;\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  const node: t.JSXElement = {\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  };\n  const defs = NODE_FIELDS.JSXElement;\n  validate(defs.openingElement, node, \"openingElement\", openingElement, 1);\n  validate(defs.closingElement, node, \"closingElement\", closingElement, 1);\n  validate(defs.children, node, \"children\", children, 1);\n  validate(defs.selfClosing, node, \"selfClosing\", selfClosing);\n  return node;\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  const node: t.JSXExpressionContainer = {\n    type: \"JSXExpressionContainer\",\n    expression,\n  };\n  const defs = NODE_FIELDS.JSXExpressionContainer;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  const node: t.JSXSpreadChild = {\n    type: \"JSXSpreadChild\",\n    expression,\n  };\n  const defs = NODE_FIELDS.JSXSpreadChild;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  const node: t.JSXIdentifier = {\n    type: \"JSXIdentifier\",\n    name,\n  };\n  const defs = NODE_FIELDS.JSXIdentifier;\n  validate(defs.name, node, \"name\", name);\n  return node;\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  const node: t.JSXMemberExpression = {\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  };\n  const defs = NODE_FIELDS.JSXMemberExpression;\n  validate(defs.object, node, \"object\", object, 1);\n  validate(defs.property, node, \"property\", property, 1);\n  return node;\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  const node: t.JSXNamespacedName = {\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  };\n  const defs = NODE_FIELDS.JSXNamespacedName;\n  validate(defs.namespace, node, \"namespace\", namespace, 1);\n  validate(defs.name, node, \"name\", name, 1);\n  return node;\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  const node: t.JSXOpeningElement = {\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  };\n  const defs = NODE_FIELDS.JSXOpeningElement;\n  validate(defs.name, node, \"name\", name, 1);\n  validate(defs.attributes, node, \"attributes\", attributes, 1);\n  validate(defs.selfClosing, node, \"selfClosing\", selfClosing);\n  return node;\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  const node: t.JSXSpreadAttribute = {\n    type: \"JSXSpreadAttribute\",\n    argument,\n  };\n  const defs = NODE_FIELDS.JSXSpreadAttribute;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  return node;\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  const node: t.JSXText = {\n    type: \"JSXText\",\n    value,\n  };\n  const defs = NODE_FIELDS.JSXText;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  const node: t.JSXFragment = {\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  };\n  const defs = NODE_FIELDS.JSXFragment;\n  validate(defs.openingFragment, node, \"openingFragment\", openingFragment, 1);\n  validate(defs.closingFragment, node, \"closingFragment\", closingFragment, 1);\n  validate(defs.children, node, \"children\", children, 1);\n  return node;\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  const node: t.Placeholder = {\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  };\n  const defs = NODE_FIELDS.Placeholder;\n  validate(defs.expectedNode, node, \"expectedNode\", expectedNode);\n  validate(defs.name, node, \"name\", name, 1);\n  return node;\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  const node: t.V8IntrinsicIdentifier = {\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  };\n  const defs = NODE_FIELDS.V8IntrinsicIdentifier;\n  validate(defs.name, node, \"name\", name);\n  return node;\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  const node: t.BindExpression = {\n    type: \"BindExpression\",\n    object,\n    callee,\n  };\n  const defs = NODE_FIELDS.BindExpression;\n  validate(defs.object, node, \"object\", object, 1);\n  validate(defs.callee, node, \"callee\", callee, 1);\n  return node;\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  const node: t.Decorator = {\n    type: \"Decorator\",\n    expression,\n  };\n  const defs = NODE_FIELDS.Decorator;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  const node: t.DoExpression = {\n    type: \"DoExpression\",\n    body,\n    async,\n  };\n  const defs = NODE_FIELDS.DoExpression;\n  validate(defs.body, node, \"body\", body, 1);\n  validate(defs.async, node, \"async\", async);\n  return node;\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  const node: t.ExportDefaultSpecifier = {\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  };\n  const defs = NODE_FIELDS.ExportDefaultSpecifier;\n  validate(defs.exported, node, \"exported\", exported, 1);\n  return node;\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  const node: t.RecordExpression = {\n    type: \"RecordExpression\",\n    properties,\n  };\n  const defs = NODE_FIELDS.RecordExpression;\n  validate(defs.properties, node, \"properties\", properties, 1);\n  return node;\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  const node: t.TupleExpression = {\n    type: \"TupleExpression\",\n    elements,\n  };\n  const defs = NODE_FIELDS.TupleExpression;\n  validate(defs.elements, node, \"elements\", elements, 1);\n  return node;\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  const node: t.DecimalLiteral = {\n    type: \"DecimalLiteral\",\n    value,\n  };\n  const defs = NODE_FIELDS.DecimalLiteral;\n  validate(defs.value, node, \"value\", value);\n  return node;\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  const node: t.ModuleExpression = {\n    type: \"ModuleExpression\",\n    body,\n  };\n  const defs = NODE_FIELDS.ModuleExpression;\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  const node: t.PipelineTopicExpression = {\n    type: \"PipelineTopicExpression\",\n    expression,\n  };\n  const defs = NODE_FIELDS.PipelineTopicExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  const node: t.PipelineBareFunction = {\n    type: \"PipelineBareFunction\",\n    callee,\n  };\n  const defs = NODE_FIELDS.PipelineBareFunction;\n  validate(defs.callee, node, \"callee\", callee, 1);\n  return node;\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function voidPattern(): t.VoidPattern {\n  return {\n    type: \"VoidPattern\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  const node: t.TSParameterProperty = {\n    type: \"TSParameterProperty\",\n    parameter,\n  };\n  const defs = NODE_FIELDS.TSParameterProperty;\n  validate(defs.parameter, node, \"parameter\", parameter, 1);\n  return node;\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.FunctionParameter>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  const node: t.TSDeclareFunction = {\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  };\n  const defs = NODE_FIELDS.TSDeclareFunction;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.returnType, node, \"returnType\", returnType, 1);\n  return node;\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.FunctionParameter | t.TSParameterProperty>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  const node: t.TSDeclareMethod = {\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  };\n  const defs = NODE_FIELDS.TSDeclareMethod;\n  validate(defs.decorators, node, \"decorators\", decorators, 1);\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.params, node, \"params\", params, 1);\n  validate(defs.returnType, node, \"returnType\", returnType, 1);\n  return node;\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  const node: t.TSQualifiedName = {\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  };\n  const defs = NODE_FIELDS.TSQualifiedName;\n  validate(defs.left, node, \"left\", left, 1);\n  validate(defs.right, node, \"right\", right, 1);\n  return node;\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  const node: t.TSCallSignatureDeclaration = {\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSCallSignatureDeclaration;\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.parameters, node, \"parameters\", parameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  const node: t.TSConstructSignatureDeclaration = {\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSConstructSignatureDeclaration;\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.parameters, node, \"parameters\", parameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSPropertySignature {\n  const node: t.TSPropertySignature = {\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSPropertySignature;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  const node: t.TSMethodSignature = {\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  };\n  const defs = NODE_FIELDS.TSMethodSignature;\n  validate(defs.key, node, \"key\", key, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.parameters, node, \"parameters\", parameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  const node: t.TSIndexSignature = {\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSIndexSignature;\n  validate(defs.parameters, node, \"parameters\", parameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  const node: t.TSFunctionType = {\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSFunctionType;\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.parameters, node, \"parameters\", parameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  const node: t.TSConstructorType = {\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSConstructorType;\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.parameters, node, \"parameters\", parameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  const node: t.TSTypeReference = {\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.TSTypeReference;\n  validate(defs.typeName, node, \"typeName\", typeName, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  const node: t.TSTypePredicate = {\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  };\n  const defs = NODE_FIELDS.TSTypePredicate;\n  validate(defs.parameterName, node, \"parameterName\", parameterName, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  validate(defs.asserts, node, \"asserts\", asserts);\n  return node;\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  const node: t.TSTypeQuery = {\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.TSTypeQuery;\n  validate(defs.exprName, node, \"exprName\", exprName, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  const node: t.TSTypeLiteral = {\n    type: \"TSTypeLiteral\",\n    members,\n  };\n  const defs = NODE_FIELDS.TSTypeLiteral;\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  const node: t.TSArrayType = {\n    type: \"TSArrayType\",\n    elementType,\n  };\n  const defs = NODE_FIELDS.TSArrayType;\n  validate(defs.elementType, node, \"elementType\", elementType, 1);\n  return node;\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  const node: t.TSTupleType = {\n    type: \"TSTupleType\",\n    elementTypes,\n  };\n  const defs = NODE_FIELDS.TSTupleType;\n  validate(defs.elementTypes, node, \"elementTypes\", elementTypes, 1);\n  return node;\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  const node: t.TSOptionalType = {\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSOptionalType;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  const node: t.TSRestType = {\n    type: \"TSRestType\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSRestType;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  const node: t.TSNamedTupleMember = {\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  };\n  const defs = NODE_FIELDS.TSNamedTupleMember;\n  validate(defs.label, node, \"label\", label, 1);\n  validate(defs.elementType, node, \"elementType\", elementType, 1);\n  validate(defs.optional, node, \"optional\", optional);\n  return node;\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  const node: t.TSUnionType = {\n    type: \"TSUnionType\",\n    types,\n  };\n  const defs = NODE_FIELDS.TSUnionType;\n  validate(defs.types, node, \"types\", types, 1);\n  return node;\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  const node: t.TSIntersectionType = {\n    type: \"TSIntersectionType\",\n    types,\n  };\n  const defs = NODE_FIELDS.TSIntersectionType;\n  validate(defs.types, node, \"types\", types, 1);\n  return node;\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  const node: t.TSConditionalType = {\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  };\n  const defs = NODE_FIELDS.TSConditionalType;\n  validate(defs.checkType, node, \"checkType\", checkType, 1);\n  validate(defs.extendsType, node, \"extendsType\", extendsType, 1);\n  validate(defs.trueType, node, \"trueType\", trueType, 1);\n  validate(defs.falseType, node, \"falseType\", falseType, 1);\n  return node;\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  const node: t.TSInferType = {\n    type: \"TSInferType\",\n    typeParameter,\n  };\n  const defs = NODE_FIELDS.TSInferType;\n  validate(defs.typeParameter, node, \"typeParameter\", typeParameter, 1);\n  return node;\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  const node: t.TSParenthesizedType = {\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSParenthesizedType;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(\n  typeAnnotation: t.TSType,\n  operator: string = \"keyof\",\n): t.TSTypeOperator {\n  const node: t.TSTypeOperator = {\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator,\n  };\n  const defs = NODE_FIELDS.TSTypeOperator;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  validate(defs.operator, node, \"operator\", operator);\n  return node;\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  const node: t.TSIndexedAccessType = {\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  };\n  const defs = NODE_FIELDS.TSIndexedAccessType;\n  validate(defs.objectType, node, \"objectType\", objectType, 1);\n  validate(defs.indexType, node, \"indexType\", indexType, 1);\n  return node;\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  const node: t.TSMappedType = {\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  };\n  const defs = NODE_FIELDS.TSMappedType;\n  validate(defs.typeParameter, node, \"typeParameter\", typeParameter, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  validate(defs.nameType, node, \"nameType\", nameType, 1);\n  return node;\n}\nexport { tsMappedType as tSMappedType };\nexport function tsTemplateLiteralType(\n  quasis: Array<t.TemplateElement>,\n  types: Array<t.TSType>,\n): t.TSTemplateLiteralType {\n  const node: t.TSTemplateLiteralType = {\n    type: \"TSTemplateLiteralType\",\n    quasis,\n    types,\n  };\n  const defs = NODE_FIELDS.TSTemplateLiteralType;\n  validate(defs.quasis, node, \"quasis\", quasis, 1);\n  validate(defs.types, node, \"types\", types, 1);\n  return node;\n}\nexport { tsTemplateLiteralType as tSTemplateLiteralType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  const node: t.TSLiteralType = {\n    type: \"TSLiteralType\",\n    literal,\n  };\n  const defs = NODE_FIELDS.TSLiteralType;\n  validate(defs.literal, node, \"literal\", literal, 1);\n  return node;\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  const node: t.TSExpressionWithTypeArguments = {\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.TSExpressionWithTypeArguments;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  const node: t.TSInterfaceDeclaration = {\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  };\n  const defs = NODE_FIELDS.TSInterfaceDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.extends, node, \"extends\", _extends, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  const node: t.TSInterfaceBody = {\n    type: \"TSInterfaceBody\",\n    body,\n  };\n  const defs = NODE_FIELDS.TSInterfaceBody;\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  const node: t.TSTypeAliasDeclaration = {\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSTypeAliasDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  const node: t.TSInstantiationExpression = {\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.TSInstantiationExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  const node: t.TSAsExpression = {\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSAsExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  const node: t.TSSatisfiesExpression = {\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSSatisfiesExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  const node: t.TSTypeAssertion = {\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  };\n  const defs = NODE_FIELDS.TSTypeAssertion;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumBody(members: Array<t.TSEnumMember>): t.TSEnumBody {\n  const node: t.TSEnumBody = {\n    type: \"TSEnumBody\",\n    members,\n  };\n  const defs = NODE_FIELDS.TSEnumBody;\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport { tsEnumBody as tSEnumBody };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  const node: t.TSEnumDeclaration = {\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  };\n  const defs = NODE_FIELDS.TSEnumDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.members, node, \"members\", members, 1);\n  return node;\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  const node: t.TSEnumMember = {\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  };\n  const defs = NODE_FIELDS.TSEnumMember;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.initializer, node, \"initializer\", initializer, 1);\n  return node;\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  const node: t.TSModuleDeclaration = {\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n    kind: null,\n  };\n  const defs = NODE_FIELDS.TSModuleDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  const node: t.TSModuleBlock = {\n    type: \"TSModuleBlock\",\n    body,\n  };\n  const defs = NODE_FIELDS.TSModuleBlock;\n  validate(defs.body, node, \"body\", body, 1);\n  return node;\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  const node: t.TSImportType = {\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  };\n  const defs = NODE_FIELDS.TSImportType;\n  validate(defs.argument, node, \"argument\", argument, 1);\n  validate(defs.qualifier, node, \"qualifier\", qualifier, 1);\n  validate(defs.typeParameters, node, \"typeParameters\", typeParameters, 1);\n  return node;\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  const node: t.TSImportEqualsDeclaration = {\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  };\n  const defs = NODE_FIELDS.TSImportEqualsDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  validate(defs.moduleReference, node, \"moduleReference\", moduleReference, 1);\n  return node;\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  const node: t.TSExternalModuleReference = {\n    type: \"TSExternalModuleReference\",\n    expression,\n  };\n  const defs = NODE_FIELDS.TSExternalModuleReference;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  const node: t.TSNonNullExpression = {\n    type: \"TSNonNullExpression\",\n    expression,\n  };\n  const defs = NODE_FIELDS.TSNonNullExpression;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  const node: t.TSExportAssignment = {\n    type: \"TSExportAssignment\",\n    expression,\n  };\n  const defs = NODE_FIELDS.TSExportAssignment;\n  validate(defs.expression, node, \"expression\", expression, 1);\n  return node;\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  const node: t.TSNamespaceExportDeclaration = {\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  };\n  const defs = NODE_FIELDS.TSNamespaceExportDeclaration;\n  validate(defs.id, node, \"id\", id, 1);\n  return node;\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  const node: t.TSTypeAnnotation = {\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  };\n  const defs = NODE_FIELDS.TSTypeAnnotation;\n  validate(defs.typeAnnotation, node, \"typeAnnotation\", typeAnnotation, 1);\n  return node;\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  const node: t.TSTypeParameterInstantiation = {\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  };\n  const defs = NODE_FIELDS.TSTypeParameterInstantiation;\n  validate(defs.params, node, \"params\", params, 1);\n  return node;\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  const node: t.TSTypeParameterDeclaration = {\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  };\n  const defs = NODE_FIELDS.TSTypeParameterDeclaration;\n  validate(defs.params, node, \"params\", params, 1);\n  return node;\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  const node: t.TSTypeParameter = {\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  };\n  const defs = NODE_FIELDS.TSTypeParameter;\n  validate(defs.constraint, node, \"constraint\", constraint, 1);\n  validate(defs.default, node, \"default\", _default, 1);\n  validate(defs.name, node, \"name\", name);\n  return node;\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  deprecationWarning(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  deprecationWarning(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(\n  argument:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression\n    | t.RestElement\n    | t.AssignmentPattern,\n) {\n  deprecationWarning(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  deprecationWarning(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\nimport * as b from \"./lowercase.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction alias<const N extends keyof typeof b>(lowercase: N): (typeof b)[N] {\n  if (process.env.BABEL_8_BREAKING) {\n    return function () {\n      deprecationWarning(\n        lowercase.replace(/^(?:ts|jsx|[a-z])/, x => x.toUpperCase()),\n        lowercase,\n        \"Usage of builders starting with an uppercase letter such as \",\n        \"uppercase builders\",\n      );\n      return (b[lowercase] as any)(...arguments);\n    } as any;\n  } else {\n    return b[lowercase];\n  }\n}\n\nexport const ArrayExpression = alias(\"arrayExpression\"),\n  AssignmentExpression = alias(\"assignmentExpression\"),\n  BinaryExpression = alias(\"binaryExpression\"),\n  InterpreterDirective = alias(\"interpreterDirective\"),\n  Directive = alias(\"directive\"),\n  DirectiveLiteral = alias(\"directiveLiteral\"),\n  BlockStatement = alias(\"blockStatement\"),\n  BreakStatement = alias(\"breakStatement\"),\n  CallExpression = alias(\"callExpression\"),\n  CatchClause = alias(\"catchClause\"),\n  ConditionalExpression = alias(\"conditionalExpression\"),\n  ContinueStatement = alias(\"continueStatement\"),\n  DebuggerStatement = alias(\"debuggerStatement\"),\n  DoWhileStatement = alias(\"doWhileStatement\"),\n  EmptyStatement = alias(\"emptyStatement\"),\n  ExpressionStatement = alias(\"expressionStatement\"),\n  File = alias(\"file\"),\n  ForInStatement = alias(\"forInStatement\"),\n  ForStatement = alias(\"forStatement\"),\n  FunctionDeclaration = alias(\"functionDeclaration\"),\n  FunctionExpression = alias(\"functionExpression\"),\n  Identifier = alias(\"identifier\"),\n  IfStatement = alias(\"ifStatement\"),\n  LabeledStatement = alias(\"labeledStatement\"),\n  StringLiteral = alias(\"stringLiteral\"),\n  NumericLiteral = alias(\"numericLiteral\"),\n  NullLiteral = alias(\"nullLiteral\"),\n  BooleanLiteral = alias(\"booleanLiteral\"),\n  RegExpLiteral = alias(\"regExpLiteral\"),\n  LogicalExpression = alias(\"logicalExpression\"),\n  MemberExpression = alias(\"memberExpression\"),\n  NewExpression = alias(\"newExpression\"),\n  Program = alias(\"program\"),\n  ObjectExpression = alias(\"objectExpression\"),\n  ObjectMethod = alias(\"objectMethod\"),\n  ObjectProperty = alias(\"objectProperty\"),\n  RestElement = alias(\"restElement\"),\n  ReturnStatement = alias(\"returnStatement\"),\n  SequenceExpression = alias(\"sequenceExpression\"),\n  ParenthesizedExpression = alias(\"parenthesizedExpression\"),\n  SwitchCase = alias(\"switchCase\"),\n  SwitchStatement = alias(\"switchStatement\"),\n  ThisExpression = alias(\"thisExpression\"),\n  ThrowStatement = alias(\"throwStatement\"),\n  TryStatement = alias(\"tryStatement\"),\n  UnaryExpression = alias(\"unaryExpression\"),\n  UpdateExpression = alias(\"updateExpression\"),\n  VariableDeclaration = alias(\"variableDeclaration\"),\n  VariableDeclarator = alias(\"variableDeclarator\"),\n  WhileStatement = alias(\"whileStatement\"),\n  WithStatement = alias(\"withStatement\"),\n  AssignmentPattern = alias(\"assignmentPattern\"),\n  ArrayPattern = alias(\"arrayPattern\"),\n  ArrowFunctionExpression = alias(\"arrowFunctionExpression\"),\n  ClassBody = alias(\"classBody\"),\n  ClassExpression = alias(\"classExpression\"),\n  ClassDeclaration = alias(\"classDeclaration\"),\n  ExportAllDeclaration = alias(\"exportAllDeclaration\"),\n  ExportDefaultDeclaration = alias(\"exportDefaultDeclaration\"),\n  ExportNamedDeclaration = alias(\"exportNamedDeclaration\"),\n  ExportSpecifier = alias(\"exportSpecifier\"),\n  ForOfStatement = alias(\"forOfStatement\"),\n  ImportDeclaration = alias(\"importDeclaration\"),\n  ImportDefaultSpecifier = alias(\"importDefaultSpecifier\"),\n  ImportNamespaceSpecifier = alias(\"importNamespaceSpecifier\"),\n  ImportSpecifier = alias(\"importSpecifier\"),\n  ImportExpression = alias(\"importExpression\"),\n  MetaProperty = alias(\"metaProperty\"),\n  ClassMethod = alias(\"classMethod\"),\n  ObjectPattern = alias(\"objectPattern\"),\n  SpreadElement = alias(\"spreadElement\"),\n  Super = alias(\"super\"),\n  TaggedTemplateExpression = alias(\"taggedTemplateExpression\"),\n  TemplateElement = alias(\"templateElement\"),\n  TemplateLiteral = alias(\"templateLiteral\"),\n  YieldExpression = alias(\"yieldExpression\"),\n  AwaitExpression = alias(\"awaitExpression\"),\n  Import = alias(\"import\"),\n  BigIntLiteral = alias(\"bigIntLiteral\"),\n  ExportNamespaceSpecifier = alias(\"exportNamespaceSpecifier\"),\n  OptionalMemberExpression = alias(\"optionalMemberExpression\"),\n  OptionalCallExpression = alias(\"optionalCallExpression\"),\n  ClassProperty = alias(\"classProperty\"),\n  ClassAccessorProperty = alias(\"classAccessorProperty\"),\n  ClassPrivateProperty = alias(\"classPrivateProperty\"),\n  ClassPrivateMethod = alias(\"classPrivateMethod\"),\n  PrivateName = alias(\"privateName\"),\n  StaticBlock = alias(\"staticBlock\"),\n  ImportAttribute = alias(\"importAttribute\"),\n  AnyTypeAnnotation = alias(\"anyTypeAnnotation\"),\n  ArrayTypeAnnotation = alias(\"arrayTypeAnnotation\"),\n  BooleanTypeAnnotation = alias(\"booleanTypeAnnotation\"),\n  BooleanLiteralTypeAnnotation = alias(\"booleanLiteralTypeAnnotation\"),\n  NullLiteralTypeAnnotation = alias(\"nullLiteralTypeAnnotation\"),\n  ClassImplements = alias(\"classImplements\"),\n  DeclareClass = alias(\"declareClass\"),\n  DeclareFunction = alias(\"declareFunction\"),\n  DeclareInterface = alias(\"declareInterface\"),\n  DeclareModule = alias(\"declareModule\"),\n  DeclareModuleExports = alias(\"declareModuleExports\"),\n  DeclareTypeAlias = alias(\"declareTypeAlias\"),\n  DeclareOpaqueType = alias(\"declareOpaqueType\"),\n  DeclareVariable = alias(\"declareVariable\"),\n  DeclareExportDeclaration = alias(\"declareExportDeclaration\"),\n  DeclareExportAllDeclaration = alias(\"declareExportAllDeclaration\"),\n  DeclaredPredicate = alias(\"declaredPredicate\"),\n  ExistsTypeAnnotation = alias(\"existsTypeAnnotation\"),\n  FunctionTypeAnnotation = alias(\"functionTypeAnnotation\"),\n  FunctionTypeParam = alias(\"functionTypeParam\"),\n  GenericTypeAnnotation = alias(\"genericTypeAnnotation\"),\n  InferredPredicate = alias(\"inferredPredicate\"),\n  InterfaceExtends = alias(\"interfaceExtends\"),\n  InterfaceDeclaration = alias(\"interfaceDeclaration\"),\n  InterfaceTypeAnnotation = alias(\"interfaceTypeAnnotation\"),\n  IntersectionTypeAnnotation = alias(\"intersectionTypeAnnotation\"),\n  MixedTypeAnnotation = alias(\"mixedTypeAnnotation\"),\n  EmptyTypeAnnotation = alias(\"emptyTypeAnnotation\"),\n  NullableTypeAnnotation = alias(\"nullableTypeAnnotation\"),\n  NumberLiteralTypeAnnotation = alias(\"numberLiteralTypeAnnotation\"),\n  NumberTypeAnnotation = alias(\"numberTypeAnnotation\"),\n  ObjectTypeAnnotation = alias(\"objectTypeAnnotation\"),\n  ObjectTypeInternalSlot = alias(\"objectTypeInternalSlot\"),\n  ObjectTypeCallProperty = alias(\"objectTypeCallProperty\"),\n  ObjectTypeIndexer = alias(\"objectTypeIndexer\"),\n  ObjectTypeProperty = alias(\"objectTypeProperty\"),\n  ObjectTypeSpreadProperty = alias(\"objectTypeSpreadProperty\"),\n  OpaqueType = alias(\"opaqueType\"),\n  QualifiedTypeIdentifier = alias(\"qualifiedTypeIdentifier\"),\n  StringLiteralTypeAnnotation = alias(\"stringLiteralTypeAnnotation\"),\n  StringTypeAnnotation = alias(\"stringTypeAnnotation\"),\n  SymbolTypeAnnotation = alias(\"symbolTypeAnnotation\"),\n  ThisTypeAnnotation = alias(\"thisTypeAnnotation\"),\n  TupleTypeAnnotation = alias(\"tupleTypeAnnotation\"),\n  TypeofTypeAnnotation = alias(\"typeofTypeAnnotation\"),\n  TypeAlias = alias(\"typeAlias\"),\n  TypeAnnotation = alias(\"typeAnnotation\"),\n  TypeCastExpression = alias(\"typeCastExpression\"),\n  TypeParameter = alias(\"typeParameter\"),\n  TypeParameterDeclaration = alias(\"typeParameterDeclaration\"),\n  TypeParameterInstantiation = alias(\"typeParameterInstantiation\"),\n  UnionTypeAnnotation = alias(\"unionTypeAnnotation\"),\n  Variance = alias(\"variance\"),\n  VoidTypeAnnotation = alias(\"voidTypeAnnotation\"),\n  EnumDeclaration = alias(\"enumDeclaration\"),\n  EnumBooleanBody = alias(\"enumBooleanBody\"),\n  EnumNumberBody = alias(\"enumNumberBody\"),\n  EnumStringBody = alias(\"enumStringBody\"),\n  EnumSymbolBody = alias(\"enumSymbolBody\"),\n  EnumBooleanMember = alias(\"enumBooleanMember\"),\n  EnumNumberMember = alias(\"enumNumberMember\"),\n  EnumStringMember = alias(\"enumStringMember\"),\n  EnumDefaultedMember = alias(\"enumDefaultedMember\"),\n  IndexedAccessType = alias(\"indexedAccessType\"),\n  OptionalIndexedAccessType = alias(\"optionalIndexedAccessType\"),\n  JSXAttribute = alias(\"jsxAttribute\"),\n  JSXClosingElement = alias(\"jsxClosingElement\"),\n  JSXElement = alias(\"jsxElement\"),\n  JSXEmptyExpression = alias(\"jsxEmptyExpression\"),\n  JSXExpressionContainer = alias(\"jsxExpressionContainer\"),\n  JSXSpreadChild = alias(\"jsxSpreadChild\"),\n  JSXIdentifier = alias(\"jsxIdentifier\"),\n  JSXMemberExpression = alias(\"jsxMemberExpression\"),\n  JSXNamespacedName = alias(\"jsxNamespacedName\"),\n  JSXOpeningElement = alias(\"jsxOpeningElement\"),\n  JSXSpreadAttribute = alias(\"jsxSpreadAttribute\"),\n  JSXText = alias(\"jsxText\"),\n  JSXFragment = alias(\"jsxFragment\"),\n  JSXOpeningFragment = alias(\"jsxOpeningFragment\"),\n  JSXClosingFragment = alias(\"jsxClosingFragment\"),\n  Noop = alias(\"noop\"),\n  Placeholder = alias(\"placeholder\"),\n  V8IntrinsicIdentifier = alias(\"v8IntrinsicIdentifier\"),\n  ArgumentPlaceholder = alias(\"argumentPlaceholder\"),\n  BindExpression = alias(\"bindExpression\"),\n  Decorator = alias(\"decorator\"),\n  DoExpression = alias(\"doExpression\"),\n  ExportDefaultSpecifier = alias(\"exportDefaultSpecifier\"),\n  RecordExpression = alias(\"recordExpression\"),\n  TupleExpression = alias(\"tupleExpression\"),\n  DecimalLiteral = alias(\"decimalLiteral\"),\n  ModuleExpression = alias(\"moduleExpression\"),\n  TopicReference = alias(\"topicReference\"),\n  PipelineTopicExpression = alias(\"pipelineTopicExpression\"),\n  PipelineBareFunction = alias(\"pipelineBareFunction\"),\n  PipelinePrimaryTopicReference = alias(\"pipelinePrimaryTopicReference\"),\n  VoidPattern = alias(\"voidPattern\"),\n  TSParameterProperty = alias(\"tsParameterProperty\"),\n  TSDeclareFunction = alias(\"tsDeclareFunction\"),\n  TSDeclareMethod = alias(\"tsDeclareMethod\"),\n  TSQualifiedName = alias(\"tsQualifiedName\"),\n  TSCallSignatureDeclaration = alias(\"tsCallSignatureDeclaration\"),\n  TSConstructSignatureDeclaration = alias(\"tsConstructSignatureDeclaration\"),\n  TSPropertySignature = alias(\"tsPropertySignature\"),\n  TSMethodSignature = alias(\"tsMethodSignature\"),\n  TSIndexSignature = alias(\"tsIndexSignature\"),\n  TSAnyKeyword = alias(\"tsAnyKeyword\"),\n  TSBooleanKeyword = alias(\"tsBooleanKeyword\"),\n  TSBigIntKeyword = alias(\"tsBigIntKeyword\"),\n  TSIntrinsicKeyword = alias(\"tsIntrinsicKeyword\"),\n  TSNeverKeyword = alias(\"tsNeverKeyword\"),\n  TSNullKeyword = alias(\"tsNullKeyword\"),\n  TSNumberKeyword = alias(\"tsNumberKeyword\"),\n  TSObjectKeyword = alias(\"tsObjectKeyword\"),\n  TSStringKeyword = alias(\"tsStringKeyword\"),\n  TSSymbolKeyword = alias(\"tsSymbolKeyword\"),\n  TSUndefinedKeyword = alias(\"tsUndefinedKeyword\"),\n  TSUnknownKeyword = alias(\"tsUnknownKeyword\"),\n  TSVoidKeyword = alias(\"tsVoidKeyword\"),\n  TSThisType = alias(\"tsThisType\"),\n  TSFunctionType = alias(\"tsFunctionType\"),\n  TSConstructorType = alias(\"tsConstructorType\"),\n  TSTypeReference = alias(\"tsTypeReference\"),\n  TSTypePredicate = alias(\"tsTypePredicate\"),\n  TSTypeQuery = alias(\"tsTypeQuery\"),\n  TSTypeLiteral = alias(\"tsTypeLiteral\"),\n  TSArrayType = alias(\"tsArrayType\"),\n  TSTupleType = alias(\"tsTupleType\"),\n  TSOptionalType = alias(\"tsOptionalType\"),\n  TSRestType = alias(\"tsRestType\"),\n  TSNamedTupleMember = alias(\"tsNamedTupleMember\"),\n  TSUnionType = alias(\"tsUnionType\"),\n  TSIntersectionType = alias(\"tsIntersectionType\"),\n  TSConditionalType = alias(\"tsConditionalType\"),\n  TSInferType = alias(\"tsInferType\"),\n  TSParenthesizedType = alias(\"tsParenthesizedType\"),\n  TSTypeOperator = alias(\"tsTypeOperator\"),\n  TSIndexedAccessType = alias(\"tsIndexedAccessType\"),\n  TSMappedType = alias(\"tsMappedType\"),\n  TSTemplateLiteralType = alias(\"tsTemplateLiteralType\"),\n  TSLiteralType = alias(\"tsLiteralType\"),\n  TSExpressionWithTypeArguments = alias(\"tsExpressionWithTypeArguments\"),\n  TSInterfaceDeclaration = alias(\"tsInterfaceDeclaration\"),\n  TSInterfaceBody = alias(\"tsInterfaceBody\"),\n  TSTypeAliasDeclaration = alias(\"tsTypeAliasDeclaration\"),\n  TSInstantiationExpression = alias(\"tsInstantiationExpression\"),\n  TSAsExpression = alias(\"tsAsExpression\"),\n  TSSatisfiesExpression = alias(\"tsSatisfiesExpression\"),\n  TSTypeAssertion = alias(\"tsTypeAssertion\"),\n  TSEnumBody = alias(\"tsEnumBody\"),\n  TSEnumDeclaration = alias(\"tsEnumDeclaration\"),\n  TSEnumMember = alias(\"tsEnumMember\"),\n  TSModuleDeclaration = alias(\"tsModuleDeclaration\"),\n  TSModuleBlock = alias(\"tsModuleBlock\"),\n  TSImportType = alias(\"tsImportType\"),\n  TSImportEqualsDeclaration = alias(\"tsImportEqualsDeclaration\"),\n  TSExternalModuleReference = alias(\"tsExternalModuleReference\"),\n  TSNonNullExpression = alias(\"tsNonNullExpression\"),\n  TSExportAssignment = alias(\"tsExportAssignment\"),\n  TSNamespaceExportDeclaration = alias(\"tsNamespaceExportDeclaration\"),\n  TSTypeAnnotation = alias(\"tsTypeAnnotation\"),\n  TSTypeParameterInstantiation = alias(\"tsTypeParameterInstantiation\"),\n  TSTypeParameterDeclaration = alias(\"tsTypeParameterDeclaration\"),\n  TSTypeParameter = alias(\"tsTypeParameter\");\nexport const NumberLiteral = b.numberLiteral,\n  RegexLiteral = b.regexLiteral,\n  RestProperty = b.restProperty,\n  SpreadProperty = b.spreadProperty;\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\nexport * from \"./lowercase.ts\";\nexport * from \"./uppercase.ts\";\n\n// Uppercase builders and AST types conflict with each other, which is\n// not allowed by TypeScript when using `export * from ...`\n// We instead explicity list the AST types here, so that:\n// - From a TypeScript perspective, the AST types win over the uppercase\n//   builders (which is the standard behavior for JS when a named\n//   re-export conflicts with a * re-export.)\n// - At runtime, this `export type` is removed, leaving only the uppercase\n//   builders behind (which are thus visible to JavaScript code).\n// This ensures compatibility with legacy code that uses the uppercase\n// builders, while allowing TypeScript users to use the lowercase builders\n// together with the AST types.\n\n// prettier-ignore\nexport type {\n  ArrayExpression, AssignmentExpression, BinaryExpression, InterpreterDirective, Directive, DirectiveLiteral, BlockStatement, BreakStatement, CallExpression, CatchClause, ConditionalExpression, ContinueStatement, DebuggerStatement, DoWhileStatement, EmptyStatement, ExpressionStatement, File, ForInStatement, ForStatement, FunctionDeclaration, FunctionExpression, Identifier, IfStatement, LabeledStatement, StringLiteral, NumericLiteral, NullLiteral, BooleanLiteral, RegExpLiteral, LogicalExpression, MemberExpression, NewExpression, Program, ObjectExpression, ObjectMethod, ObjectProperty, RestElement, ReturnStatement, SequenceExpression, ParenthesizedExpression, SwitchCase, SwitchStatement, ThisExpression, ThrowStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration, VariableDeclarator, WhileStatement, WithStatement, AssignmentPattern, ArrayPattern, ArrowFunctionExpression, ClassBody, ClassExpression, ClassDeclaration, ExportAllDeclaration, ExportDefaultDeclaration, ExportNamedDeclaration, ExportSpecifier, ForOfStatement, ImportDeclaration, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier, ImportExpression, MetaProperty, ClassMethod, ObjectPattern, SpreadElement, Super, TaggedTemplateExpression, TemplateElement, TemplateLiteral, YieldExpression, AwaitExpression, Import, BigIntLiteral, ExportNamespaceSpecifier, OptionalMemberExpression, OptionalCallExpression, ClassProperty, ClassAccessorProperty, ClassPrivateProperty, ClassPrivateMethod, PrivateName, StaticBlock, ImportAttribute, AnyTypeAnnotation, ArrayTypeAnnotation, BooleanTypeAnnotation, BooleanLiteralTypeAnnotation, NullLiteralTypeAnnotation, ClassImplements, DeclareClass, DeclareFunction, DeclareInterface, DeclareModule, DeclareModuleExports, DeclareTypeAlias, DeclareOpaqueType, DeclareVariable, DeclareExportDeclaration, DeclareExportAllDeclaration, DeclaredPredicate, ExistsTypeAnnotation, FunctionTypeAnnotation, FunctionTypeParam, GenericTypeAnnotation, InferredPredicate, InterfaceExtends, InterfaceDeclaration, InterfaceTypeAnnotation, IntersectionTypeAnnotation, MixedTypeAnnotation, EmptyTypeAnnotation, NullableTypeAnnotation, NumberLiteralTypeAnnotation, NumberTypeAnnotation, ObjectTypeAnnotation, ObjectTypeInternalSlot, ObjectTypeCallProperty, ObjectTypeIndexer, ObjectTypeProperty, ObjectTypeSpreadProperty, OpaqueType, QualifiedTypeIdentifier, StringLiteralTypeAnnotation, StringTypeAnnotation, SymbolTypeAnnotation, ThisTypeAnnotation, TupleTypeAnnotation, TypeofTypeAnnotation, TypeAlias, TypeAnnotation, TypeCastExpression, TypeParameter, TypeParameterDeclaration, TypeParameterInstantiation, UnionTypeAnnotation, Variance, VoidTypeAnnotation, EnumDeclaration, EnumBooleanBody, EnumNumberBody, EnumStringBody, EnumSymbolBody, EnumBooleanMember, EnumNumberMember, EnumStringMember, EnumDefaultedMember, IndexedAccessType, OptionalIndexedAccessType, JSXAttribute, JSXClosingElement, JSXElement, JSXEmptyExpression, JSXExpressionContainer, JSXSpreadChild, JSXIdentifier, JSXMemberExpression, JSXNamespacedName, JSXOpeningElement, JSXSpreadAttribute, JSXText, JSXFragment, JSXOpeningFragment, JSXClosingFragment, Noop, Placeholder, V8IntrinsicIdentifier, ArgumentPlaceholder, BindExpression, Decorator, DoExpression, ExportDefaultSpecifier, RecordExpression, TupleExpression, DecimalLiteral, ModuleExpression, TopicReference, PipelineTopicExpression, PipelineBareFunction, PipelinePrimaryTopicReference, VoidPattern, TSParameterProperty, TSDeclareFunction, TSDeclareMethod, TSQualifiedName, TSCallSignatureDeclaration, TSConstructSignatureDeclaration, TSPropertySignature, TSMethodSignature, TSIndexSignature, TSAnyKeyword, TSBooleanKeyword, TSBigIntKeyword, TSIntrinsicKeyword, TSNeverKeyword, TSNullKeyword, TSNumberKeyword, TSObjectKeyword, TSStringKeyword, TSSymbolKeyword, TSUndefinedKeyword, TSUnknownKeyword, TSVoidKeyword, TSThisType, TSFunctionType, TSConstructorType, TSTypeReference, TSTypePredicate, TSTypeQuery, TSTypeLiteral, TSArrayType, TSTupleType, TSOptionalType, TSRestType, TSNamedTupleMember, TSUnionType, TSIntersectionType, TSConditionalType, TSInferType, TSParenthesizedType, TSTypeOperator, TSIndexedAccessType, TSMappedType, TSTemplateLiteralType, TSLiteralType, TSExpressionWithTypeArguments, TSInterfaceDeclaration, TSInterfaceBody, TSTypeAliasDeclaration, TSInstantiationExpression, TSAsExpression, TSSatisfiesExpression, TSTypeAssertion, TSEnumBody, TSEnumDeclaration, TSEnumMember, TSModuleDeclaration, TSModuleBlock, TSImportType, TSImportEqualsDeclaration, TSExternalModuleReference, TSNonNullExpression, TSExportAssignment, TSNamespaceExportDeclaration, TSTypeAnnotation, TSTypeParameterInstantiation, TSTypeParameterDeclaration, TSTypeParameter,\n  NumberLiteral, RegexLiteral, RestProperty, SpreadProperty\n} from \"../../ast-types/generated/index.ts\";\n\n// This will re-export all the type definitions that do not conflict with\n// uppercase builders, such as aliases.\nexport type * from \"../../ast-types/generated/index.ts\";\n", "import { stringLiteral } from \"../../builders/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\nimport { inherits } from \"../../index.ts\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: t.JSXText,\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (/[^ \\t]/.exec(lines[i])) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^ +/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/ +$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(inherits(stringLiteral(str), child));\n}\n", "import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated/index.ts\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild.ts\";\nimport type * as t from \"../../index.ts\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n", "import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isNode(node: any): node is t.Node {\n  return !!(node && VISITOR_KEYS[node.type]);\n}\n", "import isNode from \"../validators/isNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function assertNode(node?: any): asserts node is t.Node {\n  if (!isNode(node)) {\n    const type = node?.type ?? JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertImportExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportExpression {\n  assert(\"ImportExpression\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertVoidPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidPattern {\n  assert(\"VoidPattern\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSTemplateLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTemplateLiteralType {\n  assert(\"TSTemplateLiteralType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumBody {\n  assert(\"TSEnumBody\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertFunctionParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParameter {\n  assert(\"FunctionParameter\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertImportOrExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportOrExportDeclaration {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nexport function assertModuleDeclaration(node: any, opts: any): void {\n  deprecationWarning(\n    \"assertModuleDeclaration\",\n    \"assertImportOrExportDeclaration\",\n  );\n  assert(\"ModuleDeclaration\", node, opts);\n}\n", "import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n", "import {\n  isAnyTypeAnnotation,\n  isGenericTypeAnnotation,\n  isUnionTypeAnnotation,\n  isFlowBaseAnnotation,\n  isIdentifier,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.GenericTypeAnnotation[\"id\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.FlowType | false | null | undefined>,\n): t.FlowType[] {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.GenericTypeAnnotation>();\n  const bases = new Map<t.FlowBaseAnnotation[\"type\"], t.FlowBaseAnnotation>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.FlowType[]>();\n\n  const types: t.FlowType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.includes(node)) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (isFlowBaseAnnotation(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isUnionTypeAnnotation(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (isGenericTypeAnnotation(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics.has(name)) {\n        let existing: t.Flow = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n", "import { unionTypeAnnotation } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/flow/removeTypeDuplicates.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createFlowUnionType<T extends t.FlowType>(\n  types: [T] | Array<T>,\n): T | t.UnionTypeAnnotation {\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0] as T;\n  } else {\n    return unionTypeAnnotation(flattened);\n  }\n}\n", "import {\n  isIdentifier,\n  isThisExpression,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : isThisExpression(node)\n      ? \"this\"\n      : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.TSType>,\n): Array<t.TSType> {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.includes(node)) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    const typeArgumentsKey = process.env.BABEL_8_BREAKING\n      ? \"typeArguments\"\n      : \"typeParameters\";\n    // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST\n    if (isTSTypeReference(node) && node[typeArgumentsKey]) {\n      // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST\n      const typeArguments = node[typeArgumentsKey];\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST\n        const existingTypeArguments = existing[typeArgumentsKey];\n        if (existingTypeArguments) {\n          existingTypeArguments.params.push(...typeArguments.params);\n          existingTypeArguments.params = removeTypeDuplicates(\n            existingTypeArguments.params,\n          );\n        } else {\n          existing = typeArguments;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n", "import { tsUnionType } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates.ts\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n", "import { numericLiteral, unaryExpression } from \"./generated/index.ts\";\n\nexport function buildUndefinedNode() {\n  return unaryExpression(\"void\", numericLiteral(0), true);\n}\n", "import { NODE_FIELDS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\nimport { isFile, isIdentifier } from \"../validators/generated/index.ts\";\n\nconst { hasOwn } = process.env.BABEL_8_BREAKING\n  ? Object\n  : { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (hasOwn(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (hasOwn(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n\n    if (hasOwn(node, \"decorators\")) {\n      newNode.decorators = deep\n        ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache)\n        : node.decorators;\n    }\n  } else if (!hasOwn(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (hasOwn(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (hasOwn(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (hasOwn(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node`, including only\n * properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function clone<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false);\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function cloneDeep<T extends t.Node>(node: T): T {\n  return cloneNode(node);\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * excluding `_private` and location properties.\n */\nexport default function cloneDeepWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ true, /* withoutLoc */ true);\n}\n", "import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node` excluding `_private` and location properties.\n */\nexport default function cloneWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false, /* withoutLoc */ true);\n}\n", "import type * as t from \"../index.ts\";\n\n/**\n * Add comments of certain type to a node.\n */\nexport default function addComments<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  comments: Array<t.Comment>,\n): T {\n  if (!comments || !node) return node;\n\n  const key = `${type}Comments` as const;\n\n  if (node[key]) {\n    if (type === \"leading\") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n\n  return node;\n}\n", "import addComments from \"./addComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Add comment of certain type to a node.\n */\nexport default function addComment<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n): T {\n  return addComments(node, type, [\n    {\n      type: line ? \"CommentLine\" : \"CommentBlock\",\n      value: content,\n    } as t.Comment,\n  ]);\n}\n", "import type * as t from \"../index.ts\";\n\nexport default function inherit<\n  C extends t.Node | undefined,\n  P extends t.Node | undefined,\n>(key: keyof C & keyof P, child: C, parent: P): void {\n  if (child && parent) {\n    // @ts-expect-error Could further refine key definitions\n    child[key] = Array.from(\n      new Set([].concat(child[key], parent[key]).filter(Boolean)),\n    );\n  }\n}\n", "import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritInnerComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"innerComments\", child, parent);\n}\n", "import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritLeadingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"leadingComments\", child, parent);\n}\n", "import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritTrailingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"trailingComments\", child, parent);\n}\n", "import inheritTrailingComments from \"./inheritTrailingComments.ts\";\nimport inheritLeadingComments from \"./inheritLeadingComments.ts\";\nimport inheritInnerComments from \"./inheritInnerComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all unique comments from `parent` node to `child` node.\n */\nexport default function inheritsComments<T extends t.Node>(\n  child: T,\n  parent: t.Node,\n): T {\n  inheritTrailingComments(child, parent);\n  inheritLeadingComments(child, parent);\n  inheritInnerComments(child, parent);\n\n  return child;\n}\n", "import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Remove comment properties from a node.\n */\nexport default function removeComments<T extends t.Node>(node: T): T {\n  COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n\n  return node;\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport { FLIPPED_ALIAS_KEYS } from \"../../definitions/index.ts\";\n\nexport const STANDARDIZED_TYPES = FLIPPED_ALIAS_KEYS[\"Standardized\"];\nexport const EXPRESSION_TYPES = FLIPPED_ALIAS_KEYS[\"Expression\"];\nexport const BINARY_TYPES = FLIPPED_ALIAS_KEYS[\"Binary\"];\nexport const SCOPABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Scopable\"];\nexport const BLOCKPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"BlockParent\"];\nexport const BLOCK_TYPES = FLIPPED_ALIAS_KEYS[\"Block\"];\nexport const STATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"Statement\"];\nexport const TERMINATORLESS_TYPES = FLIPPED_ALIAS_KEYS[\"Terminatorless\"];\nexport const COMPLETIONSTATEMENT_TYPES =\n  FLIPPED_ALIAS_KEYS[\"CompletionStatement\"];\nexport const CONDITIONAL_TYPES = FLIPPED_ALIAS_KEYS[\"Conditional\"];\nexport const LOOP_TYPES = FLIPPED_ALIAS_KEYS[\"Loop\"];\nexport const WHILE_TYPES = FLIPPED_ALIAS_KEYS[\"While\"];\nexport const EXPRESSIONWRAPPER_TYPES = FLIPPED_ALIAS_KEYS[\"ExpressionWrapper\"];\nexport const FOR_TYPES = FLIPPED_ALIAS_KEYS[\"For\"];\nexport const FORXSTATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"ForXStatement\"];\nexport const FUNCTION_TYPES = FLIPPED_ALIAS_KEYS[\"Function\"];\nexport const FUNCTIONPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParent\"];\nexport const PUREISH_TYPES = FLIPPED_ALIAS_KEYS[\"Pureish\"];\nexport const DECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"Declaration\"];\nexport const FUNCTIONPARAMETER_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParameter\"];\nexport const PATTERNLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"PatternLike\"];\nexport const LVAL_TYPES = FLIPPED_ALIAS_KEYS[\"LVal\"];\nexport const TSENTITYNAME_TYPES = FLIPPED_ALIAS_KEYS[\"TSEntityName\"];\nexport const LITERAL_TYPES = FLIPPED_ALIAS_KEYS[\"Literal\"];\nexport const IMMUTABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Immutable\"];\nexport const USERWHITESPACABLE_TYPES = FLIPPED_ALIAS_KEYS[\"UserWhitespacable\"];\nexport const METHOD_TYPES = FLIPPED_ALIAS_KEYS[\"Method\"];\nexport const OBJECTMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"ObjectMember\"];\nexport const PROPERTY_TYPES = FLIPPED_ALIAS_KEYS[\"Property\"];\nexport const UNARYLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"UnaryLike\"];\nexport const PATTERN_TYPES = FLIPPED_ALIAS_KEYS[\"Pattern\"];\nexport const CLASS_TYPES = FLIPPED_ALIAS_KEYS[\"Class\"];\nexport const IMPORTOREXPORTDECLARATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"ImportOrExportDeclaration\"];\nexport const EXPORTDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ExportDeclaration\"];\nexport const MODULESPECIFIER_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleSpecifier\"];\nexport const ACCESSOR_TYPES = FLIPPED_ALIAS_KEYS[\"Accessor\"];\nexport const PRIVATE_TYPES = FLIPPED_ALIAS_KEYS[\"Private\"];\nexport const FLOW_TYPES = FLIPPED_ALIAS_KEYS[\"Flow\"];\nexport const FLOWTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowType\"];\nexport const FLOWBASEANNOTATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"FlowBaseAnnotation\"];\nexport const FLOWDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"FlowDeclaration\"];\nexport const FLOWPREDICATE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowPredicate\"];\nexport const ENUMBODY_TYPES = FLIPPED_ALIAS_KEYS[\"EnumBody\"];\nexport const ENUMMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"EnumMember\"];\nexport const JSX_TYPES = FLIPPED_ALIAS_KEYS[\"JSX\"];\nexport const MISCELLANEOUS_TYPES = FLIPPED_ALIAS_KEYS[\"Miscellaneous\"];\nexport const TYPESCRIPT_TYPES = FLIPPED_ALIAS_KEYS[\"TypeScript\"];\nexport const TSTYPEELEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"TSTypeElement\"];\nexport const TSTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSType\"];\nexport const TSBASETYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSBaseType\"];\n/**\n * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.\n */\nexport const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;\n", "import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n", "import toBlock from \"./toBlock.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n", "import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n", "import toIdentifier from \"./toIdentifier.ts\";\n\nexport default function toBindingIdentifierName(name: string): string {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n\n  return name;\n}\n", "import { isIdentifier } from \"../validators/generated/index.ts\";\nimport { stringLiteral } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n", "import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n    // abstract modifiers are only allowed on class declarations\n    node.abstract = false;\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n", "import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nconst _skip = Symbol();\nconst _stop = Symbol();\n\n/**\n * A prefix AST traversal implementation meant for simple searching and processing.\n * @param enter The callback can return `traverseFast.skip` to skip the subtree of the current node, or `traverseFast.stop` to stop the traversal.\n * @returns `true` if the traversal was stopped by callback, `false` otherwise.\n */\nexport default function traverseFast<Options = object>(\n  node: t.Node | null | undefined,\n  enter: (\n    node: t.Node,\n    opts?: Options,\n  ) => void | typeof traverseFast.skip | typeof traverseFast.stop,\n  opts?: Options,\n): boolean {\n  if (!node) return false;\n\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n\n  opts = opts || ({} as Options);\n  const ret = enter(node, opts);\n  if (ret !== undefined) {\n    switch (ret) {\n      case _skip:\n        return false;\n      case _stop:\n        return true;\n    }\n  }\n\n  for (const key of keys) {\n    const subNode: t.Node | undefined | null =\n      // @ts-expect-error key must present in node\n      node[key];\n\n    if (!subNode) continue;\n\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        if (traverseFast(node, enter, opts)) return true;\n      }\n    } else {\n      if (traverseFast(subNode, enter, opts)) return true;\n    }\n  }\n  return false;\n}\n\ntraverseFast.skip = _skip;\ntraverseFast.stop = _stop;\n", "import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n", "import traverseFast from \"../traverse/traverseFast.ts\";\nimport removeProperties from \"./removeProperties.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function removePropertiesDeep<T extends t.Node>(\n  tree: T,\n  opts?: { preserveComments: boolean } | null,\n): T {\n  traverseFast(tree, removeProperties, opts);\n\n  return tree;\n}\n", "import {\n  isIdentifier,\n  isStringLiteral,\n} from \"../validators/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n", "import {\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated/index.ts\";\nimport { expressionStatement } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toStatement as {\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false {\n  if (isStatement(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n  } else if (isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n  } else if (isAssignmentExpression(node)) {\n    return expressionStatement(node);\n  }\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n", "import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  bigIntLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: bigint): t.BigIntLiteral;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // bigints\n  if (typeof value === \"bigint\") {\n    if (value < 0) {\n      return unaryExpression(\"-\", bigIntLiteral(-value));\n    } else {\n      return bigIntLiteral(value);\n    }\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = /\\/([a-z]*)$/.exec(value.toString())[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey,\n        computed = false;\n      if (isValidIdentifier(key)) {\n        if (key === \"__proto__\") {\n          computed = true;\n          nodeKey = stringLiteral(key);\n        } else {\n          nodeKey = identifier(key);\n        }\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n          computed,\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n", "import { memberExpression } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Append a node to a member expression.\n */\nexport default function appendToMemberExpression(\n  member: t.MemberExpression,\n  append: t.MemberExpression[\"property\"],\n  computed: boolean = false,\n): t.MemberExpression {\n  member.object = memberExpression(\n    member.object,\n    member.property,\n    member.computed,\n  );\n  member.property = append;\n  member.computed = !!computed;\n\n  return member;\n}\n", "import { INHERIT_KEYS } from \"../constants/index.ts\";\nimport inheritsComments from \"../comments/inheritsComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all contextual properties from `parent` node to `child` node.\n */\nexport default function inherits<T extends t.Node | null | undefined>(\n  child: T,\n  parent: t.Node | null | undefined,\n): T {\n  if (!child || !parent) return child;\n\n  // optionally inherit specific properties if not null\n  for (const key of INHERIT_KEYS.optional) {\n    // @ts-expect-error Fixme: refine parent types\n    if (child[key] == null) {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit \"private\" properties\n  for (const key of Object.keys(parent)) {\n    if (key[0] === \"_\" && key !== \"__clone\") {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit select properties\n  for (const key of INHERIT_KEYS.force) {\n    // @ts-expect-error Fixme: refine parent types\n    child[key] = parent[key];\n  }\n\n  inheritsComments(child, parent);\n\n  return child;\n}\n", "import { memberExpression } from \"../builders/generated/index.ts\";\nimport { isSuper } from \"../index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Prepend a node to a member expression.\n */\nexport default function prependToMemberExpression<\n  T extends Pick<t.MemberExpression, \"object\" | \"property\">,\n>(member: T, prepend: t.MemberExpression[\"object\"]): T {\n  if (isSuper(member.object)) {\n    throw new Error(\n      \"Cannot prepend node to super property access (`super.foo`).\",\n    );\n  }\n  member.object = memberExpression(prepend, member.object);\n\n  return member;\n}\n", "import type * as t from \"../index.ts\";\n\n/**\n * For the given node, generate a map from assignment id names to the identifier node.\n * Unlike getBindingIdentifiers, this function does not handle declarations and imports.\n * @param node the assignment expression or forXstatement\n * @returns an object map\n * @see getBindingIdentifiers\n */\nexport default function getAssignmentIdentifiers(\n  node: t.Node | t.Node[],\n): Record<string, t.Identifier> {\n  // null represents holes in an array pattern\n  const search: (t.Node | null)[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.pop();\n    if (!id) continue;\n\n    switch (id.type) {\n      case \"ArrayPattern\":\n        search.push(...id.elements);\n        break;\n\n      case \"AssignmentExpression\":\n      case \"AssignmentPattern\":\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        search.push(id.left);\n        break;\n\n      case \"ObjectPattern\":\n        search.push(...id.properties);\n        break;\n\n      case \"ObjectProperty\":\n        search.push(id.value);\n        break;\n\n      case \"RestElement\":\n      case \"UpdateExpression\":\n        search.push(id.argument);\n        break;\n\n      case \"UnaryExpression\":\n        if (id.operator === \"delete\") {\n          search.push(id.argument);\n        }\n        break;\n\n      case \"Identifier\":\n        ids[id.name] = id;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return ids;\n}\n", "import {\n  isExportDeclaration,\n  isIdentifier,\n  isClassExpression,\n  isDeclaration,\n  isFunctionDeclaration,\n  isFunctionExpression,\n  isExportAllDeclaration,\n  isAssignmentExpression,\n  isUnaryExpression,\n  isUpdateExpression,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport { getBindingIdentifiers as default };\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates: true,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, Array<t.Identifier>>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: false,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n\n/**\n * Return a list of binding identifiers associated with the input `node`.\n */\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  const search: t.Node[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n\n    if (\n      newBindingsOnly &&\n      // These nodes do not introduce _new_ bindings, but they are included\n      // in getBindingIdentifiers.keys for backwards compatibility.\n      // TODO(@nicolo-ribaudo): Check if we can remove them from .keys in a\n      // backward-compatible way, and if not what we need to do to remove them\n      // in Babel 8.\n      (isAssignmentExpression(id) ||\n        isUnaryExpression(id) ||\n        isUpdateExpression(id))\n    ) {\n      continue;\n    }\n\n    if (isIdentifier(id)) {\n      if (duplicates) {\n        const _ids = (ids[id.name] = ids[id.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n\n    if (isExportDeclaration(id) && !isExportAllDeclaration(id)) {\n      if (isDeclaration(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (isFunctionDeclaration(id)) {\n        search.push(id.id);\n        continue;\n      }\n\n      if (\n        isFunctionExpression(id) ||\n        (process.env.BABEL_8_BREAKING && isClassExpression(id))\n      ) {\n        continue;\n      }\n    }\n\n    const keys = getBindingIdentifiers.keys[id.type];\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes =\n          // @ts-expect-error key must present in id\n          id[key] as t.Node[] | t.Node | undefined | null;\n        if (nodes) {\n          if (Array.isArray(nodes)) {\n            search.push(...nodes);\n          } else {\n            search.push(nodes);\n          }\n        }\n      }\n    }\n  }\n  return ids;\n}\n\n/**\n * Mapping of types to their identifier keys.\n */\ntype KeysMap = {\n  [N in t.Node as N[\"type\"]]?: (keyof N)[];\n};\n\nconst keys: KeysMap = {\n  DeclareClass: [\"id\"],\n  DeclareFunction: [\"id\"],\n  DeclareModule: [\"id\"],\n  DeclareVariable: [\"id\"],\n  DeclareInterface: [\"id\"],\n  DeclareTypeAlias: [\"id\"],\n  DeclareOpaqueType: [\"id\"],\n  InterfaceDeclaration: [\"id\"],\n  TypeAlias: [\"id\"],\n  OpaqueType: [\"id\"],\n\n  CatchClause: [\"param\"],\n  LabeledStatement: [\"label\"],\n  UnaryExpression: [\"argument\"],\n  AssignmentExpression: [\"left\"],\n\n  ImportSpecifier: [\"local\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportDeclaration: [\"specifiers\"],\n  TSImportEqualsDeclaration: [\"id\"],\n\n  ExportSpecifier: [\"exported\"],\n  ExportNamespaceSpecifier: [\"exported\"],\n  ExportDefaultSpecifier: [\"exported\"],\n\n  FunctionDeclaration: [\"id\", \"params\"],\n  FunctionExpression: [\"id\", \"params\"],\n  ArrowFunctionExpression: [\"params\"],\n  ObjectMethod: [\"params\"],\n  ClassMethod: [\"params\"],\n  ClassPrivateMethod: [\"params\"],\n\n  ForInStatement: [\"left\"],\n  ForOfStatement: [\"left\"],\n\n  ClassDeclaration: [\"id\"],\n  ClassExpression: [\"id\"],\n\n  RestElement: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n\n  ObjectProperty: [\"value\"],\n\n  AssignmentPattern: [\"left\"],\n  ArrayPattern: [\"elements\"],\n  ObjectPattern: [\"properties\"],\n\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\"],\n};\n\ngetBindingIdentifiers.keys = keys;\n", "import getBindingIdentifiers from \"./getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default getOuterBindingIdentifiers as {\n  (node: t.Node, duplicates: true): Record<string, Array<t.Identifier>>;\n  (node: t.Node, duplicates?: false): Record<string, t.Identifier>;\n  (\n    node: t.Node,\n    duplicates?: boolean,\n  ): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n};\n\nfunction getOuterBindingIdentifiers(\n  node: t.Node,\n  duplicates: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  return getBindingIdentifiers(node, duplicates, true);\n}\n", "import type * as t from \"../index.ts\";\n\nimport {\n  isAssignmentExpression,\n  isClassMethod,\n  isIdentifier,\n  isLiteral,\n  isNullLiteral,\n  isObjectMethod,\n  isObjectProperty,\n  isPrivateName,\n  isRegExpLiteral,\n  isTemplateLiteral,\n  isVariableDeclarator,\n} from \"../validators/generated/index.ts\";\n\nfunction getNameFromLiteralId(id: t.Literal): string {\n  if (isNullLiteral(id)) {\n    return \"null\";\n  }\n\n  if (isRegExpLiteral(id)) {\n    return `/${id.pattern}/${id.flags}`;\n  }\n\n  if (isTemplateLiteral(id)) {\n    return id.quasis.map(quasi => quasi.value.raw).join(\"\");\n  }\n\n  if (id.value !== undefined) {\n    return String(id.value);\n  }\n\n  return null;\n}\n\nfunction getObjectMemberKey(\n  node: t.ObjectProperty | t.ObjectMethod | t.ClassProperty | t.ClassMethod,\n): t.Expression | t.PrivateName {\n  if (!node.computed || isLiteral(node.key)) {\n    return node.key;\n  }\n}\n\ntype GetFunctionNameResult = {\n  name: string;\n  originalNode: t.Node;\n} | null;\n\nexport default function getFunctionName(\n  node: t.ObjectMethod | t.ClassMethod,\n): GetFunctionNameResult;\nexport default function getFunctionName(\n  node: t.Function | t.Class,\n  parent: t.Node,\n): GetFunctionNameResult;\nexport default function getFunctionName(\n  node: t.Function | t.Class,\n  parent?: t.Node,\n): GetFunctionNameResult {\n  if (\"id\" in node && node.id) {\n    return {\n      name: node.id.name,\n      originalNode: node.id,\n    };\n  }\n\n  let prefix = \"\";\n\n  let id;\n  if (isObjectProperty(parent, { value: node })) {\n    // { foo: () => {} };\n    id = getObjectMemberKey(parent);\n  } else if (isObjectMethod(node) || isClassMethod(node)) {\n    // { foo() {} };\n    id = getObjectMemberKey(node);\n    if (node.kind === \"get\") prefix = \"get \";\n    else if (node.kind === \"set\") prefix = \"set \";\n  } else if (isVariableDeclarator(parent, { init: node })) {\n    // let foo = function () {};\n    id = parent.id;\n  } else if (isAssignmentExpression(parent, { operator: \"=\", right: node })) {\n    // foo = function () {};\n    id = parent.left;\n  }\n\n  if (!id) return null;\n\n  const name = isLiteral(id)\n    ? getNameFromLiteralId(id)\n    : isIdentifier(id)\n      ? id.name\n      : isPrivateName(id)\n        ? id.id.name\n        : null;\n  if (name == null) return null;\n\n  return { name: prefix + name, originalNode: id };\n}\n", "import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n", "import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Check if the input `node` is a binding identifier.\n */\nexport default function isBinding(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  if (\n    grandparent &&\n    node.type === \"Identifier\" &&\n    parent.type === \"ObjectProperty\" &&\n    grandparent.type === \"ObjectExpression\"\n  ) {\n    // We need to special-case this, because getBindingIdentifiers\n    // has an ObjectProperty->value entry for destructuring patterns.\n    return false;\n  }\n\n  const keys = getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val =\n        // @ts-expect-error key must present in parent\n        parent[key];\n      if (Array.isArray(val)) {\n        if (val.includes(node)) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n", "import { isVariableDeclaration } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\n}\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\nexport default function isLet(node: t.Node): boolean {\n  if (process.env.BABEL_8_BREAKING) {\n    return isVariableDeclaration(node) && node.kind !== \"var\";\n  } else {\n    return (\n      isVariableDeclaration(node) &&\n      (node.kind !== \"var\" ||\n        // @ts-expect-error Fixme: document private properties\n        node[BLOCK_SCOPED_SYMBOL])\n    );\n  }\n}\n", "import {\n  isClassDeclaration,\n  isFunctionDeclaration,\n} from \"./generated/index.ts\";\nimport isLet from \"./isLet.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is block scoped.\n */\nexport default function isBlockScoped(node: t.Node): boolean {\n  return isFunctionDeclaration(node) || isClassDeclaration(node) || isLet(node);\n}\n", "import isType from \"./isType.ts\";\nimport { isIdentifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n", "import { NODE_FIELDS, VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if two nodes are equivalent\n */\nexport default function isNodesEquivalent<T extends Partial<t.Node>>(\n  a: T,\n  b: any,\n): b is T {\n  if (\n    typeof a !== \"object\" ||\n    typeof b !== \"object\" ||\n    a == null ||\n    b == null\n  ) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    const val_a =\n      // @ts-expect-error field must present in a\n      a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (typeof val_a === \"object\" && !visitorKeys?.includes(field)) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "import type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\nexport default function isReferenced(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      // parent.value === node\n      return !grandparent || grandparent.type !== \"ObjectPattern\";\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      // @ts-expect-error todo(flow->ts): Property 'source' does not exist on type 'AnyTypeAnnotation'.\n      if (grandparent?.source) {\n        return false;\n      }\n      return parent.local === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: type X = { someProperty: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n\n      return true;\n  }\n\n  return true;\n}\n", "import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n", "import { isIdentifier, isImportDefaultSpecifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\nexport default function isSpecifierDefault(\n  specifier: t.ModuleSpecifier,\n): boolean {\n  return (\n    isImportDefaultSpecifier(specifier) ||\n    // @ts-expect-error todo(flow->ts): stricter type for specifier\n    isIdentifier(specifier.imported || specifier.exported, {\n      name: \"default\",\n    })\n  );\n}\n", "import isValidIdentifier from \"./isValidIdentifier.ts\";\n\nconst RESERVED_WORDS_ES3_ONLY: Set<string> = new Set([\n  \"abstract\",\n  \"boolean\",\n  \"byte\",\n  \"char\",\n  \"double\",\n  \"enum\",\n  \"final\",\n  \"float\",\n  \"goto\",\n  \"implements\",\n  \"int\",\n  \"interface\",\n  \"long\",\n  \"native\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"short\",\n  \"static\",\n  \"synchronized\",\n  \"throws\",\n  \"transient\",\n  \"volatile\",\n]);\n\n/**\n * Check if the input `name` is a valid identifier name according to the ES3 specification.\n *\n * Additional ES3 reserved words are\n */\nexport default function isValidES3Identifier(name: string): boolean {\n  return isValidIdentifier(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n", "import { isVariableDeclaration } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\n}\n\n/**\n * Check if the input `node` is a variable declaration.\n */\nexport default function isVar(node: t.Node): boolean {\n  if (process.env.BABEL_8_BREAKING) {\n    return isVariableDeclaration(node) && node.kind === \"var\";\n  } else {\n    return (\n      isVariableDeclaration(node, { kind: \"var\" }) &&\n      !(\n        // @ts-expect-error document private properties\n        node[BLOCK_SCOPED_SYMBOL]\n      )\n    );\n  }\n}\n", "// TODO(Babel 8) Remove this file\nif (process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH) {\n  throw new Error(\n    \"Internal Babel error: This file should only be loaded in Babel 7\",\n  );\n}\n\nimport getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport {\n  isExpression,\n  isExpressionStatement,\n  isVariableDeclaration,\n  isIfStatement,\n  isBlockStatement,\n  isEmptyStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  sequenceExpression,\n  assignmentExpression,\n  conditionalExpression,\n} from \"../builders/generated/index.ts\";\nimport { buildUndefinedNode } from \"../builders/productions.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type DeclarationInfo = {\n  kind: t.VariableDeclaration[\"kind\"];\n  id: t.Identifier;\n};\n\nexport default function gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  declars: Array<DeclarationInfo>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: cloneNode(bindings[key]),\n          });\n        }\n\n        if (declar.init) {\n          exprs.push(\n            assignmentExpression(\n              \"=\",\n              // var declarator must not be a void pattern\n              declar.id as Exclude<t.VariableDeclarator[\"id\"], t.VoidPattern>,\n              declar.init,\n            ),\n          );\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], declars)\n        : buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], declars)\n        : buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n", "// TODO(Babel 8) Remove this file\nif (process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH) {\n  throw new Error(\n    \"Internal Babel error: This file should only be loaded in Babel 7\",\n  );\n}\n\nimport gatherSequenceExpressions from \"./gatherSequenceExpressions.ts\";\nimport type * as t from \"../index.ts\";\nimport type { DeclarationInfo } from \"./gatherSequenceExpressions.ts\";\n\n/**\n * Turn an array of statement `nodes` into a `SequenceExpression`.\n *\n * Variable declarations are turned into simple assignments and their\n * declarations hoisted to the top of the current scope.\n *\n * Expression statements are just resolved to their expression.\n */\nexport default function toSequenceExpression(\n  nodes: ReadonlyArray<t.Node>,\n  scope: any,\n): t.SequenceExpression | undefined {\n  if (!nodes?.length) return;\n\n  const declars: DeclarationInfo[] = [];\n  const result = gatherSequenceExpressions(nodes, declars);\n  if (!result) return;\n\n  for (const declar of declars) {\n    scope.push(declar);\n  }\n\n  // @ts-expect-error fixme: gatherSequenceExpressions will return an Expression when there are only one element\n  return result;\n}\n", "import isReactComponent from \"./validators/react/isReactComponent.ts\";\nimport isCompatTag from \"./validators/react/isCompatTag.ts\";\nimport buildChildren from \"./builders/react/buildChildren.ts\";\n\n// asserts\nexport { default as assertNode } from \"./asserts/assertNode.ts\";\nexport * from \"./asserts/generated/index.ts\";\n\n// builders\nexport { default as createTypeAnnotationBasedOnTypeof } from \"./builders/flow/createTypeAnnotationBasedOnTypeof.ts\";\n/** @deprecated use createFlowUnionType instead */\nexport { default as createUnionTypeAnnotation } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createFlowUnionType } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createTSUnionType } from \"./builders/typescript/createTSUnionType.ts\";\nexport * from \"./builders/productions.ts\";\nexport * from \"./builders/generated/index.ts\"; // includes AST types\n\n// clone\nexport { default as cloneNode } from \"./clone/cloneNode.ts\";\nexport { default as clone } from \"./clone/clone.ts\";\nexport { default as cloneDeep } from \"./clone/cloneDeep.ts\";\nexport { default as cloneDeepWithoutLoc } from \"./clone/cloneDeepWithoutLoc.ts\";\nexport { default as cloneWithoutLoc } from \"./clone/cloneWithoutLoc.ts\";\n\n// comments\nexport { default as addComment } from \"./comments/addComment.ts\";\nexport { default as addComments } from \"./comments/addComments.ts\";\nexport { default as inheritInnerComments } from \"./comments/inheritInnerComments.ts\";\nexport { default as inheritLeadingComments } from \"./comments/inheritLeadingComments.ts\";\nexport { default as inheritsComments } from \"./comments/inheritsComments.ts\";\nexport { default as inheritTrailingComments } from \"./comments/inheritTrailingComments.ts\";\nexport { default as removeComments } from \"./comments/removeComments.ts\";\n\n// constants\nexport * from \"./constants/generated/index.ts\";\nexport * from \"./constants/index.ts\";\n\n// converters\nexport { default as ensureBlock } from \"./converters/ensureBlock.ts\";\nexport { default as toBindingIdentifierName } from \"./converters/toBindingIdentifierName.ts\";\nexport { default as toBlock } from \"./converters/toBlock.ts\";\nexport { default as toComputedKey } from \"./converters/toComputedKey.ts\";\nexport { default as toExpression } from \"./converters/toExpression.ts\";\nexport { default as toIdentifier } from \"./converters/toIdentifier.ts\";\nexport { default as toKeyAlias } from \"./converters/toKeyAlias.ts\";\nexport { default as toStatement } from \"./converters/toStatement.ts\";\nexport { default as valueToNode } from \"./converters/valueToNode.ts\";\n\n// definitions\nexport * from \"./definitions/index.ts\";\n\n// modifications\nexport { default as appendToMemberExpression } from \"./modifications/appendToMemberExpression.ts\";\nexport { default as inherits } from \"./modifications/inherits.ts\";\nexport { default as prependToMemberExpression } from \"./modifications/prependToMemberExpression.ts\";\nexport {\n  default as removeProperties,\n  type Options as RemovePropertiesOptions,\n} from \"./modifications/removeProperties.ts\";\nexport { default as removePropertiesDeep } from \"./modifications/removePropertiesDeep.ts\";\nexport { default as removeTypeDuplicates } from \"./modifications/flow/removeTypeDuplicates.ts\";\n\n// retrievers\nexport { default as getAssignmentIdentifiers } from \"./retrievers/getAssignmentIdentifiers.ts\";\nexport { default as getBindingIdentifiers } from \"./retrievers/getBindingIdentifiers.ts\";\nexport { default as getOuterBindingIdentifiers } from \"./retrievers/getOuterBindingIdentifiers.ts\";\nexport { default as getFunctionName } from \"./retrievers/getFunctionName.ts\";\n\n// traverse\nexport { default as traverse } from \"./traverse/traverse.ts\";\nexport * from \"./traverse/traverse.ts\";\nexport { default as traverseFast } from \"./traverse/traverseFast.ts\";\n\n// utils\nexport { default as shallowEqual } from \"./utils/shallowEqual.ts\";\n\n// validators\nexport { default as is } from \"./validators/is.ts\";\nexport { default as isBinding } from \"./validators/isBinding.ts\";\nexport { default as isBlockScoped } from \"./validators/isBlockScoped.ts\";\nexport { default as isImmutable } from \"./validators/isImmutable.ts\";\nexport { default as isLet } from \"./validators/isLet.ts\";\nexport { default as isNode } from \"./validators/isNode.ts\";\nexport { default as isNodesEquivalent } from \"./validators/isNodesEquivalent.ts\";\nexport { default as isPlaceholderType } from \"./validators/isPlaceholderType.ts\";\nexport { default as isReferenced } from \"./validators/isReferenced.ts\";\nexport { default as isScope } from \"./validators/isScope.ts\";\nexport { default as isSpecifierDefault } from \"./validators/isSpecifierDefault.ts\";\nexport { default as isType } from \"./validators/isType.ts\";\nexport { default as isValidES3Identifier } from \"./validators/isValidES3Identifier.ts\";\nexport { default as isValidIdentifier } from \"./validators/isValidIdentifier.ts\";\nexport { default as isVar } from \"./validators/isVar.ts\";\nexport { default as matchesPattern } from \"./validators/matchesPattern.ts\";\nexport { default as validate } from \"./validators/validate.ts\";\nexport { default as buildMatchMemberExpression } from \"./validators/buildMatchMemberExpression.ts\";\nexport * from \"./validators/generated/index.ts\";\n\n// react\nexport const react = {\n  isReactComponent,\n  isCompatTag,\n  buildChildren,\n};\n\n// this is used by @babel/traverse to warn about deprecated visitors\nexport { default as __internal__deprecationWarning } from \"./utils/deprecationWarning.ts\";\n\nimport toSequenceExpression from \"./converters/toSequenceExpression.ts\" with { if: \"!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE\" };\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.toSequenceExpression = toSequenceExpression;\n}\n\nif (!process.env.BABEL_8_BREAKING && process.env.BABEL_TYPES_8_BREAKING) {\n  console.warn(\n    \"BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!\",\n  );\n}\n", "import { assertExpressionStatement } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport type Formatter<T> = {\n  code: (source: string) => string;\n  validate: (ast: t.File) => void;\n  unwrap: (ast: t.File) => T;\n};\n\nfunction makeStatementFormatter<T>(\n  fn: (statements: Array<t.Statement>) => T,\n): Formatter<T> {\n  return {\n    // We need to prepend a \";\" to force statement parsing so that\n    // ExpressionStatement strings won't be parsed as directives.\n    // Alongside that, we also prepend a comment so that when a syntax error\n    // is encountered, the user will be less likely to get confused about\n    // where the random semicolon came from.\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: (ast: t.File): T => {\n      return fn(ast.program.body.slice(1));\n    },\n  };\n}\n\nexport const smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\n\nexport const statements = makeStatementFormatter(body => body);\n\nexport const statement = makeStatementFormatter(body => {\n  // We do this validation when unwrapping since the replacement process\n  // could have added or removed statements.\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\n\nexport const expression: Formatter<t.Expression> = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({ program }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  },\n};\n\nexport const program: Formatter<t.Program> = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program,\n};\n", "import type { ParserOptions as ParserOpts } from \"@babel/parser\";\n\nexport type { ParserOpts };\n\n/**\n * These are the options that 'babel-template' actually accepts and typechecks\n * when called. All other options are passed through to the parser.\n */\nexport type PublicOpts = {\n  /**\n   * A set of placeholder names to automatically accept, ignoring the given\n   * pattern entirely.\n   *\n   * This option can be used when using %%foo%% style placeholders.\n   */\n  placeholderWhitelist?: Set<string>;\n  /**\n   * A pattern to search for when looking for Identifier and StringLiteral\n   * nodes that can be replaced.\n   *\n   * 'false' will disable placeholder searching entirely, leaving only the\n   * 'placeholderWhitelist' value to find replacements.\n   *\n   * Defaults to /^[_$A-Z0-9]+$/.\n   *\n   * This option can be used when using %%foo%% style placeholders.\n   */\n  placeholderPattern?: RegExp | false;\n  /**\n   * 'true' to pass through comments from the template into the resulting AST,\n   * or 'false' to automatically discard comments. Defaults to 'false'.\n   */\n  preserveComments?: boolean;\n  /**\n   * 'true' to use %%foo%% style placeholders, 'false' to use legacy placeholders\n   * described by placeholderPattern or placeholderWhitelist.\n   * When it is not set, it behaves as 'true' if there are syntactic placeholders,\n   * otherwise as 'false'.\n   */\n  syntacticPlaceholders?: boolean | null;\n} & ParserOpts;\n\nexport type TemplateOpts = {\n  parser: ParserOpts;\n  placeholderWhitelist?: Set<string>;\n  placeholderPattern?: RegExp | false;\n  preserveComments?: boolean;\n  syntacticPlaceholders?: boolean;\n};\n\nexport function merge(a: TemplateOpts, b: TemplateOpts): TemplateOpts {\n  const {\n    placeholderWhitelist = a.placeholderWhitelist,\n    placeholderPattern = a.placeholderPattern,\n    preserveComments = a.preserveComments,\n    syntacticPlaceholders = a.syntacticPlaceholders,\n  } = b;\n\n  return {\n    parser: {\n      ...a.parser,\n      ...b.parser,\n    },\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n  };\n}\n\nexport function validate(opts: unknown): TemplateOpts {\n  if (opts != null && typeof opts !== \"object\") {\n    throw new Error(\"Unknown template options.\");\n  }\n\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n    ...parser\n  } = opts || ({} as any);\n\n  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {\n    throw new Error(\n      \"'.placeholderWhitelist' must be a Set, null, or undefined\",\n    );\n  }\n\n  if (\n    placeholderPattern != null &&\n    !(placeholderPattern instanceof RegExp) &&\n    placeholderPattern !== false\n  ) {\n    throw new Error(\n      \"'.placeholderPattern' must be a RegExp, false, null, or undefined\",\n    );\n  }\n\n  if (preserveComments != null && typeof preserveComments !== \"boolean\") {\n    throw new Error(\n      \"'.preserveComments' must be a boolean, null, or undefined\",\n    );\n  }\n\n  if (\n    syntacticPlaceholders != null &&\n    typeof syntacticPlaceholders !== \"boolean\"\n  ) {\n    throw new Error(\n      \"'.syntacticPlaceholders' must be a boolean, null, or undefined\",\n    );\n  }\n  if (\n    syntacticPlaceholders === true &&\n    (placeholderWhitelist != null || placeholderPattern != null)\n  ) {\n    throw new Error(\n      \"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" +\n        \" with '.syntacticPlaceholders: true'\",\n    );\n  }\n\n  return {\n    parser,\n    placeholderWhitelist: placeholderWhitelist || undefined,\n    placeholderPattern:\n      placeholderPattern == null ? undefined : placeholderPattern,\n    preserveComments: preserveComments == null ? undefined : preserveComments,\n    syntacticPlaceholders:\n      syntacticPlaceholders == null ? undefined : syntacticPlaceholders,\n  };\n}\n\nexport type PublicReplacements = { [x: string]: unknown } | Array<unknown>;\nexport type TemplateReplacements = { [x: string]: unknown } | void;\n\nexport function normalizeReplacements(\n  replacements: unknown,\n): TemplateReplacements {\n  if (Array.isArray(replacements)) {\n    return replacements.reduce((acc, replacement, i) => {\n      acc[\"$\" + i] = replacement;\n      return acc;\n    }, {});\n  } else if (typeof replacements === \"object\" || replacements == null) {\n    return (replacements as any) || undefined;\n  }\n\n  throw new Error(\n    \"Template replacements must be an array, object, null, or undefined\",\n  );\n}\n", "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverDiscardElement:\n    \"'void' must be followed by an expression when not used in a binding position.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script` or in the bare case statement.\",\n  UnexpectedVoidPattern: \"Unexpected void binding.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  VoidPatternCatchClauseParam:\n    \"A void binding can not be the catch clause parameter. Use `try { ... } catch { ... }` if you want to discard the caught error.\",\n  VoidPatternInitializer: \"A void binding may not have an initializer.\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nexport default {\n  ParseExpressionEmptyInput:\n    \"Unexpected parseExpression() input: The input is empty or contains only comments.\",\n  ParseExpressionExpectsEOF: ({ unexpected }: { unexpected: number }) =>\n    `Unexpected parseExpression() input: The input should contain exactly one expression, but the first expression is followed by the unexpected character \\`${String.fromCodePoint(unexpected)}\\`.`,\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport ParseExpressionErrors from \"./parse-error/parse-expression-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum(ParseExpressionErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"commonjs\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"commonjs\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   *\n   * Use \"commonjs\" to parse code that is intended to be run in a CommonJS environment such as Node.js.\n   */\n  sourceType?: SourceType;\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype OptionsWithDefaults = Required<Options>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  if (options.sourceType === \"commonjs\") {\n    if (opts.allowAwaitOutsideFunction != null) {\n      throw new Error(\n        \"The `allowAwaitOutsideFunction` option cannot be used with `sourceType: 'commonjs'`.\",\n      );\n    }\n    if (opts.allowReturnOutsideFunction != null) {\n      throw new Error(\n        \"`sourceType: 'commonjs'` implies `allowReturnOutsideFunction: true`, please remove the `allowReturnOutsideFunction` option or use `sourceType: 'script'`.\",\n      );\n    }\n    if (opts.allowNewTargetOutsideFunction != null) {\n      throw new Error(\n        \"`sourceType: 'commonjs'` implies `allowNewTargetOutsideFunction: true`, please remove the `allowNewTargetOutsideFunction` option or use `sourceType: 'script'`.\",\n      );\n    }\n  }\n\n  return options;\n}\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n    estreeParseChainExpression(\n      node: N.Expression,\n      endLoc: Position,\n    ): N.EstreeChainExpression {\n      const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n      chain.expression = node;\n      return this.finishNodeAt(chain, \"ChainExpression\", endLoc);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      this.castNodeTo(expression, \"Literal\");\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = this.castNodeTo(directive, \"ExpressionStatement\");\n      stmt.expression = expression;\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    /**\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     * This hook will be implemented by the typescript plugin.\n     *\n     * Note: This hook should be manually invoked when we change the `type` of a given AST\n     * node, to ensure that the optional properties are correctly filled.\n     * @param node The AST node finished by finishNode\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillOptionalPropertiesForTSESLint(node: NodeType) {}\n\n    cloneEstreeStringLiteral(node: N.EstreeLiteral): N.EstreeLiteral {\n      const { start, end, loc, range, raw, value } = node;\n      const cloned = Object.create(node.constructor.prototype);\n      cloned.type = \"Literal\";\n      cloned.start = start;\n      cloned.end = end;\n      cloned.loc = loc;\n      cloned.range = range;\n      cloned.raw = raw;\n      cloned.value = value;\n      return cloned;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      return this.castNodeTo(node, \"PrivateIdentifier\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ):\n      | N.EstreeProperty\n      | N.EstreeMethodDefinition\n      | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      delete funcNode.kind;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      const valueNode = this.castNodeTo(\n        funcNode as N.MethodLike,\n        process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"typescript\") &&\n          !funcNode.body\n          ? \"TSEmptyBodyFunctionExpression\"\n          : \"FunctionExpression\",\n      );\n      (\n        node as unknown as Undone<\n          | N.EstreeProperty\n          | N.EstreeMethodDefinition\n          | N.EstreeTSAbstractMethodDefinition\n        >\n      ).value = valueNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          // @ts-expect-error remove abstract from TSAbstractMethodDefinition\n          delete node.abstract;\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      if (type === \"ObjectMethod\") {\n        if ((node as any as N.ObjectMethod).kind === \"method\") {\n          (node as any as N.EstreeProperty).kind = \"init\";\n        }\n        (node as any as N.EstreeProperty).shorthand = false;\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeProperty>,\n          \"Property\",\n        );\n      } else {\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeMethodDefinition>,\n          \"MethodDefinition\",\n        );\n      }\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        delete propertyNode.abstract;\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      if (accessorPropertyNode.abstract && this.hasPlugin(\"typescript\")) {\n        delete accessorPropertyNode.abstract;\n        this.castNodeTo(accessorPropertyNode, \"TSAbstractAccessorProperty\");\n      } else {\n        this.castNodeTo(accessorPropertyNode, \"AccessorProperty\");\n      }\n      return accessorPropertyNode;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        this.castNodeTo(node, \"Property\");\n      }\n\n      return node as any;\n    }\n\n    finishObjectProperty(node: Undone<N.ObjectProperty>): N.ObjectProperty {\n      (node as unknown as Undone<N.EstreeProperty>).kind = \"init\";\n      return this.finishNode(\n        node as unknown as Undone<N.EstreeProperty>,\n        \"Property\",\n      ) as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        this.castNodeTo(node, \"ImportExpression\");\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        if (!process.env.BABEL_8_BREAKING) {\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            (node.arguments[1] as N.Expression) ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      } else if (node.type === \"OptionalCallExpression\") {\n        this.castNodeTo(node, \"CallExpression\");\n      } else {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            this.castNodeTo(node, \"ExportAllDeclaration\");\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    stopParseSubscript(base: N.Expression, state: N.ParseSubscriptState) {\n      const node = super.stopParseSubscript(base, state);\n      if (state.optionalChainMember) {\n        return this.estreeParseChainExpression(node, base.loc.end);\n      }\n      return node;\n    }\n\n    parseMember(\n      base: N.Expression,\n      startLoc: Position,\n      state: N.ParseSubscriptState,\n      computed: boolean,\n      optional: boolean,\n    ) {\n      const node = super.parseMember(base, startLoc, state, computed, optional);\n      if (node.type === \"OptionalMemberExpression\") {\n        this.castNodeTo(node, \"MemberExpression\");\n      } else {\n        node.optional = false;\n      }\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    castNodeTo<T extends N.Node[\"type\"]>(\n      node: N.Node,\n      type: T,\n    ): Extract<N.Node, { type: T }> {\n      const result = super.castNodeTo(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      this.fillOptionalPropertiesForTSESLint(cloned);\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Literal\") {\n        return this.cloneEstreeStringLiteral(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    // Override for TS-ESLint that does not allow optional AST properties\n    finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n      const result = super.finishNode(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  // TODO: Remove this in Babel 8\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION_BASE) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get allowNewTarget() {\n    return (this.currentThisScopeFlags() & ScopeFlag.NEW_TARGET) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS_BASE) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (\n      (flags & ScopeFlag.CLASS_BASE) > 0 &&\n      (flags & ScopeFlag.FUNCTION_BASE) === 0\n    );\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS_BASE)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION_BASE) > 0;\n  }\n  get inBareCaseStatement() {\n    return (this.currentScope().flags & ScopeFlag.SWITCH) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION_BASE | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS_BASE) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.default = false;\n            delete node.exportKind;\n            return this.castNodeTo(\n              node as N.ExportNamedDeclaration,\n              \"DeclareExportDeclaration\",\n            );\n          } else {\n            return this.castNodeTo(\n              node as N.ExportAllDeclaration,\n              \"DeclareExportAllDeclaration\",\n            );\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareTypeAlias\");\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareOpaqueType\");\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault<P extends N.Pattern>(\n      startLoc?: Position | null,\n      left?: P | null,\n    ): P | N.AssignmentPattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = this.cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = this.cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments();\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments();\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments();\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: { [name: string]: string } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"ImportExpression\":\n            adjustInnerComments(\n              node,\n              [node.source, node.options ?? null],\n              commentWS,\n            );\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.lookaheadCharCodeSince(this.state.pos);\n  }\n\n  lookaheadCharCodeSince(pos: number): number {\n    return this.input.charCodeAt(this.nextTokenStartSince(pos));\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      (next === charCodes.leftCurlyBrace ||\n        (next === charCodes.leftSquareBracket &&\n          this.hasPlugin(\"recordAndTuple\")))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    if (this.input.startsWith(name, nameStart)) {\n      const nextCh = this.input.charCodeAt(nameStart + name.length);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n      voidPatternLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc ||\n      !!voidPatternLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n\n    if (voidPatternLoc != null) {\n      this.raise(Errors.InvalidCoverDiscardElement, voidPatternLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (\n      this.inModule ||\n      this.optionFlags & OptionFlags.AllowAwaitOutsideFunction\n    ) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    // The inModule flag ensures that the module block within a CommonJS source\n    // will be treated as an ES module.\n    const isCommonJS = !this.inModule && this.options.sourceType === \"commonjs\";\n    if (\n      isCommonJS ||\n      this.optionFlags & OptionFlags.AllowReturnOutsideFunction\n    ) {\n      paramFlags |= ParamKind.PARAM_RETURN;\n    }\n    this.prodParam.enter(paramFlags);\n    let scopeFlags = isCommonJS ? ScopeFlag.FUNCTION : ScopeFlag.PROGRAM;\n    if (this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction) {\n      scopeFlags |= ScopeFlag.NEW_TARGET;\n    }\n    this.scope.enter(scopeFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n  voidPatternLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type {\n  Comment,\n  Node as NodeType,\n  NodeBase,\n  EstreeLiteral,\n  Identifier,\n  Placeholder,\n  StringLiteral,\n} from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n\n  castNodeTo<T extends NodeType[\"type\"]>(\n    node: NodeType,\n    type: T,\n  ): Extract<NodeType, { type: T }> {\n    node.type = type;\n    return node as Extract<NodeType, { type: T }>;\n  }\n\n  cloneIdentifier<T extends Identifier | Placeholder>(node: T): T {\n    // We don't need to clone `typeAnnotations` and `optional`: because\n    // cloneIdentifier is only used in object shorthand and named import/export.\n    // Neither of them allow type annotations after the identifier or optional identifier\n    const { type, start, end, loc, range, name } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.name = name;\n    if (node.extra) cloned.extra = node.extra;\n    return cloned;\n  }\n\n  cloneStringLiteral<T extends StringLiteral | EstreeLiteral | Placeholder>(\n    node: T,\n  ): T {\n    const { type, start, end, loc, range, extra } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.extra = extra;\n    cloned.value = (node as StringLiteral).value;\n    return cloned;\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n  VoidPattern,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n      case \"VoidPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        this.castNodeTo(node, \"ObjectPattern\");\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        this.castNodeTo(node, \"ArrayPattern\");\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        this.castNodeTo(node, \"AssignmentPattern\");\n        delete node.operator;\n        if (node.left.type === \"VoidPattern\") {\n          this.raise(Errors.VoidPatternInitializer, node.left);\n        }\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      this.castNodeTo(prop, \"RestElement\");\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (\n      | Expression\n      | SpreadElement\n      | RestElement\n      | VoidPattern\n      | AssignmentPattern\n      | null\n    )[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(exprList, i, isLHS);\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (\n      | Expression\n      | SpreadElement\n      | RestElement\n      | VoidPattern\n      | AssignmentPattern\n    )[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      this.castNodeTo(node, \"RestElement\");\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n      case \"VoidPattern\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<\n          Expression | SpreadElement | VoidPattern | AssignmentPattern\n        >\n      | ReadonlyArray<\n          Expression | RestElement | VoidPattern | AssignmentPattern\n        >,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<\n        Expression | SpreadElement | VoidPattern | AssignmentPattern\n      >\n    | ReadonlyArray<\n        Expression | RestElement | VoidPattern | AssignmentPattern\n      > {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<\n          Expression | SpreadElement | VoidPattern | AssignmentPattern\n        >\n      | ReadonlyArray<\n          Expression | RestElement | VoidPattern | AssignmentPattern\n        >,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    const argument = this.parseBindingAtom();\n    if (argument.type === \"VoidPattern\") {\n      this.raise(Errors.UnexpectedVoidPattern, argument);\n    }\n    node.argument = argument;\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n\n      case tt._void:\n        return this.parseVoidPattern(null);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags.ALLOW_EMPTY,\n  ): Array<Pattern>;\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags.IS_FUNCTION_PARAMS,\n  ): Array<Pattern | TSParameterProperty>;\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    if (this.hasPlugin(\"discardBinding\") && this.match(tt._void)) {\n      prop.argument = this.parseVoidPattern(null);\n      this.raise(Errors.UnexpectedVoidPattern, prop.argument);\n    } else {\n      // Don't use parseRestBinding() as we only allow Identifier here.\n      prop.argument = this.parseIdentifier();\n    }\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n      this.resetStartLocationFromNode(left, decorators[0]);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault<P extends Pattern>(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: P,\n  ): P | AssignmentPattern;\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    if (left.type === \"VoidPattern\") {\n      this.raise(Errors.VoidPatternInitializer, left);\n    }\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n      case \"VoidPattern\":\n        return true;\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    } else if (type === \"VoidPattern\" && ancestor.type === \"CatchClause\") {\n      this.raise(Errors.VoidPatternCatchClauseParam, expression);\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) => `Accessibility modifier already seen: '${modifier}'.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnAwaitUsingDeclaration: (modifier: TsModifier) =>\n    `'${modifier}' modifier cannot appear on an await using declaration.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n\n  InvalidModifierOnUsingDeclaration: (modifier: TsModifier) =>\n    `'${modifier}' modifier cannot appear on a using declaration.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifier:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  UsingDeclarationInAmbientContext: (kind: \"using\" | \"await using\") =>\n    `'${kind}' declarations are not allowed in ambient contexts.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n      hasSeenStaticModifier?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (hasSeenStaticModifier && this.match(tt._static)) {\n          return undefined;\n        }\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n          modified.static,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma)) {\n        node.options = this.tsParseImportTypeOptions();\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseImportTypeOptions(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      this.expect(tt.braceL);\n      const withProperty = this.startNode<N.ObjectProperty>();\n      if (this.isContextual(tt._with)) {\n        withProperty.method = false;\n        withProperty.key = this.parseIdentifier(true);\n        withProperty.computed = false;\n        withProperty.shorthand = false;\n      } else {\n        this.unexpected(null, tt._with);\n      }\n      this.expect(tt.colon);\n      withProperty.value = this.tsParseImportTypeWithPropertyValue();\n      node.properties = [this.finishObjectProperty(withProperty)];\n      this.eat(tt.comma);\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseImportTypeWithPropertyValue(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      const properties = [];\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        const type = this.state.type;\n        if (tokenIsIdentifier(type) || type === tt.string) {\n          properties.push(super.parsePropertyDefinition(null));\n        } else {\n          this.unexpected();\n        }\n        this.eat(tt.comma);\n      }\n      node.properties = properties;\n      this.next(); // eat }\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      | N.Identifier\n      | N.RestElement\n      | N.ObjectPattern\n      | N.ArrayPattern\n      | N.VoidPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: Undone<N.TsPropertySignature | N.TsMethodSignature>,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method = node as Undone<N.TsMethodSignature>;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property = node as Undone<N.TsPropertySignature>;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n        // Allow < here so that we can recover from get key<T> later\n        if (!this.match(tt.parenL) && !this.match(tt.lt)) {\n          this.unexpected(null, tt.parenL);\n        }\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary() as N.UnaryExpression;\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.isLookaheadContextual(\"new\")\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookaheadCharCode() !== charCodes.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(node: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      const startType = this.state.type;\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            node.declare = true;\n            return super.parseFunctionStatement(\n              node,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            node.declare = true;\n            return this.parseClass(\n              node as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(node, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          case tt._let:\n            if (this.state.containsEsc) {\n              return;\n            }\n          // fallthrough\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              node.declare = true;\n              return this.parseVarStatement(node, this.state.value, true);\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(node, {\n              const: true,\n              declare: true,\n            });\n          case tt._using:\n            if (this.isUsing()) {\n              this.raise(\n                TSErrors.InvalidModifierOnUsingDeclaration,\n                this.state.startLoc,\n                \"declare\",\n              );\n              node.declare = true;\n              return this.parseVarStatement(node, \"using\", true);\n            }\n            break;\n          case tt._await:\n            if (this.isAwaitUsing()) {\n              this.raise(\n                TSErrors.InvalidModifierOnAwaitUsingDeclaration,\n                this.state.startLoc,\n                \"declare\",\n              );\n              node.declare = true;\n              this.next(); // eat 'await'\n              return this.parseVarStatement(node, \"await using\", true);\n            }\n            break;\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(node, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                node,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ) {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include decorators/modifiers in range\n      const startLoc = decorators.length\n        ? decorators[0].loc.start\n        : this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              state.stop = true;\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments();\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (result.type === \"TSInstantiationExpression\") {\n            if (\n              this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis)\n            ) {\n              this.raise(\n                TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n                this.state.startLoc,\n              );\n            }\n            if (!this.match(tt.dot) && !this.match(tt.questionDot)) {\n              // If TSInstantiationExpression is not followed by . / ?.,\n              // it must be the end of a subscript chain. Note that `(` already forms\n              // call expression arguments\n              result.expression = super.stopParseSubscript(base, state);\n            }\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).attributes = [];\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).exportKind = \"value\";\n          (node as Undone<N.ExportNamedDeclaration>).source = null;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.isLookaheadContextual(\"class\")\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      // If node.declare is true, the error has already been raised in tsTryParseDeclare.\n      if (!node.declare && (kind === \"using\" || kind === \"await using\")) {\n        this.raiseOverwrite(\n          TSErrors.UsingDeclarationInAmbientContext,\n          node,\n          kind,\n        );\n        return declaration;\n      }\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind === \"var\" || kind === \"let\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        (node as unknown as N.EstreeMethodDefinition).value.body == null\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault<P extends N.Pattern>(\n      startLoc?: Position | null,\n      left?: P | null,\n    ): P | N.AssignmentPattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifier, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract || method.type === \"TSAbstractMethodDefinition\") {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = this.cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n\n    /**\n     * This hook is defined in the ESTree plugin.\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     *\n     * @param node The AST node finished by finishNode\n     * @returns\n     */\n    fillOptionalPropertiesForTSESLint(node: N.Node): void {\n      switch (node.type) {\n        case \"ExpressionStatement\":\n          node.directive ??= undefined;\n          return;\n        case \"RestElement\":\n          node.value = undefined;\n        /* fallthrough */\n        case \"Identifier\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"ObjectPattern\":\n          node.decorators ??= [];\n          node.optional ??= false;\n          node.typeAnnotation ??= undefined;\n          return;\n        case \"TSParameterProperty\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSEmptyBodyFunctionExpression\":\n          node.body = null;\n        /* fallthrough */\n        case \"TSDeclareFunction\":\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"ClassMethod\":\n        case \"ClassPrivateMethod\":\n          node.declare ??= false;\n          node.returnType ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"Property\":\n          node.optional ??= false;\n          return;\n        case \"TSMethodSignature\":\n        case \"TSPropertySignature\":\n          node.optional ??= false;\n        /* fallthrough */\n        case \"TSIndexSignature\":\n          node.accessibility ??= undefined;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSAbstractPropertyDefinition\":\n        case \"PropertyDefinition\":\n        case \"TSAbstractAccessorProperty\":\n        case \"AccessorProperty\":\n          node.declare ??= false;\n          node.definite ??= false;\n          node.readonly ??= false;\n          node.typeAnnotation ??= undefined;\n        /* fallthrough */\n        case \"TSAbstractMethodDefinition\":\n        case \"MethodDefinition\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.optional ??= false;\n          return;\n        case \"ClassExpression\":\n          node.id ??= null;\n        /* fallthrough */\n        case \"ClassDeclaration\":\n          node.abstract ??= false;\n          node.declare ??= false;\n          node.decorators ??= [];\n          node.implements ??= [];\n          node.superTypeArguments ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"TSTypeAliasDeclaration\":\n        case \"VariableDeclaration\":\n          node.declare ??= false;\n          return;\n        case \"VariableDeclarator\":\n          node.definite ??= false;\n          return;\n        case \"TSEnumDeclaration\":\n          node.const ??= false;\n          node.declare ??= false;\n          return;\n        case \"TSEnumMember\":\n          node.computed ??= false;\n          return;\n        case \"TSImportType\":\n          node.qualifier ??= null;\n          node.options ??= null;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments ??= null;\n          }\n          return;\n        case \"TSInterfaceDeclaration\":\n          node.declare ??= false;\n          node.extends ??= [];\n          return;\n        case \"TSModuleDeclaration\":\n          node.declare ??= false;\n          node.global ??= node.kind === \"global\";\n          return;\n        case \"TSTypeParameter\":\n          node.const ??= false;\n          node.in ??= false;\n          node.out ??= false;\n          return;\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.ts                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.ts                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      if (cloned.type === \"Placeholder\") {\n        cloned.expectedNode = (node as N.Placeholder).expectedNode;\n      }\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Placeholder\") {\n        return this.cloneIdentifier(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    /* ============================================================ *\n     * parser/lval.ts                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.ts                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const next = this.nextTokenStart();\n      if (\n        this.input.charCodeAt(next) === charCodes.percentSign &&\n        this.input.charCodeAt(next + 1) === charCodes.percentSign\n      ) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          this.castNodeTo(identifier, \"V8IntrinsicIdentifier\");\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (\n          topicToken === \"#\" &&\n          pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n        ) {\n          throw new Error(\n            `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n          );\n        }\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'recordAndTuple' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    } else {\n      const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n      if (syntaxType != null) {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (\n    pluginsMap.has(\"discardBinding\") &&\n    pluginsMap.get(\"discardBinding\").syntaxType !== \"void\"\n  ) {\n    throw new Error(\n      \"The 'discardBinding' plugin requires a 'syntaxType' option. Currently the only supported value is 'void'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    if (this.match(tt.eof)) {\n      throw this.raise(Errors.ParseExpressionEmptyInput, this.state.startLoc);\n    }\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      throw this.raise(Errors.ParseExpressionExpectsEOF, this.state.startLoc, {\n        unexpected: this.input.codePointAt(this.state.start),\n      });\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n        if (\n          refExpressionErrors.voidPatternLoc != null &&\n          refExpressionErrors.voidPatternLoc.index >= startIndex\n        ) {\n          refExpressionErrors.voidPatternLoc = null;\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          return this.stopParseSubscript(base, state);\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        return this.stopParseSubscript(base, state);\n      }\n    }\n  }\n\n  stopParseSubscript(\n    this: Parser,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n  ) {\n    state.stop = true;\n    return base;\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as Undone<N.OptionalMemberExpression>).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      (node as Undone<N.OptionalCallExpression>).optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments();\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(tt.parenR)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          tt.parenR,\n          false,\n          refExpressionErrors,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaPropertyOrPhaseCall(\n            node as Undone<N.MetaProperty | N.ImportExpression>,\n          );\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING) {\n          if (type === tt.decimal) {\n            return this.parseDecimalLiteral(this.state.value);\n          } else if (type === tt.bracketBarL || type === tt.bracketHashL) {\n            return this.parseArrayLike(\n              this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n              /* canBePattern */ false,\n              /* isTuple */ true,\n            );\n          } else if (type === tt.braceBarL || type === tt.braceHashL) {\n            return this.parseObjectLike(\n              this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n              /* isPattern */ false,\n              /* isRecord */ true,\n            );\n          }\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  // https://tc39.es/proposal-source-phase-imports/\n  parseImportMetaPropertyOrPhaseCall(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    } else {\n      const id = this.createIdentifierAt(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"import\",\n        this.state.lastTokStartLoc,\n      );\n      if (this.isContextual(tt._meta)) {\n        if (!this.inModule) {\n          this.raise(Errors.ImportMetaOutsideModule, id);\n        }\n        this.sawUnambiguousESM = true;\n      }\n      return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n    }\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    if (process.env.BABEL_8_BREAKING) {\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        // parser supports invalid bigints like `1.0n` or `1e1n` such that it\n        // can throw a recoverable error, but BigInt constructor does not\n        // support them.\n        bigInt = null;\n      }\n      const node = this.parseLiteral<N.BigIntLiteral>(bigInt, \"BigIntLiteral\");\n      return node;\n    } else {\n      return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n    }\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (\n      | N.Expression\n      | N.RestElement\n      | N.VoidPattern\n      | N.AssignmentPattern\n    )[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowInOrVoidPattern(\n            tt.parenR,\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.allowNewTarget) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowInOrVoidPattern(\n            tt.braceR,\n            refExpressionErrors,\n          );\n\n      return this.finishObjectProperty(prop);\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = this.cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishObjectProperty(prop);\n    }\n  }\n\n  finishObjectProperty(node: Undone<N.ObjectProperty>) {\n    return this.finishNode(node, \"ObjectProperty\");\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<\n          N.Expression | N.SpreadElement | N.VoidPattern | N.AssignmentPattern\n        >\n      | Array<\n          N.Expression | N.RestElement | N.VoidPattern | N.AssignmentPattern\n        >,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<\n          N.Expression | N.SpreadElement | N.VoidPattern | N.AssignmentPattern\n        >\n      | Array<\n          N.Expression | N.RestElement | N.VoidPattern | N.AssignmentPattern\n        >,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n  // https://tc39.es/ecma262/#prod-ElementList\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(close, allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ):\n    | N.Expression\n    | N.SpreadElement\n    | N.ArgumentPlaceholder\n    | N.VoidPattern\n    | N.AssignmentPattern\n    | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowInOrVoidPattern(\n        close,\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: Undone<N.Identifier>, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  createIdentifierAt(\n    node: Undone<N.Identifier>,\n    name: string,\n    endLoc: Position,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNodeAt(node, \"Identifier\", endLoc);\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns whether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed = this.prodParam.hasAwait;\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        if (this.eat(tt.comma)) {\n          this.addTrailingCommaExtraToNode(node.options);\n          if (!this.match(tt.parenR)) {\n            // keep consuming arguments, to then throw ImportCallArity\n            // instead of \"expected )\"\n            do {\n              this.parseMaybeAssignAllowIn();\n            } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n            this.raise(Errors.ImportCallArity, node);\n          }\n        }\n      } else {\n        this.addTrailingCommaExtraToNode(node.source);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  parseVoidPattern(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors | null,\n  ): N.VoidPattern {\n    this.expectPlugin(\"discardBinding\");\n    const node = this.startNode<N.VoidPattern>();\n    if (refExpressionErrors != null) {\n      refExpressionErrors.voidPatternLoc = this.state.startLoc;\n    }\n    this.next();\n    return this.finishNode(node, \"VoidPattern\");\n  }\n\n  parseMaybeAssignAllowInOrVoidPattern(\n    this: Parser,\n    close: TokenType,\n    refExpressionErrors: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    if (refExpressionErrors != null && this.match(tt._void)) {\n      const nextCode = this.lookaheadCharCode();\n      if (\n        nextCode === charCodes.comma ||\n        nextCode ===\n          (close === tt.bracketR\n            ? charCodes.rightSquareBracket\n            : close === tt.braceR\n              ? charCodes.rightCurlyBrace\n              : charCodes.rightParenthesis) ||\n        nextCode === charCodes.equalsTo\n      ) {\n        // `void = Initializer` is not allowed, here we parse the production as an assignment pattern\n        // so that we can recover from this error\n        return this.parseMaybeDefault(\n          this.state.startLoc,\n          this.parseVoidPattern(refExpressionErrors),\n        );\n      }\n    }\n    return this.parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse);\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(\n      program,\n      tt.eof,\n      this.options.sourceType === \"module\" ? \"module\" : \"script\",\n    );\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType,\n    sourceType: SourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.ExpressionStatement): N.Directive {\n    const directive = this.castNodeTo(stmt, \"Directive\");\n\n    const directiveLiteral = this.castNodeTo(\n      stmt.expression,\n      \"DirectiveLiteral\",\n    );\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directive.value = directiveLiteral;\n    delete stmt.expression;\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  isUsing(): boolean {\n    if (!this.isContextual(tt._using)) {\n      return false;\n    }\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  isForUsing(): boolean {\n    if (!this.isContextual(tt._using)) {\n      return false;\n    }\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    if (this.isUnparsedContextual(next, \"of\")) {\n      const nextCharAfterOf = this.lookaheadCharCodeSince(next + 2);\n      // `for( using of` must start either a for-lhs-of statement\n      // or a for lexical declaration\n      if (\n        nextCharAfterOf !== charCodes.equalsTo &&\n        nextCharAfterOf !== charCodes.colon &&\n        // recover from `for(using of;...);`\n        nextCharAfterOf !== charCodes.semicolon\n      ) {\n        return false;\n      }\n    }\n    if (\n      this.chStartsBindingIdentifier(nextCh, next) ||\n      this.isUnparsedContextual(next, \"void\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isAwaitUsing(): boolean {\n    if (!this.isContextual(tt._await)) {\n      return false;\n    }\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  allowsUsing(): boolean {\n    return (\n      (this.scope.inModule || !this.scope.inTopLevel) &&\n      !this.scope.inBareCaseStatement\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (this.isAwaitUsing()) {\n          if (!this.allowsUsing()) {\n            this.raise(Errors.UnexpectedUsingDeclaration, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          } else if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        if (!this.allowsUsing()) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments();\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing = this.isAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing || this.isForUsing();\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.SWITCH);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : ScopeFlag.OTHER,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    } else {\n      if (id.type === \"VoidPattern\") {\n        this.raise(Errors.UnexpectedVoidPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (\n      this.match(tt._const) ||\n      this.match(tt._var) ||\n      this.isLet() ||\n      this.isUsing() ||\n      this.isAwaitUsing()\n    ) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        const next = this.nextTokenStart();\n        const nextChar = this.input.charCodeAt(next);\n        if (\n          nextChar === charCodes.leftCurlyBrace ||\n          (this.chStartsBindingIdentifier(nextChar, next) &&\n            !this.input.startsWith(\"from\", next))\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = this.cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = this.cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.startNode<N.Identifier>();\n    const phaseIdentifierName = this.parseIdentifierName(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifierName,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return this.createIdentifier(phaseIdentifier, phaseIdentifierName);\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = this.cloneIdentifier(imported as N.Identifier);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport interface ParseError {\n  code: string;\n  reasonCode: string;\n}\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  errors: null | ParseError[];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast as unknown as ParseResult<File>;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(\n            options,\n            input,\n          ).parse() as unknown as ParseResult<File>;\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast as unknown as ParseResult<File>;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(\n          options,\n          input,\n        ).parse() as unknown as ParseResult<File>;\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse() as unknown as ParseResult<File>;\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as unknown as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n", "var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x,blackBright:x,redBright:x,greenBright:x,yellowBright:x,blueBright:x,magentaBright:x,cyanBright:x,whiteBright:x,bgBlackBright:x,bgRedBright:x,bgGreenBright:x,bgYellowBright:x,bgBlueBright:x,bgMagentaBright:x,bgCyanBright:x,bgWhiteBright:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n", "// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n// License: MIT. (See LICENSE.)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n})\n\n// This regex comes from regex.coffee, and is inserted here by generate-index.js\n// (run `npm run build`).\nexports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g\n\nexports.matchToToken = function(match) {\n  var token = {type: \"invalid\", value: match[0], closed: undefined}\n       if (match[ 1]) token.type = \"string\" , token.closed = !!(match[3] || match[4])\n  else if (match[ 5]) token.type = \"comment\"\n  else if (match[ 6]) token.type = \"comment\", token.closed = !!match[7]\n  else if (match[ 8]) token.type = \"regex\"\n  else if (match[ 9]) token.type = \"number\"\n  else if (match[10]) token.type = \"name\"\n  else if (match[11]) token.type = \"punctuator\"\n  else if (match[12]) token.type = \"whitespace\"\n  return token\n}\n", "import picocolors, { createColors } from \"picocolors\";\nimport type { Colors, Formatter } from \"picocolors/types\";\n\nexport function isColorSupported() {\n  return (\n    // See https://github.com/alexeyraspopov/picocolors/issues/62\n    typeof process === \"object\" &&\n      (process.env.FORCE_COLOR === \"0\" || process.env.FORCE_COLOR === \"false\")\n      ? false\n      : picocolors.isColorSupported\n  );\n}\n\nexport type InternalTokenType =\n  | \"keyword\"\n  | \"capitalized\"\n  | \"jsxIdentifier\"\n  | \"punctuator\"\n  | \"number\"\n  | \"string\"\n  | \"regex\"\n  | \"comment\"\n  | \"invalid\";\n\ntype UITokens = \"gutter\" | \"marker\" | \"message\";\n\nexport type Defs = {\n  [_ in InternalTokenType | UITokens | \"reset\"]: Formatter;\n};\n\nconst compose: <T, U, V>(f: (gv: U) => V, g: (v: T) => U) => (v: T) => V =\n  (f, g) => v =>\n    f(g(v));\n\n/**\n * Styles for token types.\n */\nfunction buildDefs(colors: Colors): Defs {\n  return {\n    keyword: colors.cyan,\n    capitalized: colors.yellow,\n    jsxIdentifier: colors.yellow,\n    punctuator: colors.yellow,\n    number: colors.magenta,\n    string: colors.green,\n    regex: colors.magenta,\n    comment: colors.gray,\n    invalid: compose(compose(colors.white, colors.bgRed), colors.bold),\n\n    gutter: colors.gray,\n    marker: compose(colors.red, colors.bold),\n    message: compose(colors.red, colors.bold),\n\n    reset: colors.reset,\n  };\n}\n\nconst defsOn = buildDefs(createColors(true));\nconst defsOff = buildDefs(createColors(false));\n\nexport function getDefs(enabled: boolean): Defs {\n  return enabled ? defsOn : defsOff;\n}\n", "import type { Token as JSToken, JSXToken } from \"js-tokens\";\nimport jsTokens from \"js-tokens\";\n\nimport {\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nimport { getDefs, type InternalTokenType } from \"./defs.ts\";\n\n/**\n * Names that are always allowed as identifiers, but also appear as keywords\n * within certain syntactic productions.\n *\n * https://tc39.es/ecma262/#sec-keywords-and-reserved-words\n *\n * `target` has been omitted since it is very likely going to be a false\n * positive.\n */\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\ntype Token = {\n  type: InternalTokenType | \"uncolored\";\n  value: string;\n};\n\n/**\n * RegExp to test for newlines in terminal.\n */\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\n/**\n * RegExp to test for the three types of brackets.\n */\nconst BRACKET = /^[()[\\]{}]$/;\n\nlet tokenize: (\n  text: string,\n) => Generator<{ type: InternalTokenType | \"uncolored\"; value: string }>;\n\nif (process.env.BABEL_8_BREAKING) {\n  /**\n   * Get the type of token, specifying punctuator type.\n   */\n  const getTokenType = function (\n    token: JSToken | JSXToken,\n  ): InternalTokenType | \"uncolored\" {\n    if (token.type === \"IdentifierName\") {\n      if (\n        isKeyword(token.value) ||\n        isStrictReservedWord(token.value, true) ||\n        sometimesKeywords.has(token.value)\n      ) {\n        return \"keyword\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"Punctuator\" && BRACKET.test(token.value)) {\n      return \"uncolored\";\n    }\n\n    if (token.type === \"Invalid\" && token.value === \"@\") {\n      return \"punctuator\";\n    }\n\n    switch (token.type) {\n      case \"NumericLiteral\":\n        return \"number\";\n\n      case \"StringLiteral\":\n      case \"JSXString\":\n      case \"NoSubstitutionTemplate\":\n        return \"string\";\n\n      case \"RegularExpressionLiteral\":\n        return \"regex\";\n\n      case \"Punctuator\":\n      case \"JSXPunctuator\":\n        return \"punctuator\";\n\n      case \"MultiLineComment\":\n      case \"SingleLineComment\":\n        return \"comment\";\n\n      case \"Invalid\":\n      case \"JSXInvalid\":\n        return \"invalid\";\n\n      case \"JSXIdentifier\":\n        return \"jsxIdentifier\";\n\n      default:\n        return \"uncolored\";\n    }\n  };\n\n  /**\n   * Turn a string of JS into an array of objects.\n   */\n  tokenize = function* (text: string): Generator<Token> {\n    for (const token of jsTokens(text, { jsx: true })) {\n      switch (token.type) {\n        case \"TemplateHead\":\n          yield { type: \"string\", value: token.value.slice(0, -2) };\n          yield { type: \"punctuator\", value: \"${\" };\n          break;\n\n        case \"TemplateMiddle\":\n          yield { type: \"punctuator\", value: \"}\" };\n          yield { type: \"string\", value: token.value.slice(1, -2) };\n          yield { type: \"punctuator\", value: \"${\" };\n          break;\n\n        case \"TemplateTail\":\n          yield { type: \"punctuator\", value: \"}\" };\n          yield { type: \"string\", value: token.value.slice(1) };\n          break;\n\n        default:\n          yield {\n            type: getTokenType(token),\n            value: token.value,\n          };\n      }\n    }\n  };\n} else {\n  /**\n   * RegExp to test for what seems to be a JSX tag name.\n   */\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  // The token here is defined in js-tokens@4. However we don't bother\n  // typing it since the whole block will be removed in Babel 8\n  const getTokenType = function (token: any, offset: number, text: string) {\n    if (token.type === \"name\") {\n      if (\n        isKeyword(token.value) ||\n        isStrictReservedWord(token.value, true) ||\n        sometimesKeywords.has(token.value)\n      ) {\n        return \"keyword\";\n      }\n\n      if (\n        JSX_TAG.test(token.value) &&\n        (text[offset - 1] === \"<\" || text.slice(offset - 2, offset) === \"</\")\n      ) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (\n      token.type === \"invalid\" &&\n      (token.value === \"@\" || token.value === \"#\")\n    ) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = function* (text: string) {\n    let match;\n    while ((match = (jsTokens as any).default.exec(text))) {\n      const token = (jsTokens as any).matchToToken(match);\n\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value,\n      };\n    }\n  };\n}\n\nexport function highlight(text: string) {\n  if (text === \"\") return \"\";\n\n  const defs = getDefs(true);\n\n  let highlighted = \"\";\n\n  for (const { type, value } of tokenize(text)) {\n    if (type in defs) {\n      highlighted += value\n        .split(NEWLINE)\n        .map(str => defs[type as InternalTokenType](str))\n        .join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n\n  return highlighted;\n}\n", "import { getDefs, isColorSupported } from \"./defs.ts\";\nimport { highlight } from \"./highlight.ts\";\n\nexport { highlight };\n\nlet deprecationWarningShown = false;\n\ntype Location = {\n  column: number;\n  line: number;\n};\n\ntype NodeLocation = {\n  end?: Location;\n  start: Location;\n};\n\nexport interface Options {\n  /** Syntax highlight the code as JavaScript for terminals. default: false */\n  highlightCode?: boolean;\n  /**  The number of lines to show above the error. default: 2 */\n  linesAbove?: number;\n  /**  The number of lines to show below the error. default: 3 */\n  linesBelow?: number;\n  /**\n   * Forcibly syntax highlight the code as JavaScript (for non-terminals);\n   * overrides highlightCode.\n   * default: false\n   */\n  forceColor?: boolean;\n  /**\n   * Pass in a string to be displayed inline (if possible) next to the\n   * highlighted location in the code. If it can't be positioned inline,\n   * it will be placed above the code frame.\n   * default: nothing\n   */\n  message?: string;\n}\n\n/**\n * RegExp to test for newlines in terminal.\n */\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\n/**\n * Extract what lines should be marked and highlighted.\n */\n\ntype MarkerLines = Record<number, true | [number, number]>;\n\nfunction getMarkerLines(\n  loc: NodeLocation,\n  source: Array<string>,\n  opts: Options,\n): {\n  start: number;\n  end: number;\n  markerLines: MarkerLines;\n} {\n  const startLoc: Location = {\n    column: 0,\n    line: -1,\n    ...loc.start,\n  };\n  const endLoc: Location = {\n    ...startLoc,\n    ...loc.end,\n  };\n  const { linesAbove = 2, linesBelow = 3 } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n\n  if (startLine === -1) {\n    start = 0;\n  }\n\n  if (endLine === -1) {\n    end = source.length;\n  }\n\n  const lineDiff = endLine - startLine;\n  const markerLines: MarkerLines = {};\n\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n\n  return { start, end, markerLines };\n}\n\nexport function codeFrameColumns(\n  rawLines: string,\n  loc: NodeLocation,\n  opts: Options = {},\n): string {\n  const shouldHighlight =\n    opts.forceColor || (isColorSupported() && opts.highlightCode);\n  const defs = getDefs(shouldHighlight);\n\n  const lines = rawLines.split(NEWLINE);\n  const { start, end, markerLines } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === \"number\";\n\n  const numberMaxWidth = String(end).length;\n\n  const highlightedLines = shouldHighlight ? highlight(rawLines) : rawLines;\n\n  let frame = highlightedLines\n    .split(NEWLINE, end)\n    .slice(start, end)\n    .map((line, index) => {\n      const number = start + 1 + index;\n      const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n      const gutter = ` ${paddedNumber} |`;\n      const hasMarker = markerLines[number];\n      const lastMarkerLine = !markerLines[number + 1];\n      if (hasMarker) {\n        let markerLine = \"\";\n        if (Array.isArray(hasMarker)) {\n          const markerSpacing = line\n            .slice(0, Math.max(hasMarker[0] - 1, 0))\n            .replace(/[^\\t]/g, \" \");\n          const numberOfMarkers = hasMarker[1] || 1;\n\n          markerLine = [\n            \"\\n \",\n            defs.gutter(gutter.replace(/\\d/g, \" \")),\n            \" \",\n            markerSpacing,\n            defs.marker(\"^\").repeat(numberOfMarkers),\n          ].join(\"\");\n\n          if (lastMarkerLine && opts.message) {\n            markerLine += \" \" + defs.message(opts.message);\n          }\n        }\n        return [\n          defs.marker(\">\"),\n          defs.gutter(gutter),\n          line.length > 0 ? ` ${line}` : \"\",\n          markerLine,\n        ].join(\"\");\n      } else {\n        return ` ${defs.gutter(gutter)}${line.length > 0 ? ` ${line}` : \"\"}`;\n      }\n    })\n    .join(\"\\n\");\n\n  if (opts.message && !hasColumns) {\n    frame = `${\" \".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n\n  if (shouldHighlight) {\n    return defs.reset(frame);\n  } else {\n    return frame;\n  }\n}\n\n/**\n * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.\n */\n\nexport default function (\n  rawLines: string,\n  lineNumber: number,\n  colNumber?: number | null,\n  opts: Options = {},\n): string {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n\n    const message =\n      \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n\n    if (process.emitWarning) {\n      // A string is directly supplied to emitWarning, because when supplying an\n      // Error object node throws in the tests because of different contexts\n      process.emitWarning(message, \"DeprecationWarning\");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = \"DeprecationWarning\";\n      console.warn(new Error(message));\n    }\n  }\n\n  colNumber = Math.max(colNumber, 0);\n\n  const location: NodeLocation = {\n    start: { column: colNumber, line: lineNumber },\n  };\n\n  return codeFrameColumns(rawLines, location, opts);\n}\n", "import {\n  isCallExpression,\n  isExpressionStatement,\n  isFunction,\n  isIdentifier,\n  isJSXIdentifier,\n  isNewExpression,\n  isPlaceholder,\n  isStatement,\n  isStringLiteral,\n  removePropertiesDeep,\n  traverse,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { TraversalAncestors } from \"@babel/types\";\nimport { parse } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport type { TemplateOpts, ParserOpts } from \"./options.ts\";\nimport type { Formatter } from \"./formatters.ts\";\n\nexport type Metadata = {\n  ast: t.File;\n  placeholders: Array<Placeholder>;\n  placeholderNames: Set<string>;\n};\n\ntype PlaceholderType = \"string\" | \"param\" | \"statement\" | \"other\";\nexport type Placeholder = {\n  name: string;\n  resolve: (a: t.File) => { parent: t.Node; key: string; index?: number };\n  type: PlaceholderType;\n  isDuplicate: boolean;\n};\n\nconst PATTERN = /^[_$A-Z0-9]+$/;\n\nexport default function parseAndBuildMetadata<T>(\n  formatter: Formatter<T>,\n  code: string,\n  opts: TemplateOpts,\n): Metadata {\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n  } = opts;\n\n  const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);\n\n  removePropertiesDeep(ast, {\n    preserveComments,\n  });\n\n  formatter.validate(ast);\n\n  const state: MetadataState = {\n    syntactic: { placeholders: [], placeholderNames: new Set() },\n    legacy: { placeholders: [], placeholderNames: new Set() },\n    placeholderWhitelist,\n    placeholderPattern,\n    syntacticPlaceholders,\n  };\n\n  traverse(ast, placeholderVisitorHandler, state);\n\n  return {\n    ast,\n    ...(state.syntactic.placeholders.length ? state.syntactic : state.legacy),\n  };\n}\n\nfunction placeholderVisitorHandler(\n  node: t.Node,\n  ancestors: TraversalAncestors,\n  state: MetadataState,\n) {\n  let name: string;\n\n  let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;\n\n  if (isPlaceholder(node)) {\n    if (state.syntacticPlaceholders === false) {\n      throw new Error(\n        \"%%foo%%-style placeholders can't be used when \" +\n          \"'.syntacticPlaceholders' is false.\",\n      );\n    }\n    name = node.name.name;\n    hasSyntacticPlaceholders = true;\n  } else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) {\n    return;\n  } else if (isIdentifier(node) || isJSXIdentifier(node)) {\n    name = node.name;\n  } else if (isStringLiteral(node)) {\n    name = node.value;\n  } else {\n    return;\n  }\n\n  if (\n    hasSyntacticPlaceholders &&\n    (state.placeholderPattern != null || state.placeholderWhitelist != null)\n  ) {\n    // This check is also in options.js. We need it there to handle the default\n    // .syntacticPlaceholders behavior.\n    throw new Error(\n      \"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" +\n        \" with '.syntacticPlaceholders: true'\",\n    );\n  }\n\n  if (\n    !hasSyntacticPlaceholders &&\n    (state.placeholderPattern === false ||\n      !(state.placeholderPattern || PATTERN).test(name)) &&\n    !state.placeholderWhitelist?.has(name)\n  ) {\n    return;\n  }\n\n  // Keep our own copy of the ancestors so we can use it in .resolve().\n  ancestors = ancestors.slice();\n\n  const { node: parent, key } = ancestors[ancestors.length - 1];\n\n  let type: PlaceholderType;\n  if (\n    isStringLiteral(node) ||\n    isPlaceholder(node, { expectedNode: \"StringLiteral\" })\n  ) {\n    type = \"string\";\n  } else if (\n    (isNewExpression(parent) && key === \"arguments\") ||\n    (isCallExpression(parent) && key === \"arguments\") ||\n    (isFunction(parent) && key === \"params\")\n  ) {\n    type = \"param\";\n  } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {\n    type = \"statement\";\n    ancestors = ancestors.slice(0, -1);\n  } else if (isStatement(node) && isPlaceholder(node)) {\n    type = \"statement\";\n  } else {\n    type = \"other\";\n  }\n\n  const { placeholders, placeholderNames } = !hasSyntacticPlaceholders\n    ? state.legacy\n    : state.syntactic;\n\n  placeholders.push({\n    name,\n    type,\n    resolve: ast => resolveAncestors(ast, ancestors),\n    isDuplicate: placeholderNames.has(name),\n  });\n  placeholderNames.add(name);\n}\n\nfunction resolveAncestors(ast: t.File, ancestors: TraversalAncestors) {\n  let parent: t.Node = ast;\n  for (let i = 0; i < ancestors.length - 1; i++) {\n    const { key, index } = ancestors[i];\n\n    if (index === undefined) {\n      parent = (parent as any)[key];\n    } else {\n      parent = (parent as any)[key][index];\n    }\n  }\n\n  const { key, index } = ancestors[ancestors.length - 1];\n\n  return { parent, key, index };\n}\n\ntype MetadataState = {\n  syntactic: {\n    placeholders: Array<Placeholder>;\n    placeholderNames: Set<string>;\n  };\n  legacy: {\n    placeholders: Array<Placeholder>;\n    placeholderNames: Set<string>;\n  };\n  placeholderWhitelist?: Set<string>;\n  placeholderPattern?: RegExp | false;\n  syntacticPlaceholders?: boolean;\n};\n\nfunction parseWithCodeFrame(\n  code: string,\n  parserOpts: ParserOpts,\n  syntacticPlaceholders?: boolean,\n): t.File {\n  const plugins = (parserOpts.plugins || []).slice();\n  if (syntacticPlaceholders !== false) {\n    plugins.push(\"placeholders\");\n  }\n\n  parserOpts = {\n    allowAwaitOutsideFunction: true,\n    allowReturnOutsideFunction: true,\n    allowNewTargetOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    allowYieldOutsideFunction: true,\n    sourceType: \"module\",\n    ...parserOpts,\n    plugins,\n  };\n\n  try {\n    return parse(code, parserOpts);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message += \"\\n\" + codeFrameColumns(code, { start: loc });\n      err.code = \"BABEL_TEMPLATE_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n", "import {\n  blockStatement,\n  cloneNode,\n  emptyStatement,\n  expressionStatement,\n  identifier,\n  isStatement,\n  isStringLiteral,\n  stringLiteral,\n  validate,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport type { TemplateReplacements } from \"./options.ts\";\nimport type { Metadata, Placeholder } from \"./parse.ts\";\n\nexport default function populatePlaceholders(\n  metadata: Metadata,\n  replacements: TemplateReplacements,\n): t.File {\n  const ast = cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (!Object.hasOwn(replacements, placeholder.name)) {\n        const placeholderName = placeholder.name;\n\n        throw new Error(\n          `Error: No substitution given for \"${placeholderName}\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`,\n        );\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution \"${key}\" given`);\n      }\n    });\n  }\n\n  // Process in reverse order so AST mutation doesn't change indices that\n  // will be needed for later calls to `placeholder.resolve()`.\n  metadata.placeholders\n    .slice()\n    .reverse()\n    .forEach(placeholder => {\n      try {\n        applyReplacement(\n          placeholder,\n          ast,\n          (replacements && replacements[placeholder.name]) ?? null,\n        );\n      } catch (e) {\n        e.message = `@babel/template placeholder \"${placeholder.name}\": ${e.message}`;\n        throw e;\n      }\n    });\n\n  return ast;\n}\n\nfunction applyReplacement(\n  placeholder: Placeholder,\n  ast: t.File,\n  replacement: any,\n) {\n  // Track inserted nodes and clone them if they are inserted more than\n  // once to avoid injecting the same node multiple times.\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => cloneNode(node));\n    } else if (typeof replacement === \"object\") {\n      replacement = cloneNode(replacement);\n    }\n  }\n\n  const { parent, key, index } = placeholder.resolve(ast);\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = stringLiteral(replacement);\n    }\n    if (!replacement || !isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = expressionStatement(identifier(replacement));\n      } else if (!isStatement(replacement)) {\n        replacement = expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = identifier(replacement);\n        }\n        if (!isStatement(replacement)) {\n          replacement = expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  function set(parent: any, key: any, value: any) {\n    const node = parent[key] as t.Node;\n    parent[key] = value;\n    if (node.type === \"Identifier\" || node.type === \"Placeholder\") {\n      if (node.typeAnnotation) {\n        value.typeAnnotation = node.typeAnnotation;\n      }\n      if (node.optional) {\n        value.optional = node.optional;\n      }\n      if (node.decorators) {\n        value.decorators = node.decorators;\n      }\n    }\n  }\n\n  if (index === undefined) {\n    validate(parent, key, replacement);\n\n    set(parent, key, replacement);\n  } else {\n    const items: Array<t.Node> = (parent as any)[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        set(items, index, replacement);\n      }\n    } else {\n      set(items, index, replacement);\n    }\n\n    validate(parent, key, items);\n    (parent as any)[key] = items;\n  }\n}\n", "import type { Formatter } from \"./formatters.ts\";\nimport type { TemplateOpts } from \"./options.ts\";\nimport type { Metadata } from \"./parse.ts\";\nimport { normalizeReplacements } from \"./options.ts\";\nimport parseAndBuildMetadata from \"./parse.ts\";\nimport populatePlaceholders from \"./populate.ts\";\n\nexport default function stringTemplate<T>(\n  formatter: Formatter<T>,\n  code: string,\n  opts: TemplateOpts,\n): (arg?: unknown) => T {\n  code = formatter.code(code);\n\n  let metadata: Metadata;\n\n  return (arg?: unknown) => {\n    const replacements = normalizeReplacements(arg);\n\n    if (!metadata) metadata = parseAndBuildMetadata(formatter, code, opts);\n\n    return formatter.unwrap(populatePlaceholders(metadata, replacements));\n  };\n}\n", "import type { Formatter } from \"./formatters.ts\";\nimport type { TemplateReplacements, TemplateOpts } from \"./options.ts\";\nimport { normalizeReplacements } from \"./options.ts\";\nimport parseAndBuildMetadata from \"./parse.ts\";\nimport populatePlaceholders from \"./populate.ts\";\n\nexport default function literalTemplate<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n): (_: Array<unknown>) => (_: unknown) => T {\n  const { metadata, names } = buildLiteralData(formatter, tpl, opts);\n\n  return arg => {\n    const defaultReplacements: TemplateReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n\n    return (arg: unknown) => {\n      const replacements = normalizeReplacements(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.hasOwn(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap(\n        populatePlaceholders(\n          metadata,\n          replacements\n            ? Object.assign(replacements, defaultReplacements)\n            : defaultReplacements,\n        ),\n      );\n    };\n  };\n}\n\nfunction buildLiteralData<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n) {\n  let prefix = \"BABEL_TPL$\";\n\n  const raw = tpl.join(\"\");\n\n  do {\n    // If there are cases where the template already contains $$BABEL_TPL$0 or any other\n    // matching pattern, we keep adding \"$$\" characters until a unique prefix\n    // is found.\n    prefix = \"$$\" + prefix;\n  } while (raw.includes(prefix));\n\n  const { names, code } = buildTemplateCode(tpl, prefix);\n\n  const metadata = parseAndBuildMetadata(formatter, formatter.code(code), {\n    parser: opts.parser,\n\n    // Explicitly include our generated names in the whitelist so users never\n    // have to think about whether their placeholder pattern will match.\n    placeholderWhitelist: new Set(\n      names.concat(\n        opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [],\n      ),\n    ),\n    placeholderPattern: opts.placeholderPattern,\n    preserveComments: opts.preserveComments,\n    syntacticPlaceholders: opts.syntacticPlaceholders,\n  });\n\n  return { metadata, names };\n}\n\nfunction buildTemplateCode(\n  tpl: Array<string>,\n  prefix: string,\n): { names: Array<string>; code: string } {\n  const names = [];\n\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n\n    code += value + tpl[i];\n  }\n\n  return { names, code };\n}\n", "import { merge, validate } from \"./options.ts\";\nimport type {\n  TemplateOpts,\n  PublicOpts,\n  PublicReplacements,\n} from \"./options.ts\";\nimport type { Formatter } from \"./formatters.ts\";\n\nimport stringTemplate from \"./string.ts\";\nimport literalTemplate from \"./literal.ts\";\n\nexport type TemplateBuilder<T> = {\n  // Build a new builder, merging the given options with the previous ones.\n  (opts: PublicOpts): TemplateBuilder<T>;\n\n  // Building from a string produces an AST builder function by default.\n  (tpl: string, opts?: PublicOpts): (replacements?: PublicReplacements) => T;\n\n  // Building from a template literal produces an AST builder function by default.\n  (\n    tpl: TemplateStringsArray,\n    ...args: Array<unknown>\n  ): (replacements?: PublicReplacements) => T;\n\n  // Allow users to explicitly create templates that produce ASTs, skipping\n  // the need for an intermediate function.\n  ast: {\n    (tpl: string, opts?: PublicOpts): T;\n    (tpl: TemplateStringsArray, ...args: Array<unknown>): T;\n  };\n};\n\n// Prebuild the options that will be used when parsing a `.ast` template.\n// These do not use a pattern because there is no way for users to pass in\n// replacement patterns to begin with, and disabling pattern matching means\n// users have more flexibility in what type of content they have in their\n// template JS.\nconst NO_PLACEHOLDER: TemplateOpts = validate({\n  placeholderPattern: false,\n});\n\nexport default function createTemplateBuilder<T>(\n  formatter: Formatter<T>,\n  defaultOpts?: TemplateOpts,\n): TemplateBuilder<T> {\n  const templateFnCache = new WeakMap();\n  const templateAstCache = new WeakMap();\n  const cachedOpts = defaultOpts || validate(null);\n\n  return Object.assign(\n    ((tpl, ...args) => {\n      if (typeof tpl === \"string\") {\n        if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n        return extendedTrace(\n          stringTemplate(formatter, tpl, merge(cachedOpts, validate(args[0]))),\n        );\n      } else if (Array.isArray(tpl)) {\n        let builder = templateFnCache.get(tpl);\n        if (!builder) {\n          builder = literalTemplate(formatter, tpl, cachedOpts);\n          templateFnCache.set(tpl, builder);\n        }\n        return extendedTrace(builder(args));\n      } else if (typeof tpl === \"object\" && tpl) {\n        if (args.length > 0) throw new Error(\"Unexpected extra params.\");\n        return createTemplateBuilder(\n          formatter,\n          merge(cachedOpts, validate(tpl)),\n        );\n      }\n      throw new Error(`Unexpected template param ${typeof tpl}`);\n    }) as TemplateBuilder<T>,\n    {\n      ast: (tpl: string | Array<string>, ...args: Array<unknown>) => {\n        if (typeof tpl === \"string\") {\n          if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n          return stringTemplate(\n            formatter,\n            tpl,\n            merge(merge(cachedOpts, validate(args[0])), NO_PLACEHOLDER),\n          )();\n        } else if (Array.isArray(tpl)) {\n          let builder = templateAstCache.get(tpl);\n          if (!builder) {\n            builder = literalTemplate(\n              formatter,\n              tpl,\n              merge(cachedOpts, NO_PLACEHOLDER),\n            );\n            templateAstCache.set(tpl, builder);\n          }\n          return builder(args)();\n        }\n\n        throw new Error(`Unexpected template param ${typeof tpl}`);\n      },\n    },\n  );\n}\n\nfunction extendedTrace<Arg, Result>(\n  fn: (_: Arg) => Result,\n): (_: Arg) => Result {\n  // Since we lazy parse the template, we get the current stack so we have the\n  // original stack to append if it errors when parsing\n  let rootStack = \"\";\n  try {\n    // error stack gets populated in IE only on throw\n    // (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)\n    throw new Error();\n  } catch (error) {\n    if (error.stack) {\n      // error.stack does not exists in IE <= 9\n      // We slice off the top 3 items in the stack to remove the call to\n      // 'extendedTrace', and the anonymous builder function, with the final\n      // stripped line being the error message itself since we threw it\n      // in the first place and it doesn't matter.\n      rootStack = error.stack.split(\"\\n\").slice(3).join(\"\\n\");\n    }\n  }\n\n  return (arg: Arg) => {\n    try {\n      return fn(arg);\n    } catch (err) {\n      err.stack += `\\n    =============\\n${rootStack}`;\n      throw err;\n    }\n  };\n}\n", "import * as formatters from \"./formatters.ts\";\nimport createTemplateBuilder from \"./builder.ts\";\n\nexport const smart = createTemplateBuilder(formatters.smart);\nexport const statement = createTemplateBuilder(formatters.statement);\nexport const statements = createTemplateBuilder(formatters.statements);\nexport const expression = createTemplateBuilder(formatters.expression);\nexport const program = createTemplateBuilder(formatters.program);\n\ntype DefaultTemplateBuilder = typeof smart & {\n  smart: typeof smart;\n  statement: typeof statement;\n  statements: typeof statements;\n  expression: typeof expression;\n  program: typeof program;\n};\n\nexport default Object.assign(smart.bind(undefined) as DefaultTemplateBuilder, {\n  smart,\n  statement,\n  statements,\n  expression,\n  program,\n  ast: smart.ast,\n});\n\nexport type {\n  PublicOpts as Options,\n  PublicReplacements as Replacements,\n} from \"./options.ts\";\n", "import type {\n  PluginAPI,\n  PluginObject,\n  PluginPass,\n  PresetAPI,\n  PresetObject,\n} from \"@babel/core\";\n\ntype APIPolyfillFactory<T extends keyof PluginAPI> = (\n  api: PluginAPI,\n) => PluginAPI[T];\n\ntype APIPolyfills = {\n  assertVersion: APIPolyfillFactory<\"assertVersion\">;\n};\n\nconst apiPolyfills: APIPolyfills = {\n  // Not supported by Babel 7 and early versions of Babel 7 beta.\n  // It's important that this is polyfilled for older Babel versions\n  // since it's needed to report the version mismatch.\n  assertVersion: (api: PluginAPI) => (range: number | string) => {\n    throwVersionError(range, api.version);\n  },\n};\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(apiPolyfills, {\n    // This is supported starting from Babel 7.13\n    targets: () => (): any => {\n      return {};\n    },\n    // This is supported starting from Babel 7.13\n    assumption: () => (): any => {\n      return undefined;\n    },\n    // This is supported starting from Babel 7.17\n    addExternalDependency: () => () => {},\n  });\n}\n\nexport function declare<State = object, Option = object>(\n  builder: (\n    api: PluginAPI,\n    options: Option,\n    dirname: string,\n  ) => PluginObject<State & PluginPass>,\n): (\n  api: PluginAPI,\n  options: Option,\n  dirname: string,\n) => PluginObject<State & PluginPass> {\n  return (api, options: Option, dirname: string) => {\n    let clonedApi: PluginAPI;\n\n    for (const name of Object.keys(\n      apiPolyfills,\n    ) as (keyof typeof apiPolyfills)[]) {\n      if (api[name]) continue;\n\n      clonedApi ??= copyApiObject(api);\n      clonedApi[name] = apiPolyfills[name](clonedApi);\n    }\n\n    // @ts-expect-error options || {} may not be assigned to Options\n    return builder(clonedApi ?? api, options || {}, dirname);\n  };\n}\n\nexport const declarePreset = declare as <Option = object>(\n  builder: (api: PresetAPI, options: Option, dirname: string) => PresetObject,\n) => (api: PresetAPI, options: Option, dirname: string) => PresetObject;\n\nfunction copyApiObject(api: PluginAPI): PluginAPI {\n  // Babel >= 7 <= beta.41 passed the API as a new object that had\n  // babel/core as the prototype. While slightly faster, it also\n  // means that the Object.assign copy below fails. Rather than\n  // keep complexity, the Babel 6 behavior has been reverted and this\n  // normalizes all that for Babel 7.\n  let proto = null;\n  if (typeof api.version === \"string\" && /^7\\./.test(api.version)) {\n    proto = Object.getPrototypeOf(api);\n    if (\n      proto &&\n      (!Object.hasOwn(proto, \"version\") ||\n        !Object.hasOwn(proto, \"transform\") ||\n        !Object.hasOwn(proto, \"template\") ||\n        !Object.hasOwn(proto, \"types\"))\n    ) {\n      proto = null;\n    }\n  }\n\n  return {\n    ...proto,\n    ...api,\n  };\n}\n\nfunction throwVersionError(range: string | number, version: string) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n    range = `^${range}.0.0-0`;\n  }\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    // Bump up the limit if needed so that users are more likely\n    // to be able to see what is calling Babel.\n    Error.stackTraceLimit = 25;\n  }\n\n  let err;\n  if (version.slice(0, 2) === \"7.\") {\n    err = new Error(\n      `Requires Babel \"^7.0.0-beta.41\", but was loaded with \"${version}\". ` +\n        `You'll need to update your @babel/core version.`,\n    );\n  } else {\n    err = new Error(\n      `Requires Babel \"${range}\", but was loaded with \"${version}\". ` +\n        `If you are sure you have a compatible version of @babel/core, ` +\n        `it is likely that something in your build process is loading the ` +\n        `wrong version. Inspect the stack trace of this error to look for ` +\n        `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` +\n        `to see what is calling Babel.`,\n    );\n  }\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version,\n    range,\n  } as any);\n}\n", "import { declare } from \"@babel/helper-plugin-utils\";\n\nexport default declare(api => {\n  api.assertVersion(REQUIRED_VERSION(7));\n\n  return {\n    name: \"syntax-jsx\",\n\n    manipulateOptions(opts, parserOpts) {\n      if (!process.env.BABEL_8_BREAKING) {\n        // If the Typescript plugin already ran, it will have decided whether\n        // or not this is a TSX file.\n        if (\n          parserOpts.plugins.some(\n            p => (Array.isArray(p) ? p[0] : p) === \"typescript\",\n          )\n        ) {\n          return;\n        }\n      }\n\n      parserOpts.plugins.push(\"jsx\");\n    },\n  };\n});\n", "function assert(expr, message) {\n  if(!Boolean(expr)) {\n    throw new Error(message || 'unknown assertion error');\n  }\n}\n\nmodule.exports = assert;\n", "import assert from \"node:assert\";\nimport {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { Scope, HubInterface } from \"@babel/traverse\";\n\n/**\n * A class to track and accumulate mutations to the AST that will eventually\n * output a new require/import statement list.\n */\nexport default class ImportBuilder {\n  private _statements: t.Statement[] = [];\n  private _resultName: t.Identifier | t.MemberExpression = null;\n\n  declare _scope: Scope;\n  declare _hub: HubInterface;\n  private _importedSource: string;\n\n  constructor(importedSource: string, scope: Scope, hub: HubInterface) {\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName,\n    };\n  }\n\n  import() {\n    this._statements.push(\n      importDeclaration([], stringLiteral(this._importedSource)),\n    );\n    return this;\n  }\n\n  require() {\n    this._statements.push(\n      expressionStatement(\n        callExpression(identifier(\"require\"), [\n          stringLiteral(this._importedSource),\n        ]),\n      ),\n    );\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n  default(name: string) {\n    const id = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importDefaultSpecifier(id)];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n  named(name: string, importName: string) {\n    if (importName === \"default\") return this.default(name);\n\n    const id = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importSpecifier(id, identifier(importName))];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  var(name: string) {\n    const id = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n    if (statement.type !== \"ExpressionStatement\") {\n      assert(this._resultName);\n      statement = expressionStatement(this._resultName);\n      this._statements.push(statement);\n    }\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [\n      variableDeclarator(id, statement.expression),\n    ]);\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee: t.Expression) {\n    const statement = this._statements[this._statements.length - 1];\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      assert(statement.declarations.length === 1);\n      statement.declarations[0].init = callExpression(callee, [\n        statement.declarations[0].init,\n      ]);\n    } else {\n      assert.fail(\"Unexpected type.\");\n    }\n    return this;\n  }\n\n  prop(name: string) {\n    const statement = this._statements[this._statements.length - 1];\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(\n        statement.expression,\n        identifier(name),\n      );\n    } else if (statement.type === \"VariableDeclaration\") {\n      assert(statement.declarations.length === 1);\n      statement.declarations[0].init = memberExpression(\n        statement.declarations[0].init,\n        identifier(name),\n      );\n    } else {\n      assert.fail(\"Unexpected type:\" + statement.type);\n    }\n    return this;\n  }\n\n  read(name: string) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n}\n", "import type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\n/**\n * A small utility to check if a file qualifies as a module.\n */\nexport default function isModule(path: NodePath<t.Program>) {\n  return path.node.sourceType === \"module\";\n}\n", "import assert from \"node:assert\";\nimport {\n  identifier,\n  importSpecifier,\n  numericLiteral,\n  sequenceExpression,\n  isImportDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Scope, HubInterface } from \"@babel/traverse\";\n\nimport ImportBuilder from \"./import-builder.ts\";\nimport isModule from \"./is-module.ts\";\n\nexport type ImportOptions = {\n  /**\n   * The module being referenced.\n   */\n  importedSource: string | null;\n  /**\n   * The type of module being imported:\n   *\n   *  * 'es6'      - An ES6 module.\n   *  * 'commonjs' - A CommonJS module. (Default)\n   */\n  importedType: \"es6\" | \"commonjs\";\n  /**\n   * The type of interop behavior for namespace/default/named when loading\n   * CommonJS modules.\n   *\n   * ## 'babel' (Default)\n   *\n   * Load using Babel's interop.\n   *\n   * If '.__esModule' is true, treat as 'compiled', else:\n   *\n   * * Namespace: A copy of the module.exports with .default\n   *     populated by the module.exports object.\n   * * Default: The module.exports value.\n   * * Named: The .named property of module.exports.\n   *\n   * The 'ensureLiveReference' has no effect on the liveness of these.\n   *\n   * ## 'compiled'\n   *\n   * Assume the module is ES6 compiled to CommonJS. Useful to avoid injecting\n   * interop logic if you are confident that the module is a certain format.\n   *\n   * * Namespace: The root module.exports object.\n   * * Default: The .default property of the namespace.\n   * * Named: The .named property of the namespace.\n   *\n   * Will return erroneous results if the imported module is _not_ compiled\n   * from ES6 with Babel.\n   *\n   * ## 'uncompiled'\n   *\n   * Assume the module is _not_ ES6 compiled to CommonJS. Used a simplified\n   * access pattern that doesn't require additional function calls.\n   *\n   * Will return erroneous results if the imported module _is_ compiled\n   * from ES6 with Babel.\n   *\n   * * Namespace: The module.exports object.\n   * * Default: The module.exports object.\n   * * Named: The .named property of module.exports.\n   */\n  importedInterop: \"babel\" | \"node\" | \"compiled\" | \"uncompiled\";\n  /**\n   * The type of CommonJS interop included in the environment that will be\n   * loading the output code.\n   *\n   *  * 'babel' - CommonJS modules load with Babel's interop. (Default)\n   *  * 'node'  - CommonJS modules load with Node's interop.\n   *\n   * See descriptions in 'importedInterop' for more details.\n   */\n  importingInterop: \"babel\" | \"node\";\n  /**\n   * Define whether we explicitly care that the import be a live reference.\n   * Only applies when importing default and named imports, not the namespace.\n   *\n   *  * true  - Force imported values to be live references.\n   *  * false - No particular requirements. Keeps the code simplest. (Default)\n   */\n  ensureLiveReference: boolean;\n  /**\n   * Define if we explicitly care that the result not be a property reference.\n   *\n   *  * true  - Force calls to exclude context. Useful if the value is going to\n   *            be used as function callee.\n   *  * false - No particular requirements for context of the access. (Default)\n   */\n  ensureNoContext: boolean;\n  /**\n   * Define whether the import should be loaded before or after the existing imports.\n   * \"after\" is only allowed inside ECMAScript modules, since it's not possible to\n   * reliably pick the location _after_ require() calls but _before_ other code in CJS.\n   */\n  importPosition: \"before\" | \"after\";\n\n  nameHint?: string;\n  blockHoist?: number;\n};\n\n/**\n * A general helper classes add imports via transforms. See README for usage.\n */\nexport default class ImportInjector {\n  /**\n   * The path used for manipulation.\n   */\n  declare _programPath: NodePath<t.Program>;\n\n  /**\n   * The scope used to generate unique variable names.\n   */\n  declare _programScope: Scope;\n\n  /**\n   * The file used to inject helpers and resolve paths.\n   */\n  declare _hub: HubInterface;\n\n  /**\n   * The default options to use with this instance when imports are added.\n   */\n  _defaultOpts: ImportOptions = {\n    importedSource: null,\n    importedType: \"commonjs\",\n    importedInterop: \"babel\",\n    importingInterop: \"babel\",\n    ensureLiveReference: false,\n    ensureNoContext: false,\n    importPosition: \"before\",\n  };\n\n  constructor(\n    path: NodePath,\n    importedSource?: string,\n    opts?: Partial<ImportOptions>,\n  ) {\n    const programPath = path.find(p => p.isProgram()) as NodePath<t.Program>;\n\n    this._programPath = programPath;\n    this._programScope = programPath.scope;\n    this._hub = programPath.hub;\n\n    this._defaultOpts = this._applyDefaults(importedSource, opts, true);\n  }\n\n  addDefault(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this.addNamed(\"default\", importedSourceIn, opts);\n  }\n\n  addNamed(\n    importName: string,\n    importedSourceIn: string,\n    opts: Partial<ImportOptions>,\n  ) {\n    assert(typeof importName === \"string\");\n\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      importName,\n    );\n  }\n\n  addNamespace(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      null,\n    );\n  }\n\n  addSideEffect(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      void 0,\n    );\n  }\n\n  _applyDefaults(\n    importedSource: string | Partial<ImportOptions>,\n    opts: Partial<ImportOptions> | undefined,\n    isInit = false,\n  ) {\n    let newOpts: ImportOptions;\n    if (typeof importedSource === \"string\") {\n      newOpts = { ...this._defaultOpts, importedSource, ...opts };\n    } else {\n      assert(!opts, \"Unexpected secondary arguments.\");\n      newOpts = { ...this._defaultOpts, ...importedSource };\n    }\n\n    if (!isInit && opts) {\n      if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;\n      if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;\n    }\n    return newOpts;\n  }\n\n  _generateImport(\n    opts: Partial<ImportOptions>,\n    importName: string | null | undefined,\n  ) {\n    const isDefault = importName === \"default\";\n    const isNamed = !!importName && !isDefault;\n    const isNamespace = importName === null;\n\n    const {\n      importedSource,\n      importedType,\n      importedInterop,\n      importingInterop,\n      ensureLiveReference,\n      ensureNoContext,\n      nameHint,\n      importPosition,\n\n      // Not meant for public usage. Allows code that absolutely must control\n      // ordering to set a specific hoist value on the import nodes.\n      // This is ignored when \"importPosition\" is \"after\".\n      blockHoist,\n    } = opts;\n\n    // Provide a hint for generateUidIdentifier for the local variable name\n    // to use for the import, if the code will generate a simple assignment\n    // to a variable.\n    let name = nameHint || importName;\n\n    const isMod = isModule(this._programPath);\n    const isModuleForNode = isMod && importingInterop === \"node\";\n    const isModuleForBabel = isMod && importingInterop === \"babel\";\n\n    if (importPosition === \"after\" && !isMod) {\n      throw new Error(`\"importPosition\": \"after\" is only supported in modules`);\n    }\n\n    const builder = new ImportBuilder(\n      importedSource,\n      this._programScope,\n      this._hub,\n    );\n\n    if (importedType === \"es6\") {\n      if (!isModuleForNode && !isModuleForBabel) {\n        throw new Error(\"Cannot import an ES6 module from CommonJS\");\n      }\n\n      // import * as namespace from ''; namespace\n      // import def from ''; def\n      // import { named } from ''; named\n      builder.import();\n      if (isNamespace) {\n        builder.namespace(nameHint || importedSource);\n      } else if (isDefault || isNamed) {\n        builder.named(name, importName);\n      }\n    } else if (importedType !== \"commonjs\") {\n      throw new Error(`Unexpected interopType \"${importedType}\"`);\n    } else if (importedInterop === \"babel\") {\n      if (isModuleForNode) {\n        // import _tmp from ''; var namespace = interopRequireWildcard(_tmp); namespace\n        // import _tmp from ''; var def = interopRequireDefault(_tmp).default; def\n        // import _tmp from ''; _tmp.named\n        name = name !== \"default\" ? name : importedSource;\n        const es6Default = `${importedSource}$es6Default`;\n\n        builder.import();\n        if (isNamespace) {\n          builder\n            .default(es6Default)\n            .var(name || importedSource)\n            .wildcardInterop();\n        } else if (isDefault) {\n          if (ensureLiveReference) {\n            builder\n              .default(es6Default)\n              .var(name || importedSource)\n              .defaultInterop()\n              .read(\"default\");\n          } else {\n            builder\n              .default(es6Default)\n              .var(name)\n              .defaultInterop()\n              .prop(importName);\n          }\n        } else if (isNamed) {\n          builder.default(es6Default).read(importName);\n        }\n      } else if (isModuleForBabel) {\n        // import * as namespace from ''; namespace\n        // import def from ''; def\n        // import { named } from ''; named\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = interopRequireWildcard(require(''));\n        // var def = interopRequireDefault(require('')).default; def\n        // var named = require('').named; named\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource).wildcardInterop();\n        } else if ((isDefault || isNamed) && ensureLiveReference) {\n          if (isDefault) {\n            name = name !== \"default\" ? name : importedSource;\n            builder.var(name).read(importName);\n            builder.defaultInterop();\n          } else {\n            builder.var(importedSource).read(importName);\n          }\n        } else if (isDefault) {\n          builder.var(name).defaultInterop().prop(importName);\n        } else if (isNamed) {\n          builder.var(name).prop(importName);\n        }\n      }\n    } else if (importedInterop === \"compiled\") {\n      if (isModuleForNode) {\n        // import namespace from ''; namespace\n        // import namespace from ''; namespace.default\n        // import namespace from ''; namespace.named\n\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        // import * as namespace from ''; namespace\n        // import def from ''; def\n        // import { named } from ''; named\n        // Note: These lookups will break if the module has no __esModule set,\n        // hence the warning that 'compiled' will not work on standard CommonJS.\n\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = require(''); namespace\n        // var namespace = require(''); namespace.default\n        // var namespace = require(''); namespace.named\n        // var named = require('').named;\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault || isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.prop(importName).var(name);\n          }\n        }\n      }\n    } else if (importedInterop === \"uncompiled\") {\n      if (isDefault && ensureLiveReference) {\n        throw new Error(\"No live reference for commonjs default\");\n      }\n\n      if (isModuleForNode) {\n        // import namespace from ''; namespace\n        // import def from ''; def;\n        // import namespace from ''; namespace.named\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        // import namespace from '';\n        // import def from '';\n        // import { named } from ''; named;\n        // Note: These lookups will break if the module has __esModule set,\n        // hence the warning that 'uncompiled' will not work on ES6 transpiled\n        // to CommonJS.\n\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = require(''); namespace\n        // var def = require(''); def\n        // var namespace = require(''); namespace.named\n        // var named = require('').named;\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault) {\n          builder.var(name);\n        } else if (isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.var(name).prop(importName);\n          }\n        }\n      }\n    } else {\n      throw new Error(`Unknown importedInterop \"${importedInterop}\".`);\n    }\n\n    const { statements, resultName } = builder.done();\n\n    this._insertStatements(statements, importPosition, blockHoist);\n\n    if (\n      (isDefault || isNamed) &&\n      ensureNoContext &&\n      resultName.type !== \"Identifier\"\n    ) {\n      return sequenceExpression([numericLiteral(0), resultName]);\n    }\n    return resultName;\n  }\n\n  _insertStatements(\n    statements: t.Statement[],\n    importPosition = \"before\",\n    blockHoist = 3,\n  ) {\n    if (importPosition === \"after\") {\n      if (this._insertStatementsAfter(statements)) return;\n    } else {\n      if (this._insertStatementsBefore(statements, blockHoist)) return;\n    }\n\n    this._programPath.unshiftContainer(\"body\", statements);\n  }\n\n  _insertStatementsBefore(statements: t.Statement[], blockHoist: number) {\n    if (\n      statements.length === 1 &&\n      isImportDeclaration(statements[0]) &&\n      isValueImport(statements[0])\n    ) {\n      const firstImportDecl = this._programPath\n        .get(\"body\")\n        .find((p): p is NodePath<t.ImportDeclaration> => {\n          return p.isImportDeclaration() && isValueImport(p.node);\n        });\n\n      if (\n        firstImportDecl?.node.source.value === statements[0].source.value &&\n        maybeAppendImportSpecifiers(firstImportDecl.node, statements[0])\n      ) {\n        return true;\n      }\n    }\n\n    statements.forEach(node => {\n      // @ts-expect-error handle _blockHoist\n      node._blockHoist = blockHoist;\n    });\n\n    const targetPath = this._programPath.get(\"body\").find(p => {\n      // @ts-expect-error todo(flow->ts): avoid mutations\n      const val = p.node._blockHoist;\n      return Number.isFinite(val) && val < 4;\n    });\n\n    if (targetPath) {\n      targetPath.insertBefore(statements);\n      return true;\n    }\n\n    return false;\n  }\n\n  _insertStatementsAfter(statements: t.Statement[]): boolean {\n    const statementsSet = new Set(statements);\n    const importDeclarations: Map<string, t.ImportDeclaration[]> = new Map();\n\n    for (const statement of statements) {\n      if (isImportDeclaration(statement) && isValueImport(statement)) {\n        const source = statement.source.value;\n        if (!importDeclarations.has(source)) importDeclarations.set(source, []);\n        importDeclarations.get(source).push(statement);\n      }\n    }\n\n    let lastImportPath = null;\n    for (const bodyStmt of this._programPath.get(\"body\")) {\n      if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {\n        lastImportPath = bodyStmt;\n\n        const source = bodyStmt.node.source.value;\n        const newImports = importDeclarations.get(source);\n        if (!newImports) continue;\n\n        for (const decl of newImports) {\n          if (!statementsSet.has(decl)) continue;\n          if (maybeAppendImportSpecifiers(bodyStmt.node, decl)) {\n            statementsSet.delete(decl);\n          }\n        }\n      }\n    }\n\n    if (statementsSet.size === 0) return true;\n\n    if (lastImportPath) lastImportPath.insertAfter(Array.from(statementsSet));\n\n    return !!lastImportPath;\n  }\n}\n\nfunction isValueImport(node: t.ImportDeclaration) {\n  return node.importKind !== \"type\" && node.importKind !== \"typeof\";\n}\n\nfunction hasNamespaceImport(node: t.ImportDeclaration) {\n  return (\n    (node.specifiers.length === 1 &&\n      node.specifiers[0].type === \"ImportNamespaceSpecifier\") ||\n    (node.specifiers.length === 2 &&\n      node.specifiers[1].type === \"ImportNamespaceSpecifier\")\n  );\n}\n\nfunction hasDefaultImport(node: t.ImportDeclaration) {\n  return (\n    node.specifiers.length > 0 &&\n    node.specifiers[0].type === \"ImportDefaultSpecifier\"\n  );\n}\n\nfunction maybeAppendImportSpecifiers(\n  target: t.ImportDeclaration,\n  source: t.ImportDeclaration,\n): boolean {\n  if (!target.specifiers.length) {\n    target.specifiers = source.specifiers;\n    return true;\n  }\n  if (!source.specifiers.length) return true;\n\n  if (hasNamespaceImport(target) || hasNamespaceImport(source)) return false;\n\n  if (hasDefaultImport(source)) {\n    if (hasDefaultImport(target)) {\n      source.specifiers[0] = importSpecifier(\n        source.specifiers[0].local,\n        identifier(\"default\"),\n      );\n    } else {\n      target.specifiers.unshift(source.specifiers.shift());\n    }\n  }\n\n  target.specifiers.push(...source.specifiers);\n\n  return true;\n}\n", "import ImportInjector, { type ImportOptions } from \"./import-injector.ts\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport { ImportInjector };\n\nexport { default as isModule } from \"./is-module.ts\";\n\nexport function addDefault(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addDefault(importedSource, opts);\n}\n\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<\n    Partial<ImportOptions>,\n    \"ensureLiveReference\" | \"ensureNoContext\"\n  >,\n): t.Identifier;\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<Partial<ImportOptions>, \"ensureLiveReference\"> & {\n    ensureLiveReference: true;\n  },\n): t.MemberExpression;\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<Partial<ImportOptions>, \"ensureNoContext\"> & {\n    ensureNoContext: true;\n  },\n): t.SequenceExpression;\n/**\n * add a named import to the program path of given path\n *\n * @export\n * @param {NodePath} path The starting path to find a program path\n * @param {string} name The name of the generated binding. Babel will prefix it with `_`\n * @param {string} importedSource The source of the import\n * @param {Partial<ImportOptions>} [opts]\n * @returns {t.Identifier | t.MemberExpression | t.SequenceExpression} If opts.ensureNoContext is true, returns a SequenceExpression,\n *   else if opts.ensureLiveReference is true, returns a MemberExpression, else returns an Identifier\n */\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addNamed(name, importedSource, opts);\n}\nexport { addNamed };\n\nexport function addNamespace(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addNamespace(importedSource, opts);\n}\n\nexport function addSideEffect(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addSideEffect(importedSource, opts);\n}\n", "[\n\t\"a\",\n\t\"abbr\",\n\t\"address\",\n\t\"area\",\n\t\"article\",\n\t\"aside\",\n\t\"audio\",\n\t\"b\",\n\t\"base\",\n\t\"bdi\",\n\t\"bdo\",\n\t\"blockquote\",\n\t\"body\",\n\t\"br\",\n\t\"button\",\n\t\"canvas\",\n\t\"caption\",\n\t\"cite\",\n\t\"code\",\n\t\"col\",\n\t\"colgroup\",\n\t\"data\",\n\t\"datalist\",\n\t\"dd\",\n\t\"del\",\n\t\"details\",\n\t\"dfn\",\n\t\"dialog\",\n\t\"div\",\n\t\"dl\",\n\t\"dt\",\n\t\"em\",\n\t\"embed\",\n\t\"fieldset\",\n\t\"figcaption\",\n\t\"figure\",\n\t\"footer\",\n\t\"form\",\n\t\"h1\",\n\t\"h2\",\n\t\"h3\",\n\t\"h4\",\n\t\"h5\",\n\t\"h6\",\n\t\"head\",\n\t\"header\",\n\t\"hgroup\",\n\t\"hr\",\n\t\"html\",\n\t\"i\",\n\t\"iframe\",\n\t\"img\",\n\t\"input\",\n\t\"ins\",\n\t\"kbd\",\n\t\"label\",\n\t\"legend\",\n\t\"li\",\n\t\"link\",\n\t\"main\",\n\t\"map\",\n\t\"mark\",\n\t\"math\",\n\t\"menu\",\n\t\"menuitem\",\n\t\"meta\",\n\t\"meter\",\n\t\"nav\",\n\t\"noscript\",\n\t\"object\",\n\t\"ol\",\n\t\"optgroup\",\n\t\"option\",\n\t\"output\",\n\t\"p\",\n\t\"param\",\n\t\"picture\",\n\t\"pre\",\n\t\"progress\",\n\t\"q\",\n\t\"rb\",\n\t\"rp\",\n\t\"rt\",\n\t\"rtc\",\n\t\"ruby\",\n\t\"s\",\n\t\"samp\",\n\t\"script\",\n\t\"search\",\n\t\"section\",\n\t\"select\",\n\t\"slot\",\n\t\"small\",\n\t\"source\",\n\t\"span\",\n\t\"strong\",\n\t\"style\",\n\t\"sub\",\n\t\"summary\",\n\t\"sup\",\n\t\"svg\",\n\t\"table\",\n\t\"tbody\",\n\t\"td\",\n\t\"template\",\n\t\"textarea\",\n\t\"tfoot\",\n\t\"th\",\n\t\"thead\",\n\t\"time\",\n\t\"title\",\n\t\"tr\",\n\t\"track\",\n\t\"u\",\n\t\"ul\",\n\t\"var\",\n\t\"video\",\n\t\"wbr\"\n]\n", "'use strict';\nmodule.exports = require('./html-tags.json');\n", "[\n\t\"a\",\n\t\"altGlyph\",\n\t\"altGlyphDef\",\n\t\"altGlyphItem\",\n\t\"animate\",\n\t\"animateColor\",\n\t\"animateMotion\",\n\t\"animateTransform\",\n\t\"circle\",\n\t\"clipPath\",\n\t\"color-profile\",\n\t\"cursor\",\n\t\"defs\",\n\t\"desc\",\n\t\"ellipse\",\n\t\"feBlend\",\n\t\"feColorMatrix\",\n\t\"feComponentTransfer\",\n\t\"feComposite\",\n\t\"feConvolveMatrix\",\n\t\"feDiffuseLighting\",\n\t\"feDisplacementMap\",\n\t\"feDistantLight\",\n\t\"feFlood\",\n\t\"feFuncA\",\n\t\"feFuncB\",\n\t\"feFuncG\",\n\t\"feFuncR\",\n\t\"feGaussianBlur\",\n\t\"feImage\",\n\t\"feMerge\",\n\t\"feMergeNode\",\n\t\"feMorphology\",\n\t\"feOffset\",\n\t\"fePointLight\",\n\t\"feSpecularLighting\",\n\t\"feSpotLight\",\n\t\"feTile\",\n\t\"feTurbulence\",\n\t\"filter\",\n\t\"font\",\n\t\"font-face\",\n\t\"font-face-format\",\n\t\"font-face-name\",\n\t\"font-face-src\",\n\t\"font-face-uri\",\n\t\"foreignObject\",\n\t\"g\",\n\t\"glyph\",\n\t\"glyphRef\",\n\t\"hkern\",\n\t\"image\",\n\t\"line\",\n\t\"linearGradient\",\n\t\"marker\",\n\t\"mask\",\n\t\"metadata\",\n\t\"missing-glyph\",\n\t\"mpath\",\n\t\"path\",\n\t\"pattern\",\n\t\"polygon\",\n\t\"polyline\",\n\t\"radialGradient\",\n\t\"rect\",\n\t\"script\",\n\t\"set\",\n\t\"stop\",\n\t\"style\",\n\t\"svg\",\n\t\"switch\",\n\t\"symbol\",\n\t\"text\",\n\t\"textPath\",\n\t\"title\",\n\t\"tref\",\n\t\"tspan\",\n\t\"use\",\n\t\"view\",\n\t\"vkern\"\n]", "module.exports = require( './svg-tags.json' );", null, null, null, null, null],
  "mappings": "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G,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,IAAG,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,IAAG,KAAI,MAAK,KAAI,MAAK,MAAK,GAAE,IAAI;AAEhkD,QAAMC,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,MAAK,GAAE,GAAE,IAAG,OAAM,IAAG,MAAK,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,OAAM,GAAE,MAAK,GAA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CjC;MACF;IACF;AAEO,aAASO,sBACdN,MACAC,MACmC;AACnCH,aAAO,mBAAmBE,MAAMC,IAAI;IACtC;AACO,aAASM,2BACdP,MACAC,MACwC;AACxCH,aAAO,wBAAwBE,MAAMC,IAAI;IAC3C;AACO,aAASO,uBACdR,MACAC,MACoC;AACpCH,aAAO,oBAAoBE,MAAMC,IAAI;IACvC;AACO,aAASQ,2BACdT,MACAC,MACwC;AACxCH,aAAO,wBAAwBE,MAAMC,IAAI;IAC3C;AACO,aAASS,gBACdV,MACAC,MAC6B;AAC7BH,aAAO,aAAaE,MAAMC,IAAI;IAChC;AACO,aAASU,uBACdX,MACAC,MACoC;AACpCH,aAAO,oBAAoBE,MAAMC,IAAI;IACvC;AACO,aAASW,qBACdZ,MACAC,MACkC;AAClCH,aAAO,kBAAkBE,MAAMC,IAAI;IACrC;AACO,aAASY,qBACdb,MACAC,MACkC;AAClCH,aAAO,kBAAkBE,MAAMC,IAAI;IACrC;AACO,aAASa,qBACdd,MACAC,MACkC;AAClCH,aAAO,kBAAkBE,MAAMC,IAAI;IACrC;AACO,aAASc,kBACdf,MACAC,MAC+B;AAC/BH,aAAO,eAAeE,MAAMC,IAAI;IAClC;AACO,aAASe,4BACdhB,MACAC,MACyC;AACzCH,aAAO,yBAAyBE,MAAMC,IAAI;IAC5C;AACO,aAASgB,wBACdjB,MACAC,MACqC;AACrCH,aAAO,qBAAqBE,MAAMC,IAAI;IACxC;AACO,aAASiB,wBACdlB,MACAC,MACqC;AACrCH,aAAO,qBAAqBE,MAAMC,IAAI;IACxC;AACO,aAASkB,uBACdnB,MACAC,MACoC;AACpCH,aAAO,oBAAoBE,MAAMC,IAAI;IACvC;AACO,aAASmB,qBACdpB,MACAC,MACkC;AAClCH,aAAO,kBAAkBE,MAAMC,IAAI;IACrC;AACO,aAASoB,0BACdrB,MACAC,MACuC;AACvCH,aAAO,uBAAuBE,MAAMC,IAAI;IAC1C;AACO,aAASqB,WACdtB,MACAC,MACwB;AACxBH,aAAO,QAAQE,MAAMC,IAAI;IAC3B;AACO,aAASsB,qBACdvB,MACAC,MACkC;AAClCH,aA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dtM,MACAC,MACuC;AACvCH,aAAO,uBAAuBE,MAAMC,IAAI;IAC1C;AACO,aAASsM,wBACdvM,MACAC,MACqC;AACrCH,aAAO,qBAAqBE,MAAMC,IAAI;IACxC;AACO,aAASuM,uBACdxM,MACAC,MACoC;AACpCH,aAAO,oBAAoBE,MAAMC,IAAI;IACvC;AACO,aAASwM,mBACdzM,MACAC,MACgC;AAChCH,aAAO,gBAAgBE,MAAMC,IAAI;IACnC;AACO,aAASyM,uBACd1M,MACAC,MACoC;AACpCH,aAAO,oBAAoBE,MAAMC,IAAI;IACvC;AACO,aAAS0M,sBACd3M,MACAC,MACmC;AACnCH,aAAO,mBAAmBE,MAAMC,IAAI;IACtC;AACO,aAAS2M,yBACd5M,MACAC,MACsC;AACtCH,aAAO,sBAAsBE,MAAMC,IAAI;IACzC;AACO,aAAS4M,qBACd7M,MACAC,MACkC;AAClCH,aAAO,kBAAkBE,MAAMC,IAAI;IACrC;AACO,aAAS6M,oBACd9M,MACAC,MACiC;AACjCH,aAAO,iBAAiBE,MAAMC,IAAI;IACpC;AACO,aAAS8M,sBACd/M,MACAC,MACmC;AACnCH,aAAO,mBAAmBE,MAAMC,IAAI;IACtC;AACO,aAAS+M,sBACdhN,MACAC,MACmC;AACnCH,aAAO,mBAAmBE,MAAMC,IAAI;IACtC;AACO,aAASgN,sBACdjN,MACAC,MACmC;AACnCH,aAAO,mBAAmBE,MAAMC,IAAI;IACtC;AACO,aAASiN,sBACdlN,MACAC,MACmC;AACnCH,aAAO,mBAAmBE,MAAMC,IAAI;IACtC;AACO,aAASkN,yBACdnN,MACAC,MACsC;AACtCH,aAAO,sBAAsBE,MAAMC,IAAI;IACzC;AACO,aAASmN,uBACdpN,MACAC,MACoC;AACpCH,aAAO,oBAAoBE,MAAMC,IAAI;IACvC;AACO,aAASoN,oBACdrN,MACAC,MACiC;AACjCH,aAAO,iBAAiBE,MAAMC,IAAI;IACpC;AACO,aAASqN,iBACdtN,MACAC,MAC8B;AAC9BH,aAAO,cAAcE,MAAMC,IAAI;IACjC;AACO,aAASsN,qBACdvN,MACAC,MACkC;AAClCH,aAAO,k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G,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,IAAG,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAA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",
  "names": ["shallowEqual", "actual", "expected", "keys", "Object", "key", "warnings", "Set", "deprecationWarning", "oldName", "newName", "prefix", "cacheKey", "has", "add", "internal", "trace", "captureShortStackTrace", "console", "warn", "skip", "length", "stackTraceLimit", "prepareStackTrace", "Error", "stackTrace", "err", "stack", "shortStackTrace", "slice", "test", "getFileName", "map", "frame", "join", "_shallowEqual", "require", "_deprecationWarning", "isArrayExpression", "node", "opts", "type", "shallowEqual", "isAssignmentExpression", "isBinaryExpression", "isInterpreterDirective", "isDirective", "isDirectiveLiteral", "isBlockStatement", "isBreakStatement", "isCallExpression", "isCatchClause", "isConditionalExpression", "isContinueStatement", "isDebuggerStatement", "isDoWhileStatement", "isEmptyStatement", "isExpressionStatement", "isFile", "isForInStatement", "isForStatement", "isFunctionDeclaration", "isFunctionExpression", "isIdentifier", "isIfStatement", "isLabeledStatement", "isStringLiteral", "isNumericLiteral", "isNullLiteral", "isBooleanLiteral", "isRegExpLiteral", "isLogicalExpression", "isMemberExpression", "isNewExpression", "isProgram", "isObjectExpression", "isObjectMethod", "isObjectProperty", "isRestElement", "isReturnStatement", "isSequenceExpression", "isParenthesizedExpression", "isSwitchCase", "isSwitchStatement", "isThisExpression", "isThrowStatement", "isTryStatement", "isUnaryExpression", "isUpdateExpression", "isVariableDeclaration", "isVariableDeclarator", "isWhileStatement", "isWithStatement", "isAssignmentPattern", "isArrayPattern", "isArrowFunctionExpression", "isClassBody", "isClassExpression", "isClassDeclaration", "isExportAllDeclaration", "isExportDefaultDeclaration", "isExportNamedDeclaration", "isExportSpecifier", "isForOfStatement", "isImportDeclaration", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isImportSpecifier", "isImportExpression", "isMetaProperty", "isClassMethod", "isObjectPattern", "isSpreadElement", "isSuper", "isTaggedTemplateExpression", "isTemplateElement", "isTemplateLiteral", "isYieldExpression", "isAwaitExpression", "isImport", "isBigIntLiteral", "isExportNamespaceSpecifier", "isOptionalMemberExpression", "isOptionalCallExpression", "isClassProperty", "isClassAccessorProperty", "isClassPrivateProperty", "isClassPrivateMethod", "isPrivateName", "isStaticBlock", "isImportAttribute", "isAnyTypeAnnotation", "isArrayTypeAnnotation", "isBooleanTypeAnnotation", "isBooleanLiteralTypeAnnotation", "isNullLiteralTypeAnnotation", "isClassImplements", "isDeclareClass", "isDeclareFunction", "isDeclareInterface", "isDeclareModule", "isDeclareModuleExports", "isDeclareTypeAlias", "isDeclareOpaqueType", "isDeclareVariable", "isDeclareExportDeclaration", "isDeclareExportAllDeclaration", "isDeclaredPredicate", "isExistsTypeAnnotation", "isFunctionTypeAnnotation", "isFunctionTypeParam", "isGenericTypeAnnotation", "isInferredPredicate", "isInterfaceExtends", "isInterfaceDeclaration", "isInterfaceTypeAnnotation", "isIntersectionTypeAnnotation", "isMixedTypeAnnotation", "isEmptyTypeAnnotation", "isNullableTypeAnnotation", "isNumberLiteralTypeAnnotation", "isNumberTypeAnnotation", "isObjectTypeAnnotation", "isObjectTypeInternalSlot", "isObjectTypeCallProperty", "isObjectTypeIndexer", "isObjectTypeProperty", "isObjectTypeSpreadProperty", "isOpaqueType", "isQualifiedTypeIdentifier", "isStringLiteralTypeAnnotation", "isStringTypeAnnotation", "isSymbolTypeAnnotation", "isThisTypeAnnotation", "isTupleTypeAnnotation", "isTypeofTypeAnnotation", "isTypeAlias", "isTypeAnnotation", "isTypeCastExpression", "isTypeParameter", "isTypeParameterDeclaration", "isTypeParameterInstantiation", "isUnionTypeAnnotation", "isVariance", "isVoidTypeAnnotation", "isEnumDeclaration", "isEnumBooleanBody", "isEnumNumberBody", "isEnumStringBody", "isEnumSymbolBody", "isEnumBooleanMember", "isEnumNumberMember", "isEnumStringMember", "isEnumDefaultedMember", "isIndexedAccessType", "isOptionalIndexedAccessType", "isJSXAttribute", "isJSXClosingElement", "isJSXElement", "isJSXEmptyExpression", "isJSXExpressionContainer", "isJSXSpreadChild", "isJSXIdentifier", "isJSXMemberExpression", "isJSXNamespacedName", "isJSXOpeningElement", "isJSXSpreadAttribute", "isJSXText", "isJSXFragment", "isJSXOpeningFragment", "isJSXClosingFragment", "isNoop", "isPlaceholder", "isV8IntrinsicIdentifier", "isArgumentPlaceholder", "isBindExpression", "isDecorator", "isDoExpression", "isExportDefaultSpecifier", "isRecordExpression", "isTupleExpression", "isDecimalLiteral", "isModuleExpression", "isTopicReference", "isPipelineTopicExpression", "isPipelineBareFunction", "isPipelinePrimaryTopicReference", "isVoidPattern", "isTSParameterProperty", "isTSDeclareFunction", "isTSDeclareMethod", "isTSQualifiedName", "isTSCallSignatureDeclaration", "isTSConstructSignatureDeclaration", "isTSPropertySignature", "isTSMethodSignature", "isTSIndexSignature", "isTSAnyKeyword", "isTSBooleanKeyword", "isTSBigIntKeyword", "isTSIntrinsicKeyword", "isTSNeverKeyword", "isTSNullKeyword", "isTSNumberKeyword", "isTSObjectKeyword", "isTSStringKeyword", "isTSSymbolKeyword", "isTSUndefinedKeyword", "isTSUnknownKeyword", "isTSVoidKeyword", "isTSThisType", "isTSFunctionType", "isTSConstructorType", "isTSTypeReference", "isTSTypePredicate", "isTSTypeQuery", "isTSTypeLiteral", "isTSArrayType", "isTSTupleType", "isTSOptionalType", "isTSRestType", "isTSNamedTupleMember", "isTSUnionType", "isTSIntersectionType", "isTSConditionalType", "isTSInferType", "isTSParenthesizedType", "isTSTypeOperator", "isTSIndexedAccessType", "isTSMappedType", "isTSTemplateLiteralType", "isTSLiteralType", "isTSExpressionWithTypeArguments", "isTSInterfaceDeclaration", "isTSInterfaceBody", "isTSTypeAliasDeclaration", "isTSInstantiationExpression", "isTSAsExpression", "isTSSatisfiesExpression", "isTSTypeAssertion", "isTSEnumBody", "isTSEnumDeclaration", "isTSEnumMember", "isTSModuleDeclaration", "isTSModuleBlock", "isTSImportType", "isTSImportEqualsDeclaration", "isTSExternalModuleReference", "isTSNonNullExpression", "isTSExportAssignment", "isTSNamespaceExportDeclaration", "isTSTypeAnnotation", "isTSTypeParameterInstantiation", "isTSTypeParameterDeclaration", "isTSTypeParameter", "isStandardized", "expectedNode", "isExpression", "isBinary", "isScopable", "isBlockParent", "isBlock", "isStatement", "isTerminatorless", "isCompletionStatement", "isConditional", "isLoop", "isWhile", "isExpressionWrapper", "isFor", "isForXStatement", "isFunction", "isFunctionParent", "isPureish", "isDeclaration", "isFunctionParameter", "isPatternLike", "isLVal", "isTSEntityName", "isLiteral", "isImmutable", "isUserWhitespacable", "isMethod", "isObjectMember", "isProperty", "isUnaryLike", "isPattern", "isClass", "isImportOrExportDeclaration", "isExportDeclaration", "isModuleSpecifier", "isAccessor", "isPrivate", "isFlow", "isFlowType", "isFlowBaseAnnotation", "isFlowDeclaration", "isFlowPredicate", "isEnumBody", "isEnumMember", "isJSX", "isMiscellaneous", "isTypeScript", "isTSTypeElement", "isTSType", "isTSBaseType", "isNumberLiteral", "deprecationWarning", "isRegexLiteral", "isRestProperty", "isSpreadProperty", "isModuleDeclaration", "_index", "require", "isMemberExpressionLike", "node", "isMemberExpression", "isMetaProperty", "matchesPattern", "member", "match", "allowPartial", "parts", "Array", "isArray", "split", "nodes", "_object", "object", "meta", "push", "property", "length", "i", "j", "value", "isIdentifier", "name", "isStringLiteral", "isThisExpression", "isSuper", "isPrivateName", "id", "_matchesPattern", "require", "buildMatchMemberExpression", "match", "allowPartial", "parts", "split", "member", "matchesPattern", "_buildMatchMemberExpression", "require", "isReactComponent", "buildMatchMemberExpression", "_default", "exports", "default", "isCompatTag", "tagName", "test", "_index", "require", "isType", "nodeType", "targetType", "ALIAS_KEYS", "aliases", "FLIPPED_ALIAS_KEYS", "includes", "_index", "require", "isPlaceholderType", "placeholderType", "targetType", "aliases", "PLACEHOLDERS_ALIAS", "includes", "_shallowEqual", "require", "_isType", "_isPlaceholderType", "_index", "is", "type", "node", "opts", "matches", "isType", "FLIPPED_ALIAS_KEYS", "isPlaceholderType", "expectedNode", "undefined", "shallowEqual", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "RegExp", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "code", "set", "pos", "i", "length", "isIdentifierStart", "test", "String", "fromCharCode", "isIdentifierChar", "isIdentifierName", "name", "isFirst", "cp", "charCodeAt", "trail", "reservedWords", "keyword", "strict", "strictBind", "keywords", "Set", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "_identifier", "require", "_keyword", "_helperValidatorIdentifier", "require", "isValidIdentifier", "name", "reserved", "isKeyword", "isStrictReservedWord", "isIdentifierName", "isDigit", "code", "forbiddenNumericSeparatorSiblings", "decBinOct", "Set", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "type", "input", "pos", "lineStart", "curLine", "errors", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "length", "unterminated", "slice", "charCodeAt", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "String", "fromCharCode", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "exec", "octalStr", "octal", "parseInt", "next", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "radix", "allowNumSeparator", "bailOnError", "start", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "i", "e", "Infinity", "val", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "has", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "indexOf", "invalidCodePoint", "STATEMENT_OR_BLOCK_KEYS", "exports", "FLATTENABLE_KEYS", "FOR_INIT_KEYS", "COMMENT_KEYS", "LOGICAL_OPERATORS", "UPDATE_OPERATORS", "BOOLEAN_NUMBER_BINARY_OPERATORS", "EQUALITY_BINARY_OPERATORS", "COMPARISON_BINARY_OPERATORS", "BOOLEAN_BINARY_OPERATORS", "NUMBER_BINARY_OPERATORS", "BINARY_OPERATORS", "ASSIGNMENT_OPERATORS", "map", "op", "BOOLEAN_UNARY_OPERATORS", "NUMBER_UNARY_OPERATORS", "STRING_UNARY_OPERATORS", "UNARY_OPERATORS", "INHERIT_KEYS", "optional", "force", "BLOCK_SCOPED_SYMBOL", "Symbol", "for", "NOT_LOCAL_BINDING", "_is", "require", "_validate", "VISITOR_KEYS", "exports", "ALIAS_KEYS", "FLIPPED_ALIAS_KEYS", "NODE_FIELDS", "BUILDER_KEYS", "DEPRECATED_KEYS", "NODE_PARENT_VALIDATIONS", "getType", "val", "Array", "isArray", "validate", "validateType", "typeNames", "assertNodeType", "validateOptional", "optional", "validateOptionalType", "arrayOf", "elementType", "chain", "assertValueType", "assertEach", "arrayOfType", "validateArrayOfType", "callback", "childValidator", "process", "env", "BABEL_TYPES_8_BREAKING", "validateChild", "validator", "node", "key", "i", "subKey", "toString", "length", "v", "each", "assertOneOf", "values", "includes", "TypeError", "JSON", "stringify", "oneOf", "allExpandedTypes", "types", "expandedTypes", "Set", "push", "set", "valType", "type", "has", "is", "oneOfNodeTypes", "assertNodeOrValueType", "primitiveType", "oneOfNodeOrValueTypes", "assertShape", "shape", "keys", "Object", "errors", "property", "validateField", "error", "message", "join", "shapeOf", "assertOptionalChainStart", "_current", "current", "callee", "object", "fns", "args", "fn", "chainOf", "Error", "validTypeOpts", "validFieldKeys", "store", "defineAliasedType", "aliases", "opts", "defined", "_store$opts$inherits$", "inherits", "slice", "additional", "filter", "a", "unshift", "defineType", "fields", "getOwnPropertyNames", "field", "def", "default", "deprecated", "visitor", "builder", "k", "deprecatedAlias", "concat", "undefined", "forEach", "alias", "_is", "require", "_isValidIdentifier", "_helperValidatorIdentifier", "_helperStringParser", "_index", "_utils", "defineType", "defineAliasedType", "fields", "elements", "validate", "arrayOf", "assertNodeOrValueType", "default", "process", "env", "BABEL_TYPES_8_BREAKING", "undefined", "visitor", "aliases", "operator", "assertValueType", "Object", "assign", "identifier", "assertOneOf", "ASSIGNMENT_OPERATORS", "pattern", "node", "key", "val", "validator", "is", "left", "oneOf", "assertNodeType", "right", "builder", "BINARY_OPERATORS", "expression", "inOp", "oneOfNodeTypes", "value", "directives", "arrayOfType", "body", "validateArrayOfType", "label", "optional", "callee", "arguments", "typeArguments", "typeParameters", "param", "test", "consequent", "alternate", "program", "comments", "each", "assertEach", "tokens", "type", "init", "update", "functionCommon", "params", "generator", "async", "exports", "functionTypeAnnotationCommon", "returnType", "functionDeclarationCommon", "declare", "id", "predicate", "parent", "inherits", "patternLikeCommon", "typeAnnotation", "decorators", "name", "chain", "isValidIdentifier", "TypeError", "match", "exec", "toString", "parentKey", "nonComp", "computed", "imported", "meta", "isKeyword", "isReservedWord", "deprecatedAlias", "Number", "isFinite", "error", "Error", "flags", "invalid", "LOGICAL_OPERATORS", "object", "property", "normal", "sourceType", "interpreter", "properties", "kind", "shorthand", "argument", "listKey", "index", "length", "expressions", "discriminant", "cases", "block", "handler", "finalizer", "prefix", "UNARY_OPERATORS", "UPDATE_OPERATORS", "declarations", "withoutInit", "constOrLetOrVar", "usingOrAwaitUsing", "parentIsForX", "decl", "definite", "superClass", "implements", "mixins", "abstract", "importAttributes", "attributes", "assertions", "deprecated", "source", "exportKind", "validateOptional", "declaration", "validateType", "specifiers", "sourced", "sourceless", "local", "exported", "lval", "await", "module", "phase", "importKind", "options", "classMethodOrPropertyCommon", "accessibility", "static", "override", "classMethodOrDeclareMethodCommon", "access", "tag", "quasi", "assertShape", "raw", "cooked", "templateElementCookedValidator", "unterminatedCalled", "str", "firstInvalidLoc", "readStringContents", "unterminated", "strictNumericEscape", "invalidEscapeSequence", "numericSeparatorInEscapeSequence", "unexpectedNumericSeparator", "invalidDigit", "invalidCodePoint", "tail", "quasis", "delegate", "assertOptionalChainStart", "readonly", "variance", "_core", "require", "_utils", "defineType", "defineAliasedType", "defineInterfaceishType", "name", "isDeclareClass", "builder", "visitor", "aliases", "fields", "Object", "assign", "id", "validateType", "typeParameters", "validateOptionalType", "extends", "validateOptional", "arrayOfType", "mixins", "implements", "body", "elementType", "value", "validate", "assertValueType", "predicate", "kind", "assertOneOf", "typeAnnotation", "right", "supertype", "impltype", "declaration", "specifiers", "source", "default", "importAttributes", "exportKind", "params", "validateArrayOfType", "rest", "this", "returnType", "optional", "types", "properties", "indexers", "callProperties", "internalSlots", "exact", "inexact", "static", "method", "key", "variance", "proto", "argument", "qualification", "expression", "bound", "explicitType", "members", "hasUnknownMembers", "init", "objectType", "indexType", "_utils", "require", "defineType", "defineAliasedType", "visitor", "aliases", "fields", "name", "validate", "assertNodeType", "value", "optional", "builder", "Object", "assign", "openingElement", "closingElement", "children", "validateArrayOfType", "selfClosing", "assertValueType", "expression", "object", "property", "namespace", "default", "attributes", "typeArguments", "typeParameters", "argument", "openingFragment", "closingFragment", "_utils", "require", "PLACEHOLDERS", "exports", "PLACEHOLDERS_ALIAS", "Declaration", "Pattern", "type", "alias", "ALIAS_KEYS", "length", "PLACEHOLDERS_FLIPPED_ALIAS", "Object", "keys", "forEach", "hasOwnProperty", "call", "push", "_utils", "require", "_placeholders", "_core", "defineType", "defineAliasedType", "visitor", "builder", "fields", "Object", "assign", "name", "validate", "assertNodeType", "expectedNode", "assertOneOf", "PLACEHOLDERS", "patternLikeCommon", "assertValueType", "_utils", "require", "defineType", "visitor", "aliases", "fields", "process", "env", "BABEL_TYPES_8_BREAKING", "object", "validate", "Object", "assign", "oneOfNodeTypes", "callee", "assertNodeType", "expression", "builder", "body", "async", "assertValueType", "default", "exported", "properties", "validateArrayOfType", "elements", "arrayOfType", "value", "_utils", "require", "_core", "_is", "defineType", "defineAliasedType", "bool", "assertValueType", "tSFunctionTypeAnnotationCommon", "returnType", "validate", "assertNodeType", "optional", "typeParameters", "aliases", "visitor", "fields", "accessibility", "assertOneOf", "readonly", "parameter", "override", "decorators", "arrayOfType", "Object", "assign", "functionDeclarationCommon", "classMethodOrDeclareMethodCommon", "left", "validateType", "right", "signatureDeclarationCommon", "validateOptionalType", "validateArrayOfType", "callConstructSignatureDeclaration", "namedTypeElementCommon", "key", "computed", "default", "validateOptional", "typeAnnotation", "kind", "static", "parameters", "tsKeywordTypes", "type", "fnOrCtrBase", "abstract", "typeName", "builder", "parameterName", "asserts", "exprName", "members", "elementType", "elementTypes", "label", "unionOrIntersection", "types", "checkType", "extendsType", "trueType", "falseType", "typeParameter", "operator", "objectType", "indexType", "nameType", "quasis", "chain", "assertEach", "node", "val", "length", "TypeError", "literal", "unaryExpression", "unaryOperator", "validator", "parent", "is", "argument", "oneOfNodeTypes", "expression", "declare", "id", "extends", "body", "TSTypeExpression", "const", "initializer", "global", "qualifier", "options", "isExport", "moduleReference", "importKind", "params", "name", "in", "out", "constraint", "DEPRECATED_ALIASES", "exports", "ModuleDeclaration", "require", "_utils", "_placeholders", "_deprecatedAliases", "Object", "keys", "DEPRECATED_ALIASES", "forEach", "deprecatedAlias", "FLIPPED_ALIAS_KEYS", "types", "set", "allExpandedTypes", "type", "aliases", "add", "TYPES", "exports", "concat", "VISITOR_KEYS", "DEPRECATED_KEYS", "_index", "require", "validate", "node", "key", "val", "fields", "NODE_FIELDS", "type", "field", "validateField", "validateChild", "validateInternal", "maybeNode", "optional", "_NODE_PARENT_VALIDATI", "NODE_PARENT_VALIDATIONS", "call", "_NODE_PARENT_VALIDATI2", "_validate", "require", "_deprecationWarning", "utils", "validateInternal", "validate", "NODE_FIELDS", "bigIntLiteral", "value", "toString", "node", "type", "defs", "BigIntLiteral", "arrayExpression", "elements", "ArrayExpression", "assignmentExpression", "operator", "left", "right", "AssignmentExpression", "binaryExpression", "BinaryExpression", "interpreterDirective", "InterpreterDirective", "directive", "Directive", "directiveLiteral", "DirectiveLiteral", "blockStatement", "body", "directives", "BlockStatement", "breakStatement", "label", "BreakStatement", "callExpression", "callee", "_arguments", "arguments", "CallExpression", "catchClause", "param", "CatchClause", "conditionalExpression", "test", "consequent", "alternate", "ConditionalExpression", "continueStatement", "ContinueStatement", "debuggerStatement", "doWhileStatement", "DoWhileStatement", "emptyStatement", "expressionStatement", "expression", "ExpressionStatement", "file", "program", "comments", "tokens", "File", "forInStatement", "ForInStatement", "forStatement", "init", "update", "ForStatement", "functionDeclaration", "id", "params", "generator", "async", "FunctionDeclaration", "functionExpression", "FunctionExpression", "identifier", "name", "Identifier", "ifStatement", "IfStatement", "labeledStatement", "LabeledStatement", "stringLiteral", "StringLiteral", "numericLiteral", "NumericLiteral", "nullLiteral", "booleanLiteral", "BooleanLiteral", "regExpLiteral", "pattern", "flags", "RegExpLiteral", "logicalExpression", "LogicalExpression", "memberExpression", "object", "property", "computed", "optional", "MemberExpression", "newExpression", "NewExpression", "sourceType", "interpreter", "Program", "objectExpression", "properties", "ObjectExpression", "objectMethod", "kind", "key", "ObjectMethod", "objectProperty", "shorthand", "decorators", "ObjectProperty", "restElement", "argument", "RestElement", "returnStatement", "ReturnStatement", "sequenceExpression", "expressions", "SequenceExpression", "parenthesizedExpression", "ParenthesizedExpression", "switchCase", "SwitchCase", "switchStatement", "discriminant", "cases", "SwitchStatement", "thisExpression", "throwStatement", "ThrowStatement", "tryStatement", "block", "handler", "finalizer", "TryStatement", "unaryExpression", "prefix", "UnaryExpression", "updateExpression", "UpdateExpression", "variableDeclaration", "declarations", "VariableDeclaration", "variableDeclarator", "VariableDeclarator", "whileStatement", "WhileStatement", "withStatement", "WithStatement", "assignmentPattern", "AssignmentPattern", "arrayPattern", "ArrayPattern", "arrowFunctionExpression", "ArrowFunctionExpression", "classBody", "ClassBody", "classExpression", "superClass", "ClassExpression", "classDeclaration", "ClassDeclaration", "exportAllDeclaration", "source", "ExportAllDeclaration", "exportDefaultDeclaration", "declaration", "ExportDefaultDeclaration", "exportNamedDeclaration", "specifiers", "ExportNamedDeclaration", "exportSpecifier", "local", "exported", "ExportSpecifier", "forOfStatement", "_await", "await", "ForOfStatement", "importDeclaration", "ImportDeclaration", "importDefaultSpecifier", "ImportDefaultSpecifier", "importNamespaceSpecifier", "ImportNamespaceSpecifier", "importSpecifier", "imported", "ImportSpecifier", "importExpression", "options", "ImportExpression", "metaProperty", "meta", "MetaProperty", "classMethod", "_static", "static", "ClassMethod", "objectPattern", "ObjectPattern", "spreadElement", "SpreadElement", "_super", "taggedTemplateExpression", "tag", "quasi", "TaggedTemplateExpression", "templateElement", "tail", "TemplateElement", "templateLiteral", "quasis", "TemplateLiteral", "yieldExpression", "delegate", "YieldExpression", "awaitExpression", "AwaitExpression", "_import", "exportNamespaceSpecifier", "ExportNamespaceSpecifier", "optionalMemberExpression", "OptionalMemberExpression", "optionalCallExpression", "OptionalCallExpression", "classProperty", "typeAnnotation", "ClassProperty", "classAccessorProperty", "ClassAccessorProperty", "classPrivateProperty", "ClassPrivateProperty", "classPrivateMethod", "ClassPrivateMethod", "privateName", "PrivateName", "staticBlock", "StaticBlock", "importAttribute", "ImportAttribute", "anyTypeAnnotation", "arrayTypeAnnotation", "elementType", "ArrayTypeAnnotation", "booleanTypeAnnotation", "booleanLiteralTypeAnnotation", "BooleanLiteralTypeAnnotation", "nullLiteralTypeAnnotation", "classImplements", "typeParameters", "ClassImplements", "declareClass", "_extends", "extends", "DeclareClass", "declareFunction", "DeclareFunction", "declareInterface", "DeclareInterface", "declareModule", "DeclareModule", "declareModuleExports", "DeclareModuleExports", "declareTypeAlias", "DeclareTypeAlias", "declareOpaqueType", "supertype", "DeclareOpaqueType", "declareVariable", "DeclareVariable", "declareExportDeclaration", "attributes", "DeclareExportDeclaration", "declareExportAllDeclaration", "DeclareExportAllDeclaration", "declaredPredicate", "DeclaredPredicate", "existsTypeAnnotation", "functionTypeAnnotation", "rest", "returnType", "FunctionTypeAnnotation", "functionTypeParam", "FunctionTypeParam", "genericTypeAnnotation", "GenericTypeAnnotation", "inferredPredicate", "interfaceExtends", "InterfaceExtends", "interfaceDeclaration", "InterfaceDeclaration", "interfaceTypeAnnotation", "InterfaceTypeAnnotation", "intersectionTypeAnnotation", "types", "IntersectionTypeAnnotation", "mixedTypeAnnotation", "emptyTypeAnnotation", "nullableTypeAnnotation", "NullableTypeAnnotation", "numberLiteralTypeAnnotation", "NumberLiteralTypeAnnotation", "numberTypeAnnotation", "objectTypeAnnotation", "indexers", "callProperties", "internalSlots", "exact", "ObjectTypeAnnotation", "objectTypeInternalSlot", "method", "ObjectTypeInternalSlot", "objectTypeCallProperty", "ObjectTypeCallProperty", "objectTypeIndexer", "variance", "ObjectTypeIndexer", "objectTypeProperty", "proto", "ObjectTypeProperty", "objectTypeSpreadProperty", "ObjectTypeSpreadProperty", "opaqueType", "impltype", "OpaqueType", "qualifiedTypeIdentifier", "qualification", "QualifiedTypeIdentifier", "stringLiteralTypeAnnotation", "StringLiteralTypeAnnotation", "stringTypeAnnotation", "symbolTypeAnnotation", "thisTypeAnnotation", "tupleTypeAnnotation", "TupleTypeAnnotation", "typeofTypeAnnotation", "TypeofTypeAnnotation", "typeAlias", "TypeAlias", "TypeAnnotation", "typeCastExpression", "TypeCastExpression", "typeParameter", "bound", "_default", "default", "TypeParameter", "typeParameterDeclaration", "TypeParameterDeclaration", "typeParameterInstantiation", "TypeParameterInstantiation", "unionTypeAnnotation", "UnionTypeAnnotation", "Variance", "voidTypeAnnotation", "enumDeclaration", "EnumDeclaration", "enumBooleanBody", "members", "explicitType", "hasUnknownMembers", "EnumBooleanBody", "enumNumberBody", "EnumNumberBody", "enumStringBody", "EnumStringBody", "enumSymbolBody", "EnumSymbolBody", "enumBooleanMember", "EnumBooleanMember", "enumNumberMember", "EnumNumberMember", "enumStringMember", "EnumStringMember", "enumDefaultedMember", "EnumDefaultedMember", "indexedAccessType", "objectType", "indexType", "IndexedAccessType", "optionalIndexedAccessType", "OptionalIndexedAccessType", "jsxAttribute", "JSXAttribute", "jsxClosingElement", "JSXClosingElement", "jsxElement", "openingElement", "closingElement", "children", "selfClosing", "JSXElement", "jsxEmptyExpression", "jsxExpressionContainer", "JSXExpressionContainer", "jsxSpreadChild", "JSXSpreadChild", "jsxIdentifier", "JSXIdentifier", "jsxMemberExpression", "JSXMemberExpression", "jsxNamespacedName", "namespace", "JSXNamespacedName", "jsxOpeningElement", "JSXOpeningElement", "jsxSpreadAttribute", "JSXSpreadAttribute", "jsxText", "JSXText", "jsxFragment", "openingFragment", "closingFragment", "JSXFragment", "jsxOpeningFragment", "jsxClosingFragment", "noop", "placeholder", "expectedNode", "Placeholder", "v8IntrinsicIdentifier", "V8IntrinsicIdentifier", "argumentPlaceholder", "bindExpression", "BindExpression", "decorator", "Decorator", "doExpression", "DoExpression", "exportDefaultSpecifier", "ExportDefaultSpecifier", "recordExpression", "RecordExpression", "tupleExpression", "TupleExpression", "decimalLiteral", "DecimalLiteral", "moduleExpression", "ModuleExpression", "topicReference", "pipelineTopicExpression", "PipelineTopicExpression", "pipelineBareFunction", "PipelineBareFunction", "pipelinePrimaryTopicReference", "voidPattern", "tsParameterProperty", "parameter", "TSParameterProperty", "tsDeclareFunction", "TSDeclareFunction", "tsDeclareMethod", "TSDeclareMethod", "tsQualifiedName", "TSQualifiedName", "tsCallSignatureDeclaration", "parameters", "TSCallSignatureDeclaration", "tsConstructSignatureDeclaration", "TSConstructSignatureDeclaration", "tsPropertySignature", "TSPropertySignature", "tsMethodSignature", "TSMethodSignature", "tsIndexSignature", "TSIndexSignature", "tsAnyKeyword", "tsBooleanKeyword", "tsBigIntKeyword", "tsIntrinsicKeyword", "tsNeverKeyword", "tsNullKeyword", "tsNumberKeyword", "tsObjectKeyword", "tsStringKeyword", "tsSymbolKeyword", "tsUndefinedKeyword", "tsUnknownKeyword", "tsVoidKeyword", "tsThisType", "tsFunctionType", "TSFunctionType", "tsConstructorType", "TSConstructorType", "tsTypeReference", "typeName", "TSTypeReference", "tsTypePredicate", "parameterName", "asserts", "TSTypePredicate", "tsTypeQuery", "exprName", "TSTypeQuery", "tsTypeLiteral", "TSTypeLiteral", "tsArrayType", "TSArrayType", "tsTupleType", "elementTypes", "TSTupleType", "tsOptionalType", "TSOptionalType", "tsRestType", "TSRestType", "tsNamedTupleMember", "TSNamedTupleMember", "tsUnionType", "TSUnionType", "tsIntersectionType", "TSIntersectionType", "tsConditionalType", "checkType", "extendsType", "trueType", "falseType", "TSConditionalType", "tsInferType", "TSInferType", "tsParenthesizedType", "TSParenthesizedType", "tsTypeOperator", "TSTypeOperator", "tsIndexedAccessType", "TSIndexedAccessType", "tsMappedType", "nameType", "TSMappedType", "tsTemplateLiteralType", "TSTemplateLiteralType", "tsLiteralType", "literal", "TSLiteralType", "tsExpressionWithTypeArguments", "TSExpressionWithTypeArguments", "tsInterfaceDeclaration", "TSInterfaceDeclaration", "tsInterfaceBody", "TSInterfaceBody", "tsTypeAliasDeclaration", "TSTypeAliasDeclaration", "tsInstantiationExpression", "TSInstantiationExpression", "tsAsExpression", "TSAsExpression", "tsSatisfiesExpression", "TSSatisfiesExpression", "tsTypeAssertion", "TSTypeAssertion", "tsEnumBody", "TSEnumBody", "tsEnumDeclaration", "TSEnumDeclaration", "tsEnumMember", "initializer", "TSEnumMember", "tsModuleDeclaration", "TSModuleDeclaration", "tsModuleBlock", "TSModuleBlock", "tsImportType", "qualifier", "TSImportType", "tsImportEqualsDeclaration", "moduleReference", "isExport", "TSImportEqualsDeclaration", "tsExternalModuleReference", "TSExternalModuleReference", "tsNonNullExpression", "TSNonNullExpression", "tsExportAssignment", "TSExportAssignment", "tsNamespaceExportDeclaration", "TSNamespaceExportDeclaration", "tsTypeAnnotation", "TSTypeAnnotation", "tsTypeParameterInstantiation", "TSTypeParameterInstantiation", "tsTypeParameterDeclaration", "TSTypeParameterDeclaration", "tsTypeParameter", "constraint", "TSTypeParameter", "NumberLiteral", "deprecationWarning", "RegexLiteral", "RestProperty", "SpreadProperty", "b", "require", "_deprecationWarning", "alias", "lowercase", "ArrayExpression", "exports", "AssignmentExpression", "BinaryExpression", "InterpreterDirective", "Directive", "DirectiveLiteral", "BlockStatement", "BreakStatement", "CallExpression", "CatchClause", "ConditionalExpression", "ContinueStatement", "DebuggerStatement", "DoWhileStatement", "EmptyStatement", "ExpressionStatement", "File", "ForInStatement", "ForStatement", "FunctionDeclaration", "FunctionExpression", "Identifier", "IfStatement", "LabeledStatement", "StringLiteral", "NumericLiteral", "NullLiteral", "BooleanLiteral", "RegExpLiteral", "LogicalExpression", "MemberExpression", "NewExpression", "Program", "ObjectExpression", "ObjectMethod", "ObjectProperty", "RestElement", "ReturnStatement", "SequenceExpression", "ParenthesizedExpression", "SwitchCase", "SwitchStatement", "ThisExpression", "ThrowStatement", "TryStatement", "UnaryExpression", "UpdateExpression", "VariableDeclaration", "VariableDeclarator", "WhileStatement", "WithStatement", "AssignmentPattern", "ArrayPattern", "ArrowFunctionExpression", "ClassBody", "ClassExpression", "ClassDeclaration", "ExportAllDeclaration", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ExportSpecifier", "ForOfStatement", "ImportDeclaration", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ImportSpecifier", "ImportExpression", "MetaProperty", "ClassMethod", "ObjectPattern", "SpreadElement", "Super", "TaggedTemplateExpression", "TemplateElement", "TemplateLiteral", "YieldExpression", "AwaitExpression", "Import", "BigIntLiteral", "ExportNamespaceSpecifier", "OptionalMemberExpression", "OptionalCallExpression", "ClassProperty", "ClassAccessorProperty", "ClassPrivateProperty", "ClassPrivateMethod", "PrivateName", "StaticBlock", "ImportAttribute", "AnyTypeAnnotation", "ArrayTypeAnnotation", "BooleanTypeAnnotation", "BooleanLiteralTypeAnnotation", "NullLiteralTypeAnnotation", "ClassImplements", "DeclareClass", "DeclareFunction", "DeclareInterface", "DeclareModule", "DeclareModuleExports", "DeclareTypeAlias", "DeclareOpaqueType", "DeclareVariable", "DeclareExportDeclaration", "DeclareExportAllDeclaration", "DeclaredPredicate", "ExistsTypeAnnotation", "FunctionTypeAnnotation", "FunctionTypeParam", "GenericTypeAnnotation", "InferredPredicate", "InterfaceExtends", "InterfaceDeclaration", "InterfaceTypeAnnotation", "IntersectionTypeAnnotation", "MixedTypeAnnotation", "EmptyTypeAnnotation", "NullableTypeAnnotation", "NumberLiteralTypeAnnotation", "NumberTypeAnnotation", "ObjectTypeAnnotation", "ObjectTypeInternalSlot", "ObjectTypeCallProperty", "ObjectTypeIndexer", "ObjectTypeProperty", "ObjectTypeSpreadProperty", "OpaqueType", "QualifiedTypeIdentifier", "StringLiteralTypeAnnotation", "StringTypeAnnotation", "SymbolTypeAnnotation", "ThisTypeAnnotation", "TupleTypeAnnotation", "TypeofTypeAnnotation", "TypeAlias", "TypeAnnotation", "TypeCastExpression", "TypeParameter", "TypeParameterDeclaration", "TypeParameterInstantiation", "UnionTypeAnnotation", "Variance", "VoidTypeAnnotation", "EnumDeclaration", "EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody", "EnumBooleanMember", "EnumNumberMember", "EnumStringMember", "EnumDefaultedMember", "IndexedAccessType", "OptionalIndexedAccessType", "JSXAttribute", "JSXClosingElement", "JSXElement", "JSXEmptyExpression", "JSXExpressionContainer", "JSXSpreadChild", "JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName", "JSXOpeningElement", "JSXSpreadAttribute", "JSXText", "JSXFragment", "JSXOpeningFragment", "JSXClosingFragment", "Noop", "Placeholder", "V8IntrinsicIdentifier", "ArgumentPlaceholder", "BindExpression", "Decorator", "DoExpression", "ExportDefaultSpecifier", "RecordExpression", "TupleExpression", "DecimalLiteral", "ModuleExpression", "TopicReference", "PipelineTopicExpression", "PipelineBareFunction", "PipelinePrimaryTopicReference", "VoidPattern", "TSParameterProperty", "TSDeclareFunction", "TSDeclareMethod", "TSQualifiedName", "TSCallSignatureDeclaration", "TSConstructSignatureDeclaration", "TSPropertySignature", "TSMethodSignature", "TSIndexSignature", "TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword", "TSThisType", "TSFunctionType", "TSConstructorType", "TSTypeReference", "TSTypePredicate", "TSTypeQuery", "TSTypeLiteral", "TSArrayType", "TSTupleType", "TSOptionalType", "TSRestType", "TSNamedTupleMember", "TSUnionType", "TSIntersectionType", "TSConditionalType", "TSInferType", "TSParenthesizedType", "TSTypeOperator", "TSIndexedAccessType", "TSMappedType", "TSTemplateLiteralType", "TSLiteralType", "TSExpressionWithTypeArguments", "TSInterfaceDeclaration", "TSInterfaceBody", "TSTypeAliasDeclaration", "TSInstantiationExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSEnumBody", "TSEnumDeclaration", "TSEnumMember", "TSModuleDeclaration", "TSModuleBlock", "TSImportType", "TSImportEqualsDeclaration", "TSExternalModuleReference", "TSNonNullExpression", "TSExportAssignment", "TSNamespaceExportDeclaration", "TSTypeAnnotation", "TSTypeParameterInstantiation", "TSTypeParameterDeclaration", "TSTypeParameter", "NumberLiteral", "numberLiteral", "RegexLiteral", "regexLiteral", "RestProperty", "restProperty", "SpreadProperty", "spreadProperty", "_lowercase", "require", "Object", "keys", "forEach", "key", "exports", "defineProperty", "enumerable", "get", "_uppercase", "_index", "require", "_index2", "cleanJSXElementLiteralChild", "child", "args", "lines", "value", "split", "lastNonEmptyLine", "i", "length", "exec", "str", "line", "isFirstLine", "isLastLine", "isLastNonEmptyLine", "trimmedLine", "replace", "push", "inherits", "stringLiteral", "_index", "require", "_cleanJSXElementLiteralChild", "buildChildren", "node", "elements", "i", "children", "length", "child", "isJSXText", "cleanJSXElementLiteralChild", "isJSXExpressionContainer", "expression", "isJSXEmptyExpression", "push", "_index", "require", "isNode", "node", "VISITOR_KEYS", "type", "_isNode", "require", "assertNode", "node", "isNode", "_node$type", "type", "JSON", "stringify", "TypeError", "_is", "require", "_deprecationWarning", "assert", "type", "node", "opts", "is", "Error", "JSON", "stringify", "assertArrayExpression", "assertAssignmentExpression", "assertBinaryExpression", "assertInterpreterDirective", "assertDirective", "assertDirectiveLiteral", "assertBlockStatement", "assertBreakStatement", "assertCallExpression", "assertCatchClause", "assertConditionalExpression", "assertContinueStatement", "assertDebuggerStatement", "assertDoWhileStatement", "assertEmptyStatement", "assertExpressionStatement", "assertFile", "assertForInStatement", "assertForStatement", "assertFunctionDeclaration", "assertFunctionExpression", "assertIdentifier", "assertIfStatement", "assertLabeledStatement", "assertStringLiteral", "assertNumericLiteral", "assertNullLiteral", "assertBooleanLiteral", "assertRegExpLiteral", "assertLogicalExpression", "assertMemberExpression", "assertNewExpression", "assertProgram", "assertObjectExpression", "assertObjectMethod", "assertObjectProperty", "assertRestElement", "assertReturnStatement", "assertSequenceExpression", "assertParenthesizedExpression", "assertSwitchCase", "assertSwitchStatement", "assertThisExpression", "assertThrowStatement", "assertTryStatement", "assertUnaryExpression", "assertUpdateExpression", "assertVariableDeclaration", "assertVariableDeclarator", "assertWhileStatement", "assertWithStatement", "assertAssignmentPattern", "assertArrayPattern", "assertArrowFunctionExpression", "assertClassBody", "assertClassExpression", "assertClassDeclaration", "assertExportAllDeclaration", "assertExportDefaultDeclaration", "assertExportNamedDeclaration", "assertExportSpecifier", "assertForOfStatement", "assertImportDeclaration", "assertImportDefaultSpecifier", "assertImportNamespaceSpecifier", "assertImportSpecifier", "assertImportExpression", "assertMetaProperty", "assertClassMethod", "assertObjectPattern", "assertSpreadElement", "assertSuper", "assertTaggedTemplateExpression", "assertTemplateElement", "assertTemplateLiteral", "assertYieldExpression", "assertAwaitExpression", "assertImport", "assertBigIntLiteral", "assertExportNamespaceSpecifier", "assertOptionalMemberExpression", "assertOptionalCallExpression", "assertClassProperty", "assertClassAccessorProperty", "assertClassPrivateProperty", "assertClassPrivateMethod", "assertPrivateName", "assertStaticBlock", "assertImportAttribute", "assertAnyTypeAnnotation", "assertArrayTypeAnnotation", "assertBooleanTypeAnnotation", "assertBooleanLiteralTypeAnnotation", "assertNullLiteralTypeAnnotation", "assertClassImplements", "assertDeclareClass", "assertDeclareFunction", "assertDeclareInterface", "assertDeclareModule", "assertDeclareModuleExports", "assertDeclareTypeAlias", "assertDeclareOpaqueType", "assertDeclareVariable", "assertDeclareExportDeclaration", "assertDeclareExportAllDeclaration", "assertDeclaredPredicate", "assertExistsTypeAnnotation", "assertFunctionTypeAnnotation", "assertFunctionTypeParam", "assertGenericTypeAnnotation", "assertInferredPredicate", "assertInterfaceExtends", "assertInterfaceDeclaration", "assertInterfaceTypeAnnotation", "assertIntersectionTypeAnnotation", "assertMixedTypeAnnotation", "assertEmptyTypeAnnotation", "assertNullableTypeAnnotation", "assertNumberLiteralTypeAnnotation", "assertNumberTypeAnnotation", "assertObjectTypeAnnotation", "assertObjectTypeInternalSlot", "assertObjectTypeCallProperty", "assertObjectTypeIndexer", "assertObjectTypeProperty", "assertObjectTypeSpreadProperty", "assertOpaqueType", "assertQualifiedTypeIdentifier", "assertStringLiteralTypeAnnotation", "assertStringTypeAnnotation", "assertSymbolTypeAnnotation", "assertThisTypeAnnotation", "assertTupleTypeAnnotation", "assertTypeofTypeAnnotation", "assertTypeAlias", "assertTypeAnnotation", "assertTypeCastExpression", "assertTypeParameter", "assertTypeParameterDeclaration", "assertTypeParameterInstantiation", "assertUnionTypeAnnotation", "assertVariance", "assertVoidTypeAnnotation", "assertEnumDeclaration", "assertEnumBooleanBody", "assertEnumNumberBody", "assertEnumStringBody", "assertEnumSymbolBody", "assertEnumBooleanMember", "assertEnumNumberMember", "assertEnumStringMember", "assertEnumDefaultedMember", "assertIndexedAccessType", "assertOptionalIndexedAccessType", "assertJSXAttribute", "assertJSXClosingElement", "assertJSXElement", "assertJSXEmptyExpression", "assertJSXExpressionContainer", "assertJSXSpreadChild", "assertJSXIdentifier", "assertJSXMemberExpression", "assertJSXNamespacedName", "assertJSXOpeningElement", "assertJSXSpreadAttribute", "assertJSXText", "assertJSXFragment", "assertJSXOpeningFragment", "assertJSXClosingFragment", "assertNoop", "assertPlaceholder", "assertV8IntrinsicIdentifier", "assertArgumentPlaceholder", "assertBindExpression", "assertDecorator", "assertDoExpression", "assertExportDefaultSpecifier", "assertRecordExpression", "assertTupleExpression", "assertDecimalLiteral", "assertModuleExpression", "assertTopicReference", "assertPipelineTopicExpression", "assertPipelineBareFunction", "assertPipelinePrimaryTopicReference", "assertVoidPattern", "assertTSParameterProperty", "assertTSDeclareFunction", "assertTSDeclareMethod", "assertTSQualifiedName", "assertTSCallSignatureDeclaration", "assertTSConstructSignatureDeclaration", "assertTSPropertySignature", "assertTSMethodSignature", "assertTSIndexSignature", "assertTSAnyKeyword", "assertTSBooleanKeyword", "assertTSBigIntKeyword", "assertTSIntrinsicKeyword", "assertTSNeverKeyword", "assertTSNullKeyword", "assertTSNumberKeyword", "assertTSObjectKeyword", "assertTSStringKeyword", "assertTSSymbolKeyword", "assertTSUndefinedKeyword", "assertTSUnknownKeyword", "assertTSVoidKeyword", "assertTSThisType", "assertTSFunctionType", "assertTSConstructorType", "assertTSTypeReference", "assertTSTypePredicate", "assertTSTypeQuery", "assertTSTypeLiteral", "assertTSArrayType", "assertTSTupleType", "assertTSOptionalType", "assertTSRestType", "assertTSNamedTupleMember", "assertTSUnionType", "assertTSIntersectionType", "assertTSConditionalType", "assertTSInferType", "assertTSParenthesizedType", "assertTSTypeOperator", "assertTSIndexedAccessType", "assertTSMappedType", "assertTSTemplateLiteralType", "assertTSLiteralType", "assertTSExpressionWithTypeArguments", "assertTSInterfaceDeclaration", "assertTSInterfaceBody", "assertTSTypeAliasDeclaration", "assertTSInstantiationExpression", "assertTSAsExpression", "assertTSSatisfiesExpression", "assertTSTypeAssertion", "assertTSEnumBody", "assertTSEnumDeclaration", "assertTSEnumMember", "assertTSModuleDeclaration", "assertTSModuleBlock", "assertTSImportType", "assertTSImportEqualsDeclaration", "assertTSExternalModuleReference", "assertTSNonNullExpression", "assertTSExportAssignment", "assertTSNamespaceExportDeclaration", "assertTSTypeAnnotation", "assertTSTypeParameterInstantiation", "assertTSTypeParameterDeclaration", "assertTSTypeParameter", "assertStandardized", "assertExpression", "assertBinary", "assertScopable", "assertBlockParent", "assertBlock", "assertStatement", "assertTerminatorless", "assertCompletionStatement", "assertConditional", "assertLoop", "assertWhile", "assertExpressionWrapper", "assertFor", "assertForXStatement", "assertFunction", "assertFunctionParent", "assertPureish", "assertDeclaration", "assertFunctionParameter", "assertPatternLike", "assertLVal", "assertTSEntityName", "assertLiteral", "assertImmutable", "assertUserWhitespacable", "assertMethod", "assertObjectMember", "assertProperty", "assertUnaryLike", "assertPattern", "assertClass", "assertImportOrExportDeclaration", "assertExportDeclaration", "assertModuleSpecifier", "assertAccessor", "assertPrivate", "assertFlow", "assertFlowType", "assertFlowBaseAnnotation", "assertFlowDeclaration", "assertFlowPredicate", "assertEnumBody", "assertEnumMember", "assertJSX", "assertMiscellaneous", "assertTypeScript", "assertTSTypeElement", "assertTSType", "assertTSBaseType", "assertNumberLiteral", "deprecationWarning", "assertRegexLiteral", "assertRestProperty", "assertSpreadProperty", "assertModuleDeclaration", "_index", "require", "_default", "exports", "default", "createTypeAnnotationBasedOnTypeof", "type", "stringTypeAnnotation", "numberTypeAnnotation", "voidTypeAnnotation", "booleanTypeAnnotation", "genericTypeAnnotation", "identifier", "anyTypeAnnotation", "Error", "_index", "require", "getQualifiedName", "node", "isIdentifier", "name", "id", "qualification", "removeTypeDuplicates", "nodesIn", "nodes", "Array", "from", "generics", "Map", "bases", "typeGroups", "Set", "types", "i", "length", "includes", "isAnyTypeAnnotation", "isFlowBaseAnnotation", "set", "type", "isUnionTypeAnnotation", "has", "push", "add", "isGenericTypeAnnotation", "existing", "get", "typeParameters", "params", "baseType", "genericName", "_index", "require", "_removeTypeDuplicates", "createFlowUnionType", "types", "flattened", "removeTypeDuplicates", "length", "unionTypeAnnotation", "_index", "require", "getQualifiedName", "node", "isIdentifier", "name", "isThisExpression", "right", "left", "removeTypeDuplicates", "nodesIn", "nodes", "Array", "from", "generics", "Map", "bases", "typeGroups", "Set", "types", "i", "length", "includes", "isTSAnyKeyword", "isTSBaseType", "set", "type", "isTSUnionType", "has", "push", "add", "typeArgumentsKey", "isTSTypeReference", "typeArguments", "typeName", "existing", "get", "existingTypeArguments", "params", "baseType", "genericName", "_index", "require", "_removeTypeDuplicates", "_index2", "createTSUnionType", "typeAnnotations", "types", "map", "type", "isTSTypeAnnotation", "typeAnnotation", "flattened", "removeTypeDuplicates", "length", "tsUnionType", "_index", "require", "buildUndefinedNode", "unaryExpression", "numericLiteral", "_index", "require", "_index2", "hasOwn", "Function", "call", "bind", "Object", "prototype", "hasOwnProperty", "cloneIfNode", "obj", "deep", "withoutLoc", "commentsCache", "type", "cloneNodeInternal", "cloneIfNodeOrArray", "Array", "isArray", "map", "node", "cloneNode", "Map", "newNode", "isIdentifier", "name", "optional", "typeAnnotation", "decorators", "NODE_FIELDS", "Error", "field", "keys", "isFile", "maybeCloneComments", "comments", "loc", "leadingComments", "innerComments", "trailingComments", "extra", "assign", "comment", "cache", "get", "value", "ret", "set", "_cloneNode", "require", "clone", "node", "cloneNode", "_cloneNode", "require", "cloneDeep", "node", "cloneNode", "_cloneNode", "require", "cloneDeepWithoutLoc", "node", "cloneNode", "_cloneNode", "require", "cloneWithoutLoc", "node", "cloneNode", "addComments", "node", "type", "comments", "key", "concat", "push", "_addComments", "require", "addComment", "node", "type", "content", "line", "addComments", "value", "inherit", "key", "child", "parent", "Array", "from", "Set", "concat", "filter", "Boolean", "_inherit", "require", "inheritInnerComments", "child", "parent", "inherit", "_inherit", "require", "inheritLeadingComments", "child", "parent", "inherit", "_inherit", "require", "inheritTrailingComments", "child", "parent", "inherit", "_inheritTrailingComments", "require", "_inheritLeadingComments", "_inheritInnerComments", "inheritsComments", "child", "parent", "inheritTrailingComments", "inheritLeadingComments", "inheritInnerComments", "_index", "require", "removeComments", "node", "COMMENT_KEYS", "forEach", "key", "_index", "require", "STANDARDIZED_TYPES", "exports", "FLIPPED_ALIAS_KEYS", "EXPRESSION_TYPES", "BINARY_TYPES", "SCOPABLE_TYPES", "BLOCKPARENT_TYPES", "BLOCK_TYPES", "STATEMENT_TYPES", "TERMINATORLESS_TYPES", "COMPLETIONSTATEMENT_TYPES", "CONDITIONAL_TYPES", "LOOP_TYPES", "WHILE_TYPES", "EXPRESSIONWRAPPER_TYPES", "FOR_TYPES", "FORXSTATEMENT_TYPES", "FUNCTION_TYPES", "FUNCTIONPARENT_TYPES", "PUREISH_TYPES", "DECLARATION_TYPES", "FUNCTIONPARAMETER_TYPES", "PATTERNLIKE_TYPES", "LVAL_TYPES", "TSENTITYNAME_TYPES", "LITERAL_TYPES", "IMMUTABLE_TYPES", "USERWHITESPACABLE_TYPES", "METHOD_TYPES", "OBJECTMEMBER_TYPES", "PROPERTY_TYPES", "UNARYLIKE_TYPES", "PATTERN_TYPES", "CLASS_TYPES", "IMPORTOREXPORTDECLARATION_TYPES", "EXPORTDECLARATION_TYPES", "MODULESPECIFIER_TYPES", "ACCESSOR_TYPES", "PRIVATE_TYPES", "FLOW_TYPES", "FLOWTYPE_TYPES", "FLOWBASEANNOTATION_TYPES", "FLOWDECLARATION_TYPES", "FLOWPREDICATE_TYPES", "ENUMBODY_TYPES", "ENUMMEMBER_TYPES", "JSX_TYPES", "MISCELLANEOUS_TYPES", "TYPESCRIPT_TYPES", "TSTYPEELEMENT_TYPES", "TSTYPE_TYPES", "TSBASETYPE_TYPES", "MODULEDECLARATION_TYPES", "_index", "require", "_index2", "toBlock", "node", "parent", "isBlockStatement", "blockNodes", "isEmptyStatement", "isStatement", "isFunction", "returnStatement", "expressionStatement", "blockStatement", "_toBlock", "require", "ensureBlock", "node", "key", "result", "toBlock", "_isValidIdentifier", "require", "_helperValidatorIdentifier", "toIdentifier", "input", "name", "c", "isIdentifierChar", "codePointAt", "replace", "match", "toUpperCase", "isValidIdentifier", "_toIdentifier", "require", "toBindingIdentifierName", "name", "toIdentifier", "_index", "require", "_index2", "toComputedKey", "node", "key", "property", "computed", "isIdentifier", "stringLiteral", "name", "_index", "require", "_default", "exports", "default", "toExpression", "node", "isExpressionStatement", "expression", "isExpression", "isClass", "type", "abstract", "isFunction", "Error", "_index", "require", "_skip", "Symbol", "_stop", "traverseFast", "node", "enter", "opts", "keys", "VISITOR_KEYS", "type", "ret", "undefined", "key", "subNode", "Array", "isArray", "skip", "stop", "_index", "require", "CLEAR_KEYS", "CLEAR_KEYS_PLUS_COMMENTS", "COMMENT_KEYS", "removeProperties", "node", "opts", "map", "preserveComments", "key", "undefined", "Object", "keys", "symbols", "getOwnPropertySymbols", "sym", "_traverseFast", "require", "_removeProperties", "removePropertiesDeep", "tree", "opts", "traverseFast", "removeProperties", "_index", "require", "_cloneNode", "_removePropertiesDeep", "toKeyAlias", "node", "key", "alias", "kind", "increment", "isIdentifier", "name", "isStringLiteral", "JSON", "stringify", "value", "removePropertiesDeep", "cloneNode", "computed", "static", "uid", "Number", "MAX_SAFE_INTEGER", "_index", "require", "_index2", "_default", "exports", "default", "toStatement", "node", "ignore", "isStatement", "mustHaveId", "newType", "isClass", "isFunction", "isAssignmentExpression", "expressionStatement", "id", "Error", "type", "_isValidIdentifier", "require", "_index", "_default", "exports", "default", "valueToNode", "objectToString", "Function", "call", "bind", "Object", "prototype", "toString", "isRegExp", "value", "isPlainObject", "proto", "getPrototypeOf", "undefined", "identifier", "booleanLiteral", "nullLiteral", "stringLiteral", "result", "Number", "isFinite", "numericLiteral", "Math", "abs", "numerator", "isNaN", "binaryExpression", "is", "unaryExpression", "bigIntLiteral", "pattern", "source", "flags", "exec", "regExpLiteral", "Array", "isArray", "arrayExpression", "map", "props", "key", "keys", "nodeKey", "computed", "isValidIdentifier", "push", "objectProperty", "objectExpression", "Error", "_index", "require", "appendToMemberExpression", "member", "append", "computed", "object", "memberExpression", "property", "_index", "require", "_inheritsComments", "inherits", "child", "parent", "key", "INHERIT_KEYS", "optional", "Object", "keys", "force", "inheritsComments", "_index", "require", "_index2", "prependToMemberExpression", "member", "prepend", "isSuper", "object", "Error", "memberExpression", "getAssignmentIdentifiers", "node", "search", "concat", "ids", "Object", "create", "length", "id", "pop", "type", "push", "elements", "left", "properties", "value", "argument", "operator", "name", "_index", "require", "getBindingIdentifiers", "node", "duplicates", "outerOnly", "newBindingsOnly", "search", "concat", "ids", "Object", "create", "length", "id", "shift", "isAssignmentExpression", "isUnaryExpression", "isUpdateExpression", "isIdentifier", "_ids", "name", "push", "isExportDeclaration", "isExportAllDeclaration", "isDeclaration", "declaration", "isFunctionDeclaration", "isFunctionExpression", "keys", "type", "i", "key", "nodes", "Array", "isArray", "DeclareClass", "DeclareFunction", "DeclareModule", "DeclareVariable", "DeclareInterface", "DeclareTypeAlias", "DeclareOpaqueType", "InterfaceDeclaration", "TypeAlias", "OpaqueType", "CatchClause", "LabeledStatement", "UnaryExpression", "AssignmentExpression", "ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier", "ImportDeclaration", "TSImportEqualsDeclaration", "ExportSpecifier", "ExportNamespaceSpecifier", "ExportDefaultSpecifier", "FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression", "ObjectMethod", "ClassMethod", "ClassPrivateMethod", "ForInStatement", "ForOfStatement", "ClassDeclaration", "ClassExpression", "RestElement", "UpdateExpression", "ObjectProperty", "AssignmentPattern", "ArrayPattern", "ObjectPattern", "VariableDeclaration", "VariableDeclarator", "_getBindingIdentifiers", "require", "_default", "exports", "default", "getOuterBindingIdentifiers", "node", "duplicates", "getBindingIdentifiers", "_index", "require", "getNameFromLiteralId", "id", "isNullLiteral", "isRegExpLiteral", "pattern", "flags", "isTemplateLiteral", "quasis", "map", "quasi", "value", "raw", "join", "undefined", "String", "getObjectMemberKey", "node", "computed", "isLiteral", "key", "getFunctionName", "parent", "name", "originalNode", "prefix", "isObjectProperty", "isObjectMethod", "isClassMethod", "kind", "isVariableDeclarator", "init", "isAssignmentExpression", "operator", "right", "left", "isIdentifier", "isPrivateName", "_index", "require", "traverse", "node", "handlers", "state", "enter", "exit", "traverseSimpleImpl", "ancestors", "keys", "VISITOR_KEYS", "type", "key", "subNode", "Array", "isArray", "i", "length", "child", "push", "index", "pop", "_getBindingIdentifiers", "require", "isBinding", "node", "parent", "grandparent", "type", "keys", "getBindingIdentifiers", "i", "length", "key", "val", "Array", "isArray", "includes", "_index", "require", "BLOCK_SCOPED_SYMBOL", "Symbol", "for", "isLet", "node", "isVariableDeclaration", "kind", "_index", "require", "_isLet", "isBlockScoped", "node", "isFunctionDeclaration", "isClassDeclaration", "isLet", "_isType", "require", "_index", "isImmutable", "node", "isType", "type", "isIdentifier", "name", "_index", "require", "isNodesEquivalent", "a", "b", "type", "fields", "Object", "keys", "NODE_FIELDS", "visitorKeys", "VISITOR_KEYS", "field", "val_a", "val_b", "Array", "isArray", "length", "i", "includes", "key", "isReferenced", "node", "parent", "grandparent", "type", "property", "computed", "object", "init", "body", "key", "superClass", "right", "source", "local", "id", "_index", "require", "isScope", "node", "parent", "isBlockStatement", "isFunction", "isCatchClause", "isPattern", "isScopable", "_index", "require", "isSpecifierDefault", "specifier", "isImportDefaultSpecifier", "isIdentifier", "imported", "exported", "name", "_isValidIdentifier", "require", "RESERVED_WORDS_ES3_ONLY", "Set", "isValidES3Identifier", "name", "isValidIdentifier", "has", "_index", "require", "BLOCK_SCOPED_SYMBOL", "Symbol", "for", "isVar", "node", "isVariableDeclaration", "kind", "_getBindingIdentifiers", "require", "_index", "_index2", "_productions", "_cloneNode", "gatherSequenceExpressions", "nodes", "declars", "exprs", "ensureLastUndefined", "node", "isEmptyStatement", "isExpression", "push", "isExpressionStatement", "expression", "isVariableDeclaration", "kind", "declar", "declarations", "bindings", "getBindingIdentifiers", "key", "Object", "keys", "id", "cloneNode", "init", "assignmentExpression", "isIfStatement", "consequent", "buildUndefinedNode", "alternate", "conditionalExpression", "test", "isBlockStatement", "body", "indexOf", "length", "sequenceExpression", "_gatherSequenceExpressions", "require", "toSequenceExpression", "nodes", "scope", "length", "declars", "result", "gatherSequenceExpressions", "declar", "push", "_isReactComponent", "require", "_isCompatTag", "_buildChildren", "_assertNode", "_index", "Object", "keys", "forEach", "key", "prototype", "hasOwnProperty", "call", "_exportNames", "exports", "defineProperty", "enumerable", "get", "_createTypeAnnotationBasedOnTypeof", "_createFlowUnionType", "_createTSUnionType", "_productions", "_index2", "_cloneNode", "_clone", "_cloneDeep", "_cloneDeepWithoutLoc", "_cloneWithoutLoc", "_addComment", "_addComments", "_inheritInnerComments", "_inheritLeadingComments", "_inheritsComments", "_inheritTrailingComments", "_removeComments", "_index3", "_index4", "_ensureBlock", "_toBindingIdentifierName", "_toBlock", "_toComputedKey", "_toExpression", "_toIdentifier", "_toKeyAlias", "_toStatement", "_valueToNode", "_index5", "_appendToMemberExpression", "_inherits", "_prependToMemberExpression", "_removeProperties", "_removePropertiesDeep", "_removeTypeDuplicates", "_getAssignmentIdentifiers", "_getBindingIdentifiers", "_getOuterBindingIdentifiers", "_getFunctionName", "_traverse", "_traverseFast", "_shallowEqual", "_is", "_isBinding", "_isBlockScoped", "_isImmutable", "_isLet", "_isNode", "_isNodesEquivalent", "_isPlaceholderType", "_isReferenced", "_isScope", "_isSpecifierDefault", "_isType", "_isValidES3Identifier", "_isValidIdentifier", "_isVar", "_matchesPattern", "_validate", "_buildMatchMemberExpression", "_index6", "_deprecationWarning", "_toSequenceExpression", "react", "isReactComponent", "isCompatTag", "buildChildren", "toSequenceExpression", "process", "env", "BABEL_TYPES_8_BREAKING", "console", "warn", "_t", "require", "assertExpressionStatement", "makeStatementFormatter", "fn", "code", "str", "validate", "unwrap", "ast", "program", "body", "slice", "smart", "exports", "length", "statements", "statement", "Error", "expression", "start", "stmt", "merge", "a", "b", "placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "parser", "Object", "assign", "validate", "opts", "Error", "_ref", "_objectWithoutPropertiesLoose", "_excluded", "Set", "RegExp", "undefined", "normalizeReplacements", "replacements", "Array", "isArray", "reduce", "acc", "replacement", "i", "Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "code", "ModuleErrors", "ImportMetaOutsideModule", "message", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "node", "type", "prefix", "StandardErrors", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitUsingNotInAsyncContext", "AwaitNotInAsyncContext", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorsBeforeAfterExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeferImportRequiresNamespace", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportAttributesUseAssert", "ImportBindingIsString", "importName", "ImportCallArity", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverDiscardElement", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidLhsOptionalChaining", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "map", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "key", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "SloppyFunctionAnnexB", "SourcePhaseImportRequiresDefault", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnexpectedVoidPattern", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationExport", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "VoidPatternCatchClauseParam", "VoidPatternInitializer", "YieldBindingIdentifier", "YieldInParameter", "YieldNotInGeneratorFunction", "ZeroDigitNumericSeparator", "StrictModeErrors", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "ParseExpressionErrors", "ParseExpressionEmptyInput", "ParseExpressionExpectsEOF", "String", "fromCodePoint", "UnparenthesizedPipeBodyDescriptions", "Set", "Object", "assign", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "defineHidden", "obj", "value", "defineProperty", "enumerable", "configurable", "toParseErrorConstructor", "toMessage", "reasonCode", "syntaxPlugin", "hasMissingPlugin", "oldReasonCodes", "AccessorCannotDeclareThisParameter", "AccessorCannotHaveTypeParameters", "ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference", "SetAccessorCannotHaveOptionalParameter", "SetAccessorCannotHaveRestParameter", "SetAccessorCannotHaveReturnType", "loc", "details", "error", "SyntaxError", "pos", "clone", "overrides", "_overrides$loc", "get", "set", "writable", "ParseErrorEnum", "argument", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "keys", "template", "_ref", "rest", "_objectWithoutPropertiesLoose", "_excluded", "Errors", "PipelineOperatorErrors", "createDefaultOptions", "sourceType", "sourceFilename", "undefined", "startIndex", "startColumn", "startLine", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "allowYieldOutsideFunction", "plugins", "strictMode", "ranges", "tokens", "createImportExpressions", "createParenthesizedExpressions", "errorRecovery", "attachComment", "annexB", "getOptions", "opts", "options", "Error", "toUnenumerable", "object", "toESTreeLocation", "estree", "superClass", "ESTreeParserMixin", "parse", "file", "optionFlags", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "_", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "_unused", "bigint", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "estreeParseChainExpression", "endLoc", "chain", "startNodeAtNode", "expression", "finishNodeAt", "directiveToStmt", "directive", "castNodeTo", "raw", "extra", "expressionValue", "stmt", "rawValue", "fillOptionalPropertiesForTSESLint", "cloneEstreeStringLiteral", "range", "cloned", "create", "prototype", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "_stmt$expression$extr", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "parseMethod", "isGenerator", "isConstructor", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "typeParameters", "resetStartLocationFromNode", "valueNode", "computed", "shorthand", "finishNode", "nameIsConstructor", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseClassAccessorProperty", "accessorPropertyNode", "abstract", "hasPlugin", "parseObjectProperty", "prop", "startLoc", "isPattern", "refExpressionErrors", "finishObjectProperty", "isValidLVal", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "finishCallExpression", "unfinished", "optional", "callee", "source", "arguments", "_ref2", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "length", "_declaration$decorato", "declaration", "resetStartLocation", "stopParseSubscript", "base", "optionalChainMember", "parseMember", "isOptionalMemberExpression", "hasPropertyAsPrivateName", "isObjectMethod", "result", "cloneIdentifier", "cloneStringLiteral", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "_options$binop", "_options$beforeExpr", "_options$startsExpr", "_options$prefix", "push", "createKeywordLike", "_options$binop2", "_options$beforeExpr2", "_options$startsExpr2", "_options$prefix2", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "at", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_defer", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_source", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "placeholder", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "i", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "Scope", "names", "firstLexicalName", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "allowNewTarget", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "ScopeFlag", "inNonArrowFunction", "inBareCaseStatement", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "maybeExportDefined", "delete", "isRedeclaredInScope", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "add", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitialized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "flow", "FlowParserMixin", "flowPragma", "getScopeHandler", "shouldParseTypes", "finishToken", "val", "addComment", "comment", "matches", "exec", "flowParseTypeInitialiser", "tok", "oldInType", "inType", "expect", "flowParseType", "flowParsePredicate", "moduloLoc", "expectContextual", "eat", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "match", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "semicolon", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "eatContextual", "flowParseDeclareModuleExports", "flowParseDeclareModule", "isContextual", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "forEach", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "flowParseInterfaceExtends", "implements", "mixins", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "flowInTopLevelContext", "cb", "curContext", "oldContext", "flowParseTypeParameterInstantiationInExpression", "reScan_lt", "oldNoAnonFunctionType", "noAnonFunctionType", "reScan_lt_gt", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "lookahead", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "startNodeAt", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "nodeStart", "callProperties", "properties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "out", "isInexactToken", "proto", "flowCheckGetterSetterParams", "property", "paramCount", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "canInsertSemicolon", "elementType", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "containsEsc", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "maybeInArrowParameters", "nextCh", "lookaheadCharCode", "setOptionalParametersError", "originalNoArrowAt", "noArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "invalid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "noArrowParamsConversionAt", "parseMaybeAssignAllowIn", "disallowInvalid", "stack", "arrows", "finishArrowValidation", "every", "_node$extra", "toAssignableList", "trailingCommaLoc", "checkParams", "includes", "offsetToSourcePos", "parseParenItem", "newNode", "typeCastNode", "assertModuleNodeAllowed", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "classBody", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "readWord1", "fullWord", "curPosition", "getTokenFromCode", "input", "charCodeAt", "finishOp", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "_expr$extra", "parseArrayLike", "close", "canBePattern", "isTuple", "elements", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "pushClassMethod", "allowsDirectSuper", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "isAccessor", "parseFunctionParamType", "parseMaybeDefault", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "isPotentialImportPhase", "isExport", "ch", "applyImportPhase", "phase", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "isLookaheadContextual", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "parseVarId", "decl", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "_jsx", "jsx", "tryParse", "currentContext", "_jsx2", "_jsx3", "abort", "_arrowExpression$extr", "arrowExpression", "maybeUnwrapTypeCastExpression", "aborted", "async", "failState", "thrown", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "sourceToOffsetPos", "parseSubscripts", "noCalls", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "parseSubscript", "subscriptState", "isLookaheadToken_lt", "stop", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "readToken_mult_modulo", "hasFlowComment", "nextToken", "readToken_pipe_amp", "parseTopLevel", "program", "fileNode", "skipBlockComment", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "slice", "indexOf", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitialized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "init", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "members", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "jsxParseOpeningElementAfterName", "nextTokenStart", "afterNext", "readToken_lt", "readToken_gt", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "lineBreak", "lineBreakG", "isNewLine", "hasNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "isWhitespace", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "chunkStart", "canStartJSXElement", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "curLine", "lineStart", "jsxReadString", "quote", "startPos", "codePointAtPos", "codePoint", "readInt", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "replaceToken", "skipSpace", "prevType", "splice", "TypeScriptScope", "tsNames", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "len", "isConst", "wasConst", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "sourcePos", "offsetPos", "pluginConfig", "pluginName", "pluginOptions", "actualOptions", "plugin", "_this$plugins$get", "setTrailingComments", "comments", "trailingComments", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "commentWS", "lastElement", "CommentsParser", "commentsLen", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "commentEnd", "containingNode", "finalizeComment", "trailingNode", "_node$options", "commentStart", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "takeSurroundingComments", "State", "errors", "potentialArrowAt", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "labels", "ct", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "v", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "soloAwait", "inFSharpPipelineDirectBody", "hasTopLevelAwait", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "firstInvalidLoc", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "strictNumericEscape", "octalStr", "octal", "parseInt", "forceLen", "n", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "total", "e", "Infinity", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "createLookaheadState", "old", "curr", "nextTokenStartSince", "lastIndex", "lookaheadCharCodeSince", "nextTokenInLineStart", "nextTokenInLineStartSince", "lookaheadInLineCharCode", "cp", "trail", "setStrict", "toParseError", "clear", "skipLineComment", "startSkip", "spaceStart", "loop", "commentWhitespace", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readToken_dot", "readNumber", "readToken_slash", "width", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "isBigInt", "replace", "startsWithDot", "isFloat", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "isDecimal", "parseFloat", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "oldClassScope", "from", "declarePrivateName", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "UtilParser", "addExtra", "isUnparsedContextual", "nameStart", "startsWith", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "allowAsi", "fn", "oldState", "abortSignal", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "voidPatternLoc", "hasErrors", "isLiteralPropertyName", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "isCommonJS", "scopeFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "NodePrototype", "__clone", "NodeUtils", "locationNode", "unwrapParenthesizedExpression", "LValParser", "_node$extra3", "last", "_node$extra2", "operator", "arg", "checkToRestConversion", "elt", "toAssignableListItem", "element", "toReferencedListDeep", "parseSpread", "parseRestBinding", "parseBindingList", "ParseBindingListFlags", "parseObjectLike", "parseVoidPattern", "closeCharCode", "allowEmpty", "elts", "checkCommaAfterRest", "parseDecorator", "parseBindingElement", "parseBindingRestProperty", "parseBindingProperty", "parsePropertyName", "checkLVal", "checkClashes", "hasParenthesizedAncestor", "_expression$extra", "checkIdentifier", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "declareNameFromIdentifier", "identifier", "allowPattern", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidHeritageClauseType", "InvalidModifierOnAwaitUsingDeclaration", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifierOnUsingDeclaration", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifier", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TupleOptionalAfterType", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "UsingDeclarationInAmbientContext", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "typescript", "TypeScriptParserMixin", "tsParseInOutModifiers", "tsParseModifiers", "bind", "allowedModifiers", "disallowedModifiers", "errorTemplate", "tsParseConstModifier", "tsParseInOutConstModifiers", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenOnSameLineAndCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "stopOnStartOfClassStaticBlock", "hasSeenStaticModifier", "tsIsStartOfStaticBlocks", "tsTryParse", "modified", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "hasOwnProperty", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "tsParseImportTypeOptions", "qualifier", "tsParseEntityName", "tsParseEntityNameFlags", "tsParseTypeArguments", "withProperty", "tsParseImportTypeWithPropertyValue", "parsePropertyDefinition", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "firstParameter", "tsParseTypeMember", "idx", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedType", "tsExpectThenParseType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "elementNode", "restStartLoc", "labeled", "isWord", "chAfterWord", "wordName", "typeOrLabel", "tsParseNonArrayType", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "_unused2", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "checkType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "tsParseTypeAliasDeclaration", "tsInTopLevelContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseEnumBody", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "maybeDefaultIdentifier", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "startType", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "isUsing", "isAwaitUsing", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsParseExpressionStatement", "mod", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "tsIsDeclarationStart", "override", "pp", "parameter", "isSimpleParameter", "tsDisallowOptionalPattern", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "_callee$extra", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "checkKeywords", "checkDuplicateExports", "importNode", "parseMaybeImportPhase", "parseImportSpecifiersAndAfter", "nodeImportEquals", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "declareClassPrivateMethodInScope", "_typeCast", "_typeCast2", "typeCast", "_typeParameters", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "parseMaybeDecoratorArguments", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldStrict", "oldInAbstractClass", "maybeTakeDecorators", "hasEstreePlugin", "methodFn", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "_node$directive", "_node$decorators", "_node$optional", "_node$typeAnnotation", "_node$accessibility", "_node$decorators2", "_node$override", "_node$readonly", "_node$static", "_node$declare", "_node$returnType", "_node$typeParameters", "_node$optional2", "_node$optional3", "_node$accessibility2", "_node$readonly2", "_node$static2", "_node$declare2", "_node$definite", "_node$readonly3", "_node$typeAnnotation2", "_node$accessibility3", "_node$decorators3", "_node$override2", "_node$optional4", "_node$id", "_node$abstract", "_node$declare3", "_node$decorators4", "_node$implements", "_node$superTypeArgume", "_node$typeParameters2", "_node$declare4", "_node$definite2", "_node$const", "_node$declare5", "_node$computed", "_node$qualifier", "_node$declare6", "_node$extends", "_node$declare7", "_node$global", "_node$const2", "_node$in", "_node$out", "superTypeArguments", "in", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "placeholders", "PlaceholdersParserMixin", "parsePlaceholder", "expectedNode", "assertNoSpace", "finishPlaceholder", "chStartsBindingIdentifier", "verifyBreakContinue", "isBreak", "parseStatementOrSloppyAnnexBFunctionDeclaration", "stmtPlaceholder", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "parseClassBody", "maybeParseExportDefaultSpecifier", "_specifiers", "checkExport", "filter", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "v8intrinsic", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "validatePlugins", "pluginsMap", "decoratorsBeforeExport", "allowCallParenthesized", "_pluginsMap$get2", "proposalList", "p", "tokenList", "_pluginsMap$get", "syntaxType", "moduleAttributesVersionPluginOption", "version", "deprecatedAssertSyntax", "RECORD_AND_TUPLE_SYNTAX_TYPES", "missingPlugins", "mixinPlugins", "mixinPluginNames", "ExpressionParser", "checkProto", "isRecord", "sawProto", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "isYield", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "isAmbiguousPrefixOrIdentifier", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "_body$extra", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "recordAwaitIfAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseNoCallExpr", "tag", "quasi", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "_call$extra", "parseSuper", "parseImportMetaPropertyOrPhaseCall", "parseImportCall", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "isSource", "createIdentifierAt", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "parseMaybeAssignAllowInOrVoidPattern", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "substitutions", "maybeAsyncOrAccessorProp", "keyName", "_params", "parseObjectMethod", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "isAwaitAllowed", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "ParamKind", "prodParamToClear", "ret", "revertScopes", "parseProgram", "nextCode", "loopLabel", "switchLabel", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "isForUsing", "nextCharAfterOf", "endCh", "chStartsBindingPattern", "hasInLineFollowingBindingIdentifierOrBrace", "allowsUsing", "parseModuleItem", "ParseStatementFlag", "parseStatementListItem", "allowLabeledFunction", "parseStatement", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "_classNode$decorators", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithAwaitUsing", "starsWithUsingDeclaration", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "ParseFunctionFlag", "discriminant", "cases", "cur", "sawDefault", "isCase", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "hangingDeclaration", "isDeclaration", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "maybeContextualKw", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "_member$decorators", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "_node2$declaration", "_ref$specifiers", "isTypeExport", "assertions", "nextChar", "hasFrom", "nextAfterFrom", "maybeParseImportAttributes", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "_node$specifiers", "_declaration$extra", "nodes", "surrogate", "isJSONModuleImport", "singleBindingType", "_node$assertions", "nonDefaultNamedSpecifier", "find", "phaseIdentifier", "phaseIdentifierName", "isImportPhase", "isPrecedingIdImportPhase", "parseImportSourceAndAttributes", "maybeParseDefaultImportSpecifier", "parseNext", "_node$specifiers2", "parseImportAttributes", "attrs", "attrNames", "parseModuleAttributes", "useWith", "importSpecifier", "Parser", "_options", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginList", "isColorSupported", "process", "env", "FORCE_COLOR", "picocolors", "compose", "f", "g", "v", "buildDefs", "colors", "keyword", "cyan", "capitalized", "yellow", "jsxIdentifier", "punctuator", "number", "magenta", "string", "green", "regex", "comment", "gray", "invalid", "white", "bgRed", "bold", "gutter", "marker", "red", "message", "reset", "defsOn", "createColors", "defsOff", "getDefs", "enabled", "sometimesKeywords", "Set", "NEWLINE", "BRACKET", "tokenize", "JSX_TAG", "getTokenType", "token", "offset", "text", "type", "isKeyword", "value", "isStrictReservedWord", "has", "test", "slice", "toLowerCase", "match", "jsTokens", "default", "exec", "matchToToken", "index", "highlight", "defs", "highlighted", "split", "map", "str", "join", "deprecationWarningShown", "getMarkerLines", "loc", "source", "opts", "startLoc", "Object", "assign", "column", "line", "start", "endLoc", "end", "linesAbove", "linesBelow", "startLine", "startColumn", "endLine", "endColumn", "Math", "max", "min", "length", "lineDiff", "markerLines", "i", "lineNumber", "sourceLength", "codeFrameColumns", "rawLines", "shouldHighlight", "forceColor", "highlightCode", "lines", "hasColumns", "numberMaxWidth", "String", "highlightedLines", "frame", "paddedNumber", "hasMarker", "lastMarkerLine", "markerLine", "Array", "isArray", "markerSpacing", "replace", "numberOfMarkers", "repeat", "colNumber", "emitWarning", "deprecationError", "Error", "name", "console", "warn", "location", "_t", "require", "_parser", "_codeFrame", "isCallExpression", "isExpressionStatement", "isFunction", "isIdentifier", "isJSXIdentifier", "isNewExpression", "isPlaceholder", "isStatement", "isStringLiteral", "removePropertiesDeep", "traverse", "PATTERN", "parseAndBuildMetadata", "formatter", "code", "opts", "placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "ast", "parseWithCodeFrame", "parser", "validate", "state", "syntactic", "placeholders", "placeholderNames", "Set", "legacy", "placeholderVisitorHandler", "Object", "assign", "length", "node", "ancestors", "_state$placeholderWhi", "name", "hasSyntacticPlaceholders", "Error", "value", "test", "has", "slice", "parent", "key", "type", "expectedNode", "push", "resolve", "resolveAncestors", "isDuplicate", "add", "i", "index", "undefined", "parserOpts", "plugins", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowSuperOutsideMethod", "allowYieldOutsideFunction", "sourceType", "parse", "err", "loc", "message", "codeFrameColumns", "start", "_t", "require", "blockStatement", "cloneNode", "emptyStatement", "expressionStatement", "identifier", "isStatement", "isStringLiteral", "stringLiteral", "validate", "populatePlaceholders", "metadata", "replacements", "ast", "placeholders", "forEach", "placeholder", "hasOwnProperty", "call", "name", "placeholderName", "Error", "Object", "keys", "key", "placeholderNames", "has", "slice", "reverse", "_ref", "applyReplacement", "e", "message", "replacement", "isDuplicate", "Array", "isArray", "map", "node", "parent", "index", "resolve", "type", "undefined", "set", "value", "typeAnnotation", "optional", "decorators", "items", "splice", "_options", "require", "_parse", "_populate", "stringTemplate", "formatter", "code", "opts", "metadata", "arg", "replacements", "normalizeReplacements", "parseAndBuildMetadata", "unwrap", "populatePlaceholders", "_options", "require", "_parse", "_populate", "literalTemplate", "formatter", "tpl", "opts", "metadata", "names", "buildLiteralData", "arg", "defaultReplacements", "forEach", "replacement", "i", "replacements", "normalizeReplacements", "Object", "keys", "key", "hasOwnProperty", "call", "Error", "unwrap", "populatePlaceholders", "assign", "prefix", "raw", "join", "includes", "code", "buildTemplateCode", "parseAndBuildMetadata", "parser", "placeholderWhitelist", "Set", "concat", "Array", "from", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "length", "value", "push", "_options", "require", "_string", "_literal", "NO_PLACEHOLDER", "validate", "placeholderPattern", "createTemplateBuilder", "formatter", "defaultOpts", "templateFnCache", "WeakMap", "templateAstCache", "cachedOpts", "Object", "assign", "tpl", "args", "length", "Error", "extendedTrace", "stringTemplate", "merge", "Array", "isArray", "builder", "get", "literalTemplate", "set", "ast", "fn", "rootStack", "error", "stack", "split", "slice", "join", "arg", "err", "formatters", "require", "_builder", "smart", "exports", "createTemplateBuilder", "statement", "statements", "expression", "program", "_default", "default", "Object", "assign", "bind", "undefined", "ast", "apiPolyfills", "assertVersion", "api", "range", "throwVersionError", "version", "Object", "assign", "targets", "assumption", "undefined", "addExternalDependency", "declare", "builder", "options", "dirname", "clonedApi", "name", "keys", "copyApiObject", "declarePreset", "exports", "proto", "test", "getPrototypeOf", "hasOwnProperty", "call", "Number", "isInteger", "Error", "limit", "stackTraceLimit", "err", "slice", "code", "_helperPluginUtils", "require", "_default", "exports", "default", "declare", "api", "assertVersion", "name", "manipulateOptions", "opts", "parserOpts", "plugins", "some", "p", "Array", "isArray", "push", "_assert", "require", "_t", "callExpression", "cloneNode", "expressionStatement", "identifier", "importDeclaration", "importDefaultSpecifier", "importNamespaceSpecifier", "importSpecifier", "memberExpression", "stringLiteral", "variableDeclaration", "variableDeclarator", "ImportBuilder", "constructor", "importedSource", "scope", "hub", "_statements", "_resultName", "_importedSource", "_scope", "_hub", "done", "statements", "resultName", "import", "push", "namespace", "name", "local", "generateUidIdentifier", "statement", "length", "assert", "type", "specifiers", "default", "id", "named", "importName", "var", "expression", "defaultInterop", "_interop", "addHelper", "wildcardInterop", "callee", "declarations", "init", "fail", "prop", "read", "exports", "isModule", "path", "node", "sourceType", "_assert", "require", "_t", "_importBuilder", "_isModule", "identifier", "importSpecifier", "numericLiteral", "sequenceExpression", "isImportDeclaration", "ImportInjector", "constructor", "path", "importedSource", "opts", "_defaultOpts", "importedType", "importedInterop", "importingInterop", "ensureLiveReference", "ensureNoContext", "importPosition", "programPath", "find", "p", "isProgram", "_programPath", "_programScope", "scope", "_hub", "hub", "_applyDefaults", "addDefault", "importedSourceIn", "addNamed", "importName", "assert", "_generateImport", "addNamespace", "addSideEffect", "isInit", "newOpts", "Object", "assign", "nameHint", "undefined", "blockHoist", "isDefault", "isNamed", "isNamespace", "name", "isMod", "isModule", "isModuleForNode", "isModuleForBabel", "Error", "builder", "ImportBuilder", "import", "namespace", "named", "es6Default", "default", "var", "wildcardInterop", "defaultInterop", "read", "prop", "statements", "resultName", "done", "_insertStatements", "type", "_insertStatementsAfter", "_insertStatementsBefore", "unshiftContainer", "length", "isValueImport", "firstImportDecl", "get", "node", "source", "value", "maybeAppendImportSpecifiers", "forEach", "_blockHoist", "targetPath", "val", "Number", "isFinite", "insertBefore", "statementsSet", "Set", "importDeclarations", "Map", "statement", "has", "set", "push", "lastImportPath", "bodyStmt", "newImports", "decl", "delete", "size", "insertAfter", "Array", "from", "exports", "importKind", "hasNamespaceImport", "specifiers", "hasDefaultImport", "target", "local", "unshift", "shift", "_importInjector", "require", "_isModule", "addDefault", "path", "importedSource", "opts", "ImportInjector", "addNamed", "name", "addNamespace", "addSideEffect", "require_html_tags", "require_lib", "specifiers"]
}
